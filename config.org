
#+title: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :noweb yes :tangle init.el
#+STARTUP: overview

* Innit
** Pre-innit
#+begin_src emacs-lisp
;;; init.el --- Emacs configuration -*- lexical-binding: t -*-

;; Performance tweaks for modern machines
(setq gc-cons-threshold 100000000) ; 100 mb
(setq read-process-output-max (* 1024 1024)) ; 1mb

(org-babel-do-load-languages
  'org-babel-load-languages
  '((emacs-lisp . t)
    (python . t)))

(setq org-confirm-babel-evaluate nil)

#+end_src



Configuring Other Apps

#+begin_src emacs-lisp

(push '("conf-unix" . conf-unix) org-src-lang-modes)

#+end_src

Config for auto tangling.
DISABLED: because it was very heavy

(https://github.com/yilkalargaw/org-auto-tangle)
#+begin_src emacs-lisp

  ;; ;; Use after-save-hook with care; perhaps restrict to just config.org:
  ;; (add-hook 'org-mode-hook
  ;;   (lambda ()
  ;;     (when (string= (buffer-file-name)
  ;;                    (expand-file-name "~/.emacs.d/config.org"))
  ;;       (add-hook 'after-save-hook #'org-babel-tangle nil 'local))))
#+end_src
** Package Manager
#+begin_src emacs-lisp
(require 'package)

;; Add MELPA, an unofficial (but well-curated) package registry to the
;; list of accepted package registries. By default Emacs only uses GNU
;; ELPA and NonGNU ELPA, https://elpa.gnu.org/ and
;; https://elpa.nongnu.org/ respectively.
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))

;; Unless we've already fetched (and cached) the package archives,
;; refresh them.
(require 'package)
(unless package-archive-contents
  (package-refresh-contents))

;; no need to always :ensure t
(setq
 use-package-always-ensure t ;; Makes sure to download new packages if they aren't already downloaded
 use-package-verbose t) ;; Package install logging. Packages break, nice to know why.

;; Add the :vc keyword to use-package, making it easy to install
;; packages directly from git repositories.
(unless (package-installed-p 'vc-use-package)
  (package-vc-install "https://github.com/slotThe/vc-use-package"))
(require 'vc-use-package)

;; A quick primer on the `use-package' function (refer to
;; "C-h f use-package" for the full details).
;;
;; (use-package my-package-name
;;   :ensure t    ; Ensure my-package is installed
;;   :after foo   ; Load my-package after foo is loaded (seldom used)
;;   :init        ; Run this code before my-package is loaded
;;   :bind        ; Bind these keys to these functions
;;   :custom      ; Set these variables
;;   :config      ; Run this code after my-package is loaded
;; )
#+end_src
*** ;; straight
#+begin_src emacs-lisp
;; (defvar bootstrap-version)
;; (let ((bootstrap-file
;;        (expand-file-name
;;         "straight/repos/straight.el/bootstrap.el"
;;         (or (bound-and-true-p straight-base-dir)
;;             user-emacs-directory)))
;;       (bootstrap-version 7))
;;   (unless (file-exists-p bootstrap-file)
;;     (with-current-buffer
;;         (url-retrieve-synchronously
;;          "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
;;          'silent 'inhibit-cookies)
;;       (goto-char (point-max))
;;       (eval-print-last-sexp)))
;;   (load bootstrap-file nil 'nomessage))

;; (use-package straight)

;; (straight-use-package 'use-package)

#+end_src

** Garbage collection
#+begin_src emacs-lisp
;; Idle garbage collection
(use-package gcmh
  :config
  ;; (setopt garbage-collection-messages t)
  (setopt gcmh-high-cons-threshold (* 256 1000 1000))
  (setopt gcmh-low-cons-threshold (* 16 1000 1000))
  (setopt gcmh-idle-delay 3)
  ;; (setopt gcmh-verbose t)
  (setopt gc-cons-percentage 0.2)
  (add-hook 'elpaca-after-init-hook #'gcmh-mode))
#+end_src
* Exec path
#+begin_src emacs-lisp
  ;; this fix with-editor not findind emacsclient, which is needed for magit
  (use-package exec-path-from-shell
    :init
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize))
    )

  ;;    ;;
  ;; (defun set-exec-path-from-shell-PATH ()
  ;;   "Set up Emacs' `exec-path' and PATH environment variable to match
  ;; that used by the user's shell.

  ;; This is particularly useful under Mac OS X and macOS, where GUI
  ;; apps are not started from a shell."
  ;;   (interactive)
  ;;   (let ((path-from-shell (replace-regexp-in-string
  ;;               "[ \t\n]*$" "" (shell-command-to-string
  ;;                       "$SHELL --login -c 'echo $PATH'"
  ;;                             ))))
  ;;     (setenv "PATH" path-from-shell)
  ;;     (setq exec-path (split-string path-from-shell path-separator))))

  ;; (set-exec-path-from-shell-PATH)
  ;; (use-package exec-path-from-shell
  ;;  :ensure t
  ;;  :init
  ;;  (exec-path-from-shell-initialize))
  ;; (menu-bar-mode t)

#+end_src
* Editor config
** Modifier Keys
#+begin_src emacs-lisp
;; Mac
(when
    (eq system-type 'darwin)
        (setq
            ns-right-option-modifier 'super ;; so that extend S (right_option) jumps words and delete words
            ns-option-modifier 'none
            mac-command-modifier 'control
            mac-control-modifier 'meta
        )
)
;; Linux
(when
    (eq system-type 'gnu/linux)
        (setq
              ns-control-modifier 'control
              ns-alternate-modifier 'meta
              )
)
#+end_src
** Free C-m and C-i
One should use _<C-m>_ instead of _C-m_
#+begin_src emacs-lisp
(define-key input-decode-map [?\C-m] [C-m])
#+end_src
** Sentence definition
#+begin_src emacs-lisp
  ;; Takes Emacs interpret a space as sentence end, and not a double as default.
  ;; Now we can select sentences correctly.
  (setq sentence-end-double-space nil)
#+end_src
** Configs
*** Misc
#+begin_src emacs-lisp
    ;; The `setq' special form is used for setting variables. Remember
    ;; that you can look up these variables with "C-h v variable-name".
    (setq
          default-directory "~/"
          uniquify-buffer-name-style 'forward
          window-resize-pixelwise t
          frame-resize-pixelwise t
          ;; load file always uses newest one
          load-prefer-newer t

                ;; Automatically save your place in files
          save-place-mode t

          ;; Keep files up-to-date when they change outside Emacs
          global-auto-revert-mode t

          ;; Backups
          create-lockfiles nil
          auto-save-default nil
          backup-by-copying nil
          backup-directory-alist `(("." . ,(concat user-emacs-directory "backups")))
          ;; stop with those .~ backup files
          make-backup-files nil
          ;; ;; simple lock/backup file management
          ;; delete-old-versions t
          ;; always follow symlinks when opening files
          vc-follow-symlinks t
          ;; overwrite text when selected, like we expect.
          ;; delete-seleciton-mode t
          ;; quiet startup
          ;; inhibit-startup-message t
          ;; initial-scratch-message nil
          ;; hopefully all themes we install are safe
          custom-safe-themes t

          ;; ask to kill emacs
          confirm-kill-emacs t
          ;; when quiting emacs, just kill processes
          confirm-kill-processes nil
          ;; ask if local variables are safe once.
          enable-local-variables t
          ;; life is too short to type yes or no
          ;; use-short-answers t
  )
#+end_src
*** Line numbers
#+begin_src emacs-lisp
;; always start in maximized
;; (add-to-list 'default-frame-alist '(fullscreen . maximized))

    ;; Display line numbers only when in programming modes
    (add-hook 'prog-mode-hook 'display-line-numbers-mode)
    (add-hook 'yaml-mode-hook 'display-line-numbers-mode)
    (add-hook 'csv-mode-hook 'display-line-numbers-mode)

#+end_src
*** Context-menu (mouse right click)
#+begin_src emacs-lisp
(setq context-menu-mode t)
#+end_src
** Auto revert buffers (auto update)
e.g.: dired
#+begin_src emacs-lisp
  ;; ;; Auto refresh buffers
  (global-auto-revert-mode 1)

  ;; ;; Also auto refresh dired, but be quiet about it
  (setq global-auto-revert-non-file-buffers t)
  (setq auto-revert-verbose nil)
#+end_src
** Autosave
#+begin_src emacs-lisp
;; auto-save saves all buffers
;; taken from https://www.emacswiki.org/emacs/AutoSave
;; save backups in emacs dir
(setq backup-directory-alist
          `(("." . ,(concat user-emacs-directory "backups"))))

(defun full-auto-save ()
  (interactive)
  (save-excursion
    (dolist (buf (buffer-list))
      (set-buffer buf)
      (if (and (buffer-file-name) (buffer-modified-p))
          (basic-save-buffer)))))
(add-hook 'auto-save-hook 'full-auto-save)

(auto-save-mode 1)
(auto-save-visited-mode 1)
(setq auto-save-visited-interval 1)
#+end_src
** Save after buffer or window switch
Taken from https://batsov.com/articles/2012/03/08/emacs-tip-number-5-save-buffers-automatically-on-buffer-or-window-switch/
#+begin_src emacs-lisp
;; automatically save buffers associated with files on buffer switch
;; and on windows switch
(defadvice switch-to-buffer (before save-buffer-now activate)
  (when buffer-file-name (save-buffer)))
(defadvice other-window (before other-window-now activate)
  (when buffer-file-name (save-buffer)))
(defadvice windmove-up (before other-window-now activate)
  (when buffer-file-name (save-buffer)))
(defadvice windmove-down (before other-window-now activate)
  (when buffer-file-name (save-buffer)))
(defadvice windmove-left (before other-window-now activate)
  (when buffer-file-name (save-buffer)))
(defadvice windmove-right (before other-window-now activate)
  (when buffer-file-name (save-buffer)))
#+end_src
** Files (recent, littering)
#+begin_src emacs-lisp
  ;; no littering

  (use-package no-littering
    :demand t
    :config
          (setq custom-file (no-littering-expand-etc-file-name "custom.el"))
      )

;;  (require 'recentf)

  (recentf-mode 1)
  (setq recentf-max-menu-items 25)

  ;; auto save every 5m
  (run-at-time (current-time) 300 'recentf-save-list)
#+end_src
** Warnings
#+begin_src emacs-lisp
(setq warning-minimum-level :error)
#+end_src
** Buffers
*** References
https://elpa.gnu.org/packages/bufferlo.html
*** Config
#+begin_src emacs-lisp
  ;; Add unique buffer names in the minibuffer where there are many
  ;; identical files. This is super useful if you rely on folders for
  ;; organization and have lots of files with the same name,
  ;; e.g. foo/index.ts and bar/index.ts.
  (require 'uniquify)

  ;; Save history in minibuffer to keep recent commands easily accessible
  (savehist-mode t)

    ;; no headerline above buffer
  (setq info-use-header-line nil)
  (setq info-header-line nil)

  ;; allow multiple minibuffers
  (setq enable-recursive-minibuffers t)

  ;; save window layout & buffers
  ;; (setq desktop-restore-eager 5)
  ;; (desktop-save-mode 1)

  ;; Add padding inside buffer windows
  ;;(setq-default left-margin-width 2
  ;;              right-margin-width 2
  ;;              )
  ;;(set-window-buffer nil (current-buffer)) ; Use them now.

  ;; Add padding inside frames (windows)
  ;;(add-to-list 'default-frame-alist '(internal-border-width . 8))
  ;;(set-frame-parameter nil 'internal-border-width 8) ; Use them now

#+end_src
*** Bufler
***
#+begin_src emacs-lisp
  (use-package bufler
    :ensure t)
#+end_src
*** Buffer terminator
Makes it delete inactive buffers after some time
#+begin_src emacs-lisp
  (use-package buffer-terminator
    :ensure t
    :custom
    (buffer-terminator-verbose nil)
    :config
    (buffer-terminator-mode 1)
    (setq buffer-terminator-verbose t)

    ;;  To set the inactivity timeout (in seconds) after which buffers are considered inactive (default is 30 minutes):
    (setq buffer-terminator-inactivity-timeout (* 60 60 6)) ;; 6 hours
    ;; To define how frequently the cleanup process should run (default is every 10 minutes):
    (customize-set-variable 'buffer-terminator-interval (* 10 60)) ;; 10 minutes
    )
#+end_src
** Minibuffer
Window doesn't change when minibuffer opens
https://m.youtube.com/watch?v=6aA1wfW6t0g
https://github.com/hkjels/mini-ontop.el
#+begin_src emacs-lisp
;; make keyboard-quit a bit smarter
(define-advice keyboard-quit
    (:around (quit) quit-current-context)
  "Quit the current context.

When there is an active minibuffer and we are not inside it close
it.  When we are inside the minibuffer use the regular
`minibuffer-keyboard-quit' which quits any active region before
exiting.  When there is no minibuffer `keyboard-quit' unless we
are defining or executing a macro."
  (if (active-minibuffer-window)
      (if (minibufferp)
          (minibuffer-keyboard-quit)
        (abort-recursive-edit))
    (unless (or defining-kbd-macro
                executing-kbd-macro)
      (funcall-interactively quit))))
#+end_src
** Windowing
*** References
https://www.masteringemacs.org/article/demystifying-emacs-window-manager
;; this makes creating windows always focus on the new one
;; (defadvice split-window (after split-window-after activate)
;;  (other-window 1))

Splitting window in vertical or as wishes
https://www.reddit.com/r/emacs/comments/1hxutdw/split_window_right_quality_of_life_enhancements/?share_id=UI5ZBEEu0twW_vG3q8SUg&utm_medium=android_app&utm_name=androidcss&utm_source=share&utm_term=1

Study buffer indirect + narrowing, and atomic windows.


-----
Making dirvish split vertically, and not horizontally.
;; Make Emacs prefer vertical splits (side-by-side)
;; (setq split-height-threshold nil)
;;(setq split-width-threshold 0)

*Where to add:*
Put this near the top of your config, before you open Dirvish/Dired.

*How it works:*
With these settings, when a window is split, Emacs will split vertically (create a new side-by-side window) instead of splitting horizontally (above/below).

---

*Alternatively:*
If you want to control splitting just for Dired, you could advise =dired-find-file-other-window=, but the above global solution works well for most setups.

*Ref:*
See [[Emacs manual: Splitting Windows]](https://www.gnu.org/software/emacs/manual/html_node/emacs/Splitting-Windows.html) (=split-window-sensibly=, =split-width-threshold=, =split-height-threshold=).

You can =advise= =dired-find-file-other-window= to override the splitting behavior locally. Here’s one way to do this: temporarily set the window splitting thresholds just during the call.

(advice-add 'dired-find-file-other-window :around
  (lambda (orig-fun &rest args)
    (let ((split-width-threshold 0)
          (split-height-threshold nil))
      (apply orig-fun args))))
*** Config
#+begin_src emacs-lisp
    (use-package ace-window
      :config
      (setq
      aw-keys '(?a ?e ?i ?h ?u ?o ?y ?k) ;; keys it uses to ask which window
      aw-scope 'frame ;; Make ace-window frame local
      )
      )

  ;; this makes creating windows always focus on the new one
  ;; (defadvice split-window (after split-window-after activate)
  ;;   (other-window 1))


;; Making dirvish split vertically, and not horizontally.
;; Make Emacs prefer vertical splits (side-by-side)
;; (setq split-height-threshold nil)
;; (setq split-width-threshold 0)

(advice-add 'dired-find-file-other-window :around
  (lambda (orig-fun &rest args)
    (let ((split-width-threshold 0)
          (split-height-threshold nil))
      (apply orig-fun args))))
#+end_src
** Frames
#+begin_src emacs-lisp
;; more useful frame title, that show either a file or a
;; buffer name (if the buffer isn't visiting a file)
(setq frame-title-format
      '((:eval (if (buffer-file-name)
                   (abbreviate-file-name (buffer-file-name))
                 "%b"))))
#+end_src
** Parenthesis
#+begin_src emacs-lisp

  ;; Automatically insert closing parens
  ;; (electric-pair-mode nil)

  ;; Visualize matching parens
  (show-paren-mode 1)

  ;; As you've probably noticed, Lisp has a lot of parentheses.
  ;; Maintaining the syntactical correctness of these parentheses
  ;; can be a pain when you're first getting started with Lisp,
  ;; especially when you're fighting the urge to break up groups
  ;; of closing parens into separate lines. Luckily we have
  ;; Paredit, a package that maintains the structure of your
  ;; parentheses for you. At first, Paredit might feel a little
  ;; odd; you'll probably need to look at a tutorial (linked
  ;; below) or read the docs before you can use it effectively.
  ;; But once you pass that initial barrier you'll write Lisp
  ;; code like it's second nature.
  ;; http://danmidwood.com/content/2014/11/21/animated-paredit.html
  ;; https://stackoverflow.com/a/5243421/3606440
  ;; (use-package paredit
  ;;     :ensure t
  ;;     :hook ((emacs-lisp-mode . enable-paredit-mode)
  ;;            (lisp-mode . enable-paredit-mode)
  ;;            (ielm-mode . enable-paredit-mode)
  ;;            (lisp-interaction-mode . enable-paredit-mode)
  ;;            (scheme-mode . enable-paredit-mode)))


#+end_src
** Indentation
Check this for indenting regions, might be a solution
https://ignaciopp.wordpress.com/2009/06/17/emacs-indentunindent-region-as-a-block-using-the-tab-key/

*** Visual indentation lines
https://github.com/robert-nogueira/.dotfiles/blob/master/emacs%2Fconfig%2Fmisc.el#L114
#+begin_src emacs-lisp
  ;; List of nice character indentations
  ;; │╽╿╏║╎┇︱┊︳┋┆╵〡〢╹╻❙╷〣⌇︴░▒▓⁞⋮∶⁚
  ;; │╽╿╏║╎┇︱┊︳┋┆╵〡〢╹╻❙╷〣⌇︴░▒▓⁞⋮∶⁚
  (use-package highlight-indent-guides
    :custom
    (highlight-indent-guides-auto-enabled nil)
    (highlight-indent-guides-method 'character)
    ;; (highlight-indent-guides-character ?❙)
    ;; (highlight-indent-guides-character ?ǀ)
    (highlight-indent-guides-character ?│)
    (highlight-indent-guides-responsive 'stack)
    :hook
    (prog-mode . highlight-indent-guides-mode)
    (sql-mode . highlight-indent-guides-mode)
    (yaml-mode . highlight-indent-guides-mode)
    (yml-mode . highlight-indent-guides-mode)


  :config
    (set-face-attribute 'highlight-indent-guides-odd-face nil :background "gray40")
    (set-face-attribute 'highlight-indent-guides-even-face nil :background "gray40")
    (set-face-attribute 'highlight-indent-guides-character-face nil :foreground "gray40")
    (set-face-attribute 'highlight-indent-guides-stack-odd-face nil :background "gray40")
    (set-face-attribute 'highlight-indent-guides-stack-even-face nil :background "gray40")
    (set-face-attribute 'highlight-indent-guides-stack-character-face nil :foreground "gray40")
    (set-face-attribute 'highlight-indent-guides-top-odd-face nil :background "#7c6fbe")
    (set-face-attribute 'highlight-indent-guides-top-even-face nil :background "#7c6fbe")
    (set-face-attribute 'highlight-indent-guides-top-character-face nil :foreground "#7c6fbe")
    )
#+end_src
*** Indent config
#+begin_src emacs-lisp
      ;; TAB config

      ;; (use-package smart-tabs-mode
      ;;   :ensure t
      ;;   :config
      ;;     ;; (setq indent-tabs-mode nil)
      ;;     (setq-default indent-tabs-mode nil)
      ;;     (add-hook 'prog-mode-hook
      ;;                 (lambda () (setq indent-tabs-mode nil)))
      ;;     (add-hook 'python-mode-hook
      ;;                 (lambda () (setq indent-tabs-mode nil)))
      ;;     (add-hook 'sql-mode-hook
      ;;                 (lambda () (setq indent-tabs-mode nil)))
      ;;     (smart-tabs-insinuate 'c 'c++ 'java 'javascript 'cperl 'python 'ruby 'nxml 'sql 'yml)
      ;;   )


      ; START TABS CONFIG
      ;; Create a variable for our preferred tab width
      ;; (setq custom-tab-width 4)

      ;; Two callable functions for enabling/disabling tabs in Emacs
      (defun disable-tabs () (setq indent-tabs-mode nil))
      (defun enable-tabs  ()
        (setq indent-tabs-mode t)
        (setq tab-width custom-tab-width))

      ;; Hooks to disable Tabs
      (add-hook 'prog-mode-hook 'disable-tabs)
      (add-hook 'python-mode-hook 'disable-tabs)
      (add-hook 'sql-mode-hook 'disable-tabs)
      (add-hook 'lisp-mode-hook 'disable-tabs)
      (add-hook 'emacs-lisp-mode-hook 'disable-tabs)


  (setq-default indent-tabs-mode nil)



      ;; TODO toggle this back maybe
      ;; Making electric-indent behave sanely
      ;; (setq-default electric-indent-inhibit t)

      ;; Make the backspace properly erase the tab instead of
      ;; removing 1 space at a time.
      (setq backward-delete-char-untabify-method 'hungry)

      ;; Prefer spaces to tabs
      ;; (setq-default indent-tabs-mode t)
      ;; (setq-default tab-width 4)
      ;; (setq indent-line-function 'insert-tab)

#+end_src
*** Indent width
#+begin_src emacs-lisp
(setq-default tab-width 4) ;; Default to 4 spaces, major modes can override this

    (defun my/set-tab-width-two ()
      (setq tab-width 2))

    (add-hook 'yaml-mode-hook 'my/set-tab-width-two)
    (add-hook 'lookml-mode-hook 'my/set-tab-width-two)

#+end_src
*** Custom Indent
#+begin_src emacs-lisp
  ;; TODO maybe use this tab way https://github.com/malb/emacs.d/blob/master/malb.org#tab-dwim

  (defun indent-region-custom(numSpaces)
    (progn
                                          ; default to start and end of current line
      (setq regionStart (line-beginning-position))
      (setq regionEnd (line-end-position))

                                          ; if there's a selection, use that instead of the current line
      (when (use-region-p)
        (setq regionStart (region-beginning))
        (setq regionEnd (region-end))
        )

      (save-excursion ; restore the position afterwards
        (goto-char regionStart) ; go to the start of region
        (setq start (line-beginning-position)) ; save the start of the line
        (goto-char regionEnd) ; go to the end of region
        (setq end (line-end-position)) ; save the end of the line

        (indent-rigidly start end numSpaces) ; indent between start and end
        (setq deactivate-mark nil) ; restore the selected region
        )
      )
    )

  (defun untab-region (N)
    (interactive "p")
    ;;          (indent-region-custom 4)

    (indent-region-custom (- tab-width))
    )

;;   (defun tab-region (N)
;;     (interactive "p")
;;     (if (active-minibuffer-window)
;;         (minibuffer-complete)    ; tab is pressed in minibuffer window -> do completion
;;                                           ; else
;;       (if (string= (buffer-name) "*shell*")
;;           (comint-dynamic-complete) ; in a shell, use tab completion
;;                                           ; else
;;         (if (use-region-p)    ; tab is pressed is any other buffer -> execute with space insertion
;;             ;; (indent-region-custom 4) ; region was selected, call indent-region-custom
;;             (indent-region-custom tab-width) ; region was selected, call indent-region-custom
;;
;;           ;; (insert "    ") ; else insert four spaces as expected
;;           (insert (make-string tab-width ?\s))
;;           ))


    (defun tab-region (n)
      "Insert spaces at EOL or BOL depending on whether the line is blank (spaces/tabs only). N is the repeat count."
      (interactive "p")
      (cond
       ((active-minibuffer-window)
        (minibuffer-complete))
       ((string= (buffer-name) "*shell*")
        (comint-dynamic-complete))
       ((use-region-p)
        (indent-region-custom tab-width))
       (t
        (let ((spaces (make-string (* (or n 1) tab-width) ?\s)))
          (if (save-excursion
                (beginning-of-line)
                (looking-at-p "^[ \t]*$"))
              (insert spaces)
            (let ((orig (point)))
              (save-excursion
                (beginning-of-line)
                (insert spaces))
              (goto-char (+ orig (* (or n 1) tab-width))))))))
      )

    ;; (defun tab-rigidly-custom
    ;;     (interactive "p")
    ;;     (indent-region-custom -4)
    ;; )

    ;; ;;(global-set-key (kbd "<tab>") 'tab-region)
    ;; ;;(global-set-key (kbd "<backtab>") 'untab-region)
    ;; (define-key prog-mode-map (kbd "<tab>") 'tab-region)
    ;; (define-key prog-mode-map (kbd "<backtab>") 'untab-region)







    (defun my-rigid-indent-right ()
      "Indent rigidly to the right by the major mode's default indent level.
      If a region is selected, indent the region. Otherwise, indent the current line."
      (interactive)
      (let* ((indent-level tab-width)
             (deactivate-mark nil) ;; Prevent deactivating the mark
             (region-active (use-region-p))
             (region-start (if region-active (region-beginning) (point)))
             (region-end (if region-active (region-end) (point))))
        (if region-active
            (let ((adjusted-start (save-excursion (goto-char region-start) (line-beginning-position)))
                  (adjusted-end (save-excursion (goto-char region-end) (line-end-position))))
              (indent-rigidly adjusted-start adjusted-end indent-level)
              (goto-char adjusted-start)
              (push-mark (point) t t)
              (goto-char (+ adjusted-end indent-level))
              (setq deactivate-mark nil)) ;; Ensure the region remains active
          (indent-rigidly (line-beginning-position) (line-end-position) indent-level))))


    ;; TODO this has a bug, if there's no more possible left indent, it starts unselecting lines
    (defun my-rigid-indent-left ()
      "Indent rigidly to the left by the major mode's default indent level.
      If a region is selected, indent the region. Otherwise, indent the current line."
      (interactive)
      (let* ((indent-level tab-width)

             (deactivate-mark nil) ;; Prevent deactivating the mark
             (region-active (use-region-p))
             (region-start (if region-active (region-beginning) (point)))
             (region-end (if region-active (region-end) (point))))
        (if region-active
            (let ((adjusted-start (save-excursion (goto-char region-start) (line-beginning-position)))
                  (adjusted-end (save-excursion (goto-char region-end) (line-end-position))))
              (indent-rigidly adjusted-start adjusted-end (- indent-level))
              (goto-char adjusted-start)
              (push-mark (point) t t)
              (goto-char adjusted-end)
              (forward-line -1) ;; Subtract one line from the region end to prevent the cursor from moving to the next line
              (setq deactivate-mark nil)) ;; Ensure the region remains active
          (indent-rigidly (line-beginning-position) (line-end-position) (- indent-level)))))



    ;; TODO check function doom-highlight-non-default-indentation-h

    ;; (defun doom-highlight-non-default-indentation-h ()
    ;;   "Highlight whitespace at odds with `indent-tabs-mode'.
    ;; That is, highlight tabs if `indent-tabs-mode' is `nil', and highlight spaces at
    ;; the beginnings of lines if `indent-tabs-mode' is `t'. The purpose is to make
    ;; incorrect indentation in the current buffer obvious to you.

    ;; Does nothing if `whitespace-mode' or `global-whitespace-mode' is already active
    ;; or if the current buffer is read-only or not file-visiting."
    ;;   (unless (or (eq major-mode 'fundamental-mode)
    ;;               (bound-and-true-p global-whitespace-mode)
    ;;               (null buffer-file-name))
    ;;     (require 'whitespace)
    ;;     (set (make-local-variable 'whitespace-style)
    ;;          (cl-union (if indent-tabs-mode
    ;;                        '(indentation)
    ;;                      '(tabs tab-mark))
    ;;                    (when whitespace-mode
    ;;                      (remq 'face whitespace-active-style))))
    ;;     (cl-pushnew 'face whitespace-style) ; must be first
    ;;     (whitespace-mode +1)))

    ;; (add-hook 'after-change-major-mode-hook #'doom-highlight-non-default-indentation-h 'append)
#+end_src
** Whitespace
#+begin_src emacs-lisp

    ;;;;;;;;;;; whitespace and newline at end of file
    ;; show whitespace
    ;; (setq-default show-trailing-whitespace t)
    ;; (add-hook 'term-mode-hook (lambda () (setq show-trailing-whitespace nil)))

    ;; (use-package ws-butler
    ;;     :config

    ;;     (setq ws-butler-global-mode t)
    ;; )

    (use-package ethan-wspace
      :ensure t
      :config

      (setq mode-require-final-newline nil)
      (global-ethan-wspace-mode 1)

      )

    ;; saving gives end of file as a new line
    ;; (setq require-final-newline t)


    ;; WARNING: This will change your life
    ;; (OPTIONAL) Visualize tabs as a pipe character - "|"
    ;; This will also show trailing characters as they are useful to spot.
    ;;(setq whitespace-style '(face tabs tab-mark trailing))

    ;; (custom-set-faces
    ;;     (whitespace-tab ((t (:foreground "#636363")))))

    ;; (setq whitespace-display-mappings
    ;;   '((tab-mark 9 [124 9] [92 9]))) ; 124 is the ascii ID for '\|'

    ;; (global-whitespace-mode) ; Enable whitespace mode everywhere
  #+end_src
** Multiple cursors
  #+begin_src emacs-lisp
 (use-package multiple-cursors
  :config
  (setq mc/always-run-for-all t)
  :bind
  (:map mc/keymap
        ;; fix unintended behaviour
        ("DEL" . delete-backward-char)
        ("<delete>" . delete-forward-char)
        ("RET" . boon-newline-dwim)
        ("<return>" . boon-newline-dwim)))
#+end_src
** Volatile highlights
#+begin_src emacs-lisp
  (use-package volatile-highlights
    :config
    (volatile-highlights-mode t)

    (vhl/define-extension 'undo-tree 'undo-tree-yank 'undo-tree-move)
    (vhl/install-extension 'undo-tree)

    (vhl/define-extension 'boon 'boon-splice 'boon-substitute-region 'boon-take-region 'boon-splice)
    (vhl/install-extension 'boon)

    )
#+end_src
** Curl wit Plz
#+begin_src emacs-lisp
  (use-package plz
    :config
    (require 'plz)
    )
#+end_src
* Help
#+begin_src emacs-lisp
  ;; TODO remove this after helpful, probably
  ;; Add extra context to Emacs documentation to help make it easier to
  ;; search and understand. This configuration uses the keybindings
  ;; recommended by the package author.
  (use-package helpful
    :ensure t
    :bind (("C-h f" . #'helpful-callable)
           ("C-h v" . #'helpful-variable)
           ("C-h k" . #'helpful-key)
           ("C-c C-d" . #'helpful-at-point)
           ("C-h F" . #'helpful-function)
           ("C-h C" . #'helpful-command)))


  ;; help-map bindings
  (define-key help-map "="  'describe-char)
  (define-key help-map "j"  'describe-face)
  (define-key help-map "M"  'describe-keymap)

;; automatically select help buffers
(setq help-window-select t)
  ;; (use-package info-colors
  ;;   :vc
  ;;   (:fetcher github :repo "ubolonton/info-colors")
  ;;   :init
  ;;   (add-hook 'Info-selection-hook 'info-colors-fontify-node)
  ;;   )
#+end_src
* Themes
** Theme
List of interesting themes:
- ef-owl
- ef-dream
- ef-autumn
- ef-elea-dark
- ef-rosa
- ef-trio-dark
- jetbrains-darcula
- doom-one
- spacemacs dark
- https://github.com/konrad1977/emacs
- https://github.com/eliraz-refael/doom-two-tone-themes?tab=readme-ov-file
#+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d/themes/")

;; A package with a great selection of themes:
;; https://protesilaos.com/emacs/ef-themes
;; (use-package ef-themes
;;   :ensure t
;;   :config
;;   ;; (ef-themes-select 'ef-autumn)
;;   )
;;
;; (use-package doom-themes
;;   :ensure t
;;   :defer t
;;   :config
;;   (doom-themes-visual-bell-config)
;;   ;; (doom-themes-treemacs-config)
;;   (doom-themes-org-config)
;;   (doom-themes-set-faces nil
;;     ;; extending faces breaks orgmode collapsing for now
;;    '(org-block-begin-line :extend nil)
;;    '(org-block-end-line :extend nil)
;;     ;; different sized headings are nice.
;;    '(outline-1 :height 1.3)
;;    '(outline-2 :height 1.1)
;;    '(outline-3 :height 1.0)))
;;
;; (use-package spacemacs-theme
;;   :ensure t
;; )

(use-package jetbrains-darcula-theme
  :ensure t
  )

;; theme

;; all-the-icons
(use-package all-the-icons
  :demand t)

;; (load-theme 'doom-material-dark t)
(load-theme 'jetbrains-darcula t)
#+end_src
** Cursor
#+begin_src emacs-lisp
;;(set-cursor-color "#87cefa")
(set-cursor-color "#51afef")

#+end_src
* Modeline
#+begin_src emacs-lisp
  ;; spacemacs mode line
  ;; (use-package spaceline
  ;;   :ensure t
  ;;   :config
  ;;     (require 'spaceline-config)
  ;;     (spaceline-emacs-theme)
  ;; )

  (use-package doom-modeline
    :ensure t
    :init
    ;; this makes the right side not be cut-off
    ;; (setq nerd-icons-scale-factor 0.5)
    ;; (setq doom-modeline-height 1) ;; optional
    ;; (custom-set-faces
    ;;  '(mode-line ((t (:family "Helvetica" :height 0.9))))
    ;;  '(mode-line-active ((t (:family "Helvetica" :height 0.9)))) ; For 29+
    ;;  '(mode-line-inactive ((t (:family "Helvetica" :height 0.9)))))

    (doom-modeline-mode 1)

    :config

    ;; clock
    (setq display-time-24hr-format t)
    (setq display-time-default-load-average nil)
    (display-time-mode t)


    ;; Define your custom doom-modeline
    (doom-modeline-def-modeline 'my-simple-line
      '(bar matches buffer-info remote-host buffer-position parrot selection-info)
      '(misc-info minor-modes input-method buffer-encoding major-mode process vcs check))

    ;; Set default mode-line
    (add-hook 'doom-modeline-mode-hook
              (lambda ()
                (doom-modeline-set-modeline 'my-simple-line 'default)))


    ;; doom modeline config
    ;; If non-nil, cause imenu to see `doom-modeline' declarations.
    ;; This is done by adjusting `lisp-imenu-generic-expression' to
    ;; include support for finding `doom-modeline-def-*' forms.
    ;; Must be set before loading doom-modeline.
    (setq doom-modeline-support-imenu t)

    ;; How tall the mode-line should be. It's only respected in GUI.
    ;; If the actual char height is larger, it respects the actual height.
    (setq doom-modeline-height 25)

    ;; How wide the mode-line bar should be. It's only respected in GUI.
    (setq doom-modeline-bar-width 4)

    ;; Whether to use hud instead of default bar. It's only respected in GUI.
    (setq doom-modeline-hud nil)

    ;; The limit of the window width.
    ;; If `window-width' is smaller than the limit, some information won't be
    ;; displayed. It can be an integer or a float number. `nil' means no limit."
    (setq doom-modeline-window-width-limit 85)

    ;; Override attributes of the face used for padding.
    ;; If the space character is very thin in the modeline, for example if a
    ;; variable pitch font is used there, then segments may appear unusually close.
    ;; To use the space character from the `fixed-pitch' font family instead, set
    ;; this variable to `(list :family (face-attribute 'fixed-pitch :family))'.
    (setq doom-modeline-spc-face-overrides nil)

    ;; How to detect the project root.
    ;; nil means to use `default-directory'.
    ;; The project management packages have some issues on detecting project root.
    ;; e.g. `projectile' doesn't handle symlink folders well, while `project' is unable
    ;; to hanle sub-projects.
    ;; You can specify one if you encounter the issue.
    (setq doom-modeline-project-detection 'auto)

    ;; Determines the style used by `doom-modeline-buffer-file-name'.
    ;;
    ;; Given ~/Projects/FOSS/emacs/lisp/comint.el
    ;;   auto => emacs/l/comint.el (in a project) or comint.el
    ;;   truncate-upto-project => ~/P/F/emacs/lisp/comint.el
    ;;   truncate-from-project => ~/Projects/FOSS/emacs/l/comint.el
    ;;   truncate-with-project => emacs/l/comint.el
    ;;   truncate-except-project => ~/P/F/emacs/l/comint.el
    ;;   truncate-upto-root => ~/P/F/e/lisp/comint.el
    ;;   truncate-all => ~/P/F/e/l/comint.el
    ;;   truncate-nil => ~/Projects/FOSS/emacs/lisp/comint.el
    ;;   relative-from-project => emacs/lisp/comint.el
    ;;   relative-to-project => lisp/comint.el
    ;;   file-name => comint.el
    ;;   file-name-with-project => FOSS|comint.el
    ;;   buffer-name => comint.el<2> (uniquify buffer name)
    ;;
    ;; If you are experiencing the laggy issue, especially while editing remote files
    ;; with tramp, please try `file-name' style.
    ;; Please refer to https://github.com/bbatsov/projectile/issues/657.
    (setq doom-modeline-buffer-file-name-style 'auto)

    ;; Whether display icons in the mode-line.
    ;; While using the server mode in GUI, should set the value explicitly.
    (setq doom-modeline-icon t)

    ;; Whether display the icon for `major-mode'. It respects option `doom-modeline-icon'.
    (setq doom-modeline-major-mode-icon t)

    ;; Whether display the colorful icon for `major-mode'.
    ;; It respects `nerd-icons-color-icons'.
    (setq doom-modeline-major-mode-color-icon t)

    ;; Whether display the icon for the buffer state. It respects option `doom-modeline-icon'.
    (setq doom-modeline-buffer-state-icon t)

    ;; Whether display the modification icon for the buffer.
    ;; It respects option `doom-modeline-icon' and option `doom-modeline-buffer-state-icon'.
    (setq doom-modeline-buffer-modification-icon t)

    ;; Whether display the lsp icon. It respects option `doom-modeline-icon'.
    (setq doom-modeline-lsp-icon t)

    ;; Whether display the time icon. It respects option `doom-modeline-icon'.
    (setq doom-modeline-time-icon t)

    ;; Whether display the live icons of time.
    ;; It respects option `doom-modeline-icon' and option `doom-modeline-time-icon'.
    (setq doom-modeline-time-live-icon t)

    ;; Whether to use an analogue clock svg as the live time icon.
    ;; It respects options `doom-modeline-icon', `doom-modeline-time-icon', and `doom-modeline-time-live-icon'.
    (setq doom-modeline-time-analogue-clock t)

    ;; The scaling factor used when drawing the analogue clock.
    (setq doom-modeline-time-clock-size 0.7)

    ;; Whether to use unicode as a fallback (instead of ASCII) when not using icons.
    (setq doom-modeline-unicode-fallback nil)

    ;; Whether display the buffer name.
    (setq doom-modeline-buffer-name t)

    ;; Whether highlight the modified buffer name.
    (setq doom-modeline-highlight-modified-buffer-name t)

    ;; When non-nil, mode line displays column numbers zero-based.
    ;; See `column-number-indicator-zero-based'.
    (setq doom-modeline-column-zero-based t)

    ;; Specification of \"percentage offset\" of window through buffer.
    ;; See `mode-line-percent-position'.
    (setq doom-modeline-percent-position '(-3 "%p"))

    ;; Format used to display line numbers in the mode line.
    ;; See `mode-line-position-line-format'.
    (setq doom-modeline-position-line-format '("L%l"))

    ;; Format used to display column numbers in the mode line.
    ;; See `mode-line-position-column-format'.
    (setq doom-modeline-position-column-format '("C%c"))

    ;; Format used to display combined line/column numbers in the mode line. See `mode-line-position-column-line-format'.
    (setq doom-modeline-position-column-line-format '("%l:%c"))

    ;; Whether display the minor modes in the mode-line.
    (setq doom-modeline-minor-modes nil)

    ;; If non-nil, a word count will be added to the selection-info modeline segment.
    (setq doom-modeline-enable-word-count nil)

    ;; Major modes in which to display word count continuously.
    ;; Also applies to any derived modes. Respects `doom-modeline-enable-word-count'.
    ;; If it brings the sluggish issue, disable `doom-modeline-enable-word-count' or
    ;; remove the modes from `doom-modeline-continuous-word-count-modes'.
    (setq doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode))

    ;; Whether display the buffer encoding.
    (setq doom-modeline-buffer-encoding nil)

    ;; Whether display the indentation information.
    (setq doom-modeline-indent-info nil)

    ;; Whether display the total line number。
    (setq doom-modeline-total-line-number nil)

    ;; Whether display the icon of vcs segment. It respects option `doom-modeline-icon'."
    (setq doom-modeline-vcs-icon t)

    ;; The maximum displayed length of the branch name of version control.
    (setq doom-modeline-vcs-max-length 25)

    ;; The function to display the branch name.
    (setq doom-modeline-vcs-display-function #'doom-modeline-vcs-name)

    ;; Whether display the icon of check segment. It respects option `doom-modeline-icon'.
    (setq doom-modeline-check-icon t)

    ;; If non-nil, only display one number for check information if applicable.
    (setq doom-modeline-check-simple-format nil)

    ;; The maximum number displayed for notifications.
    (setq doom-modeline-number-limit 99)

    ;; Whether display the project name. Non-nil to display in the mode-line.
    (setq doom-modeline-project-name t)

    ;; Whether display the workspace name. Non-nil to display in the mode-line.
    (setq doom-modeline-workspace-name t)

    ;; Whether display the perspective name. Non-nil to display in the mode-line.
    (setq doom-modeline-persp-name t)

    ;; If non nil the default perspective name is displayed in the mode-line.
    (setq doom-modeline-display-default-persp-name nil)

    ;; If non nil the perspective name is displayed alongside a folder icon.
    (setq doom-modeline-persp-icon t)

    ;; Whether display the `lsp' state. Non-nil to display in the mode-line.
    (setq doom-modeline-lsp t)

    ;; Whether display the GitHub notifications. It requires `ghub' package.
    (setq doom-modeline-github nil)

    ;; The interval of checking GitHub.
    (setq doom-modeline-github-interval (* 30 60))

    ;; Whether display the modal state.
    ;; Including `evil', `overwrite', `god', `ryo' and `xah-fly-keys', etc.
    (setq doom-modeline-modal t)

    ;; Whether display the modal state icon.
    ;; Including `evil', `overwrite', `god', `ryo' and `xah-fly-keys', etc.
    (setq doom-modeline-modal-icon t)

    ;; Whether display the modern icons for modals.
    (setq doom-modeline-modal-modern-icon t)

    ;; When non-nil, always show the register name when recording an evil macro.
    (setq doom-modeline-always-show-macro-register nil)

    ;; Whether display the mu4e notifications. It requires `mu4e-alert' package.
    (setq doom-modeline-mu4e nil)
    ;; also enable the start of mu4e-alert
    ;; (mu4e-alert-enable-mode-line-display)

    ;; Whether display the gnus notifications.
    (setq doom-modeline-gnus t)

    ;; Whether gnus should automatically be updated and how often (set to 0 or smaller than 0 to disable)
    (setq doom-modeline-gnus-timer 2)

    ;; Wheter groups should be excludede when gnus automatically being updated.
    (setq doom-modeline-gnus-excluded-groups '("dummy.group"))

    ;; Whether display the IRC notifications. It requires `circe' or `erc' package.
    (setq doom-modeline-irc t)

    ;; Function to stylize the irc buffer names.
    (setq doom-modeline-irc-stylize 'identity)

    ;; Whether display the battery status. It respects `display-battery-mode'.
    (setq doom-modeline-battery t)

    ;; Whether display the time. It respects `display-time-mode'.
    (setq doom-modeline-time t)

    ;; Whether display the misc segment on all mode lines.
    ;; If nil, display only if the mode line is active.
    (setq doom-modeline-display-misc-in-all-mode-lines t)

    ;; The function to handle `buffer-file-name'.
    (setq doom-modeline-buffer-file-name-function #'identity)

    ;; The function to handle `buffer-file-truename'.
    (setq doom-modeline-buffer-file-truename-function #'identity)

    ;; Whether display the environment version.
    (setq doom-modeline-env-version t)
    ;; Or for individual languages
    (setq doom-modeline-env-enable-python t)
    (setq doom-modeline-env-enable-ruby t)
    (setq doom-modeline-env-enable-perl t)
    (setq doom-modeline-env-enable-go t)
    (setq doom-modeline-env-enable-elixir t)
    (setq doom-modeline-env-enable-rust t)

    ;; Change the executables to use for the language version string
    (setq doom-modeline-env-python-executable "python") ; or `python-shell-interpreter'
    (setq doom-modeline-env-ruby-executable "ruby")
    (setq doom-modeline-env-perl-executable "perl")
    (setq doom-modeline-env-go-executable "go")
    (setq doom-modeline-env-elixir-executable "iex")
    (setq doom-modeline-env-rust-executable "rustc")

    ;; What to display as the version while a new one is being loaded
    (setq doom-modeline-env-load-string "...")

    ;; By default, almost all segments are displayed only in the active window. To
    ;; display such segments in all windows, specify e.g.
    (setq doom-modeline-always-visible-segments '(mu4e irc))

    ;; Hooks that run before/after the modeline version string is updated
    (setq doom-modeline-before-update-env-hook nil)
    (setq doom-modeline-after-update-env-hook nil)
    )
#+end_src
** Hide modeline mode hook
For hiding the modeline in some buffer types
#+begin_src emacs-lisp
(use-package hide-mode-line)
#+end_src
* UI
** Misc
#+begin_src emacs-lisp
    ;;;; UI

    ;; Remove extra UI clutter by hiding the scrollbar, menubar, and toolbar.
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)

    ;; just disabling beep
    ;; (set-message-beep 'silent)
    (setq visible-bell       nil
          ring-bell-function #'ignore)


    ;; no titlebar
    (add-to-list 'default-frame-alist '(undecorated . t))
    ;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Option-Index.html#Option-Index


    ;; Remove header breadcrumb
    (setq breadcrumb-mode nil)

    ;; scrolling
    (setq hscroll-margin 2
          hscroll-step 1
          ;; Emacs spends too much effort recentering the screen if you scroll the
          ;; cursor more than N lines past window edges (where N is the settings of
          ;; `scroll-conservatively'). This is especially slow in larger files
          ;; during large-scale scrolling commands. If kept over 100, the window is
          ;; never automatically recentered. The default (0) triggers this too
          ;; aggressively, so I've set it to 10 to recenter if scrolling too far
          ;; off-screen.
          scroll-conservatively 10
          scroll-margin 0
          scroll-preserve-screen-position t
          ;; Reduce cursor lag by a tiny bit by not auto-adjusting `window-vscroll'
          ;; for tall lines.
          auto-window-vscroll nil
          ;; mouse
          mouse-wheel-scroll-amount '(2 ((shift) . hscroll))
          mouse-wheel-scroll-amount-horizontal 2)

    ;; Don't resize the frames in steps; it looks weird, especially in tiling window
    ;; managers, where it can leave unseemly gaps.
    (setq frame-resize-pixelwise t)

    ;; UX: GUIs are inconsistent across systems, desktop environments, and themes,
    ;;   and don't match the look of Emacs. They also impose inconsistent shortcut
    ;;   key paradigms. I'd rather Emacs be responsible for prompting.
    (setq use-dialog-box nil)
    (when (bound-and-true-p tooltip-mode)
      (tooltip-mode -1))

    ;; empty scratch buffer message
    ;; (initial-scratch-message "")



    ;; Makes Emacs vertical divisor the symbol │ instead of |.
    (set-display-table-slot standard-display-table 'vertical-border (make-glyph-code ?│))






    ;; ;; margins to centralise text in text mode
    ;; (defun my-set-margins ()
    ;;   "Set margins in current buffer."
    ;;   (setq left-margin-width 24)
    ;;   (setq right-margin-width 24)
    ;;   ;; (setq upper-margin-width 8)
    ;;   ;; (setq upper-margin-width 8)
    ;;   )

    ;; (add-hook 'text-mode-hook 'my-set-margins)
    ;; add hook call my-set-margins to text-mode-hook, except in yml mode
    ;;(add-hook 'yaml-mode-hook (lambda () (remove-hook 'text-mode-hook 'my-set-margins)))
    ;;(remove-hook 'yaml-mode-hook 'my-set-margins)
    ;; this package also tries to center text
    ;;(use-package centered-window)

    ;; add-hook my-set-margins to text-mode-hook, except in yml mode, using unless
    ;; (add-hook 'text-mode-hook (lambda () (unless (eq major-mode 'yaml-mode) (my-set-margins))))


    ;;; Cursor

    ;; The blinking cursor is distracting, but also interferes with cursor settings
    ;; in some minor modes that try to change it buffer-locally (like treemacs) and
    ;; can cause freezing for folks (esp on macOS) with customized & color cursors.
    (blink-cursor-mode -1)

    ;;; Fringes

    ;; Reduce the clutter in the fringes; we'd like to reserve that space for more
    ;; useful information, like diff-hl and flycheck.
    (setq indicate-buffer-boundaries nil
          indicate-empty-lines nil)

    ;; FIX: The native border "consumes" a pixel of the fringe on righter-most
    ;;   splits, `window-divider' does not. Available since Emacs 25.1.
    (setq window-divider-default-places t
          window-divider-default-bottom-width 1
          window-divider-default-right-width 1)
    (add-hook 'doom-init-ui-hook #'window-divider-mode)

    ;; FIX: The native border "consumes" a pixel of the fringe on righter-most
    ;;   splits, `window-divider' does not. Available since Emacs 25.1.
    ;;(setq window-divider-default-places t
    ;;      window-divider-default-bottom-width 1
    ;;      window-divider-default-right-width 1)
    ;;(add-hook 'doom-init-ui-hook #'window-divider-mode)

    ;; Show current key-sequence in minibuffer ala 'set showcmd' in vim. Any
    ;; feedback after typing is better UX than no feedback at all.
    (setq echo-keystrokes 0.02)

    ;; Expand the minibuffer to fit multi-line text displayed in the echo-area. This
    ;; doesn't look too great with direnv, however...
    (setq resize-mini-windows 'grow-only)

    ;; Typing yes/no is obnoxious when y/n will do
    (if (boundp 'use-short-answers)
        (setq use-short-answers t)
      ;; DEPRECATED: Remove when we drop 27.x support
      (advice-add #'yes-or-no-p :override #'y-or-n-p))
    ;; HACK: By default, SPC = yes when `y-or-n-p' prompts you (and
    ;;   `y-or-n-p-use-read-key' is off). This seems too easy to hit by accident,
    ;;   especially with SPC as our default leader key.
    (define-key y-or-n-p-map " " nil)

    ;; Try to keep the cursor out of the read-only portions of the minibuffer.
    ;;(setq minibuffer-prompt-properties '(read-only t intangible t cursor-intangible t face minibuffer-prompt))
    ;;(add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)



    (use-package hl-line
      ;; Highlights the current line
      ;; :hook (emacs-startup-hook . global-hl-line-mode)
      :init
      (defvar global-hl-line-modes
        '(prog-mode text-mode conf-mode special-mode
          org-agenda-mode dired-mode)
        "What modes to enable `hl-line-mode' in.")
      :config
      ;; HACK I reimplement `global-hl-line-mode' so we can white/blacklist modes in
      ;;      `global-hl-line-modes' _and_ so we can use `global-hl-line-mode',
      ;;      which users expect to control hl-line in Emacs.
      (define-globalized-minor-mode global-hl-line-mode hl-line-mode
        (lambda ()
          (and (cond (hl-line-mode nil)
                     ((null global-hl-line-modes) nil)
                     ((eq global-hl-line-modes t))
                     ((eq (car global-hl-line-modes) 'not)
                      (not (derived-mode-p global-hl-line-modes)))
                     ((apply #'derived-mode-p global-hl-line-modes)))
               (hl-line-mode +1))))
      (global-hl-line-mode 1)
        )



    ;; Show Paren when inside of them
    (define-advice show-paren-function (:around (fn) fix)
      "Highlight enclosing parens."
      (cond ((looking-at-p "\\s(") (funcall fn))
            (t (save-excursion
                 (ignore-errors (backward-up-list))
                 (funcall fn)))))

    ;; LINE NUMBER
    (setopt display-line-numbers-width 3
            display-line-numbers-widen t)

    ;; TODO looks like it's not working
    ;; makes non-active tabs darker
    ;; A more complex, more lazy-loaded config
    (use-package solaire-mode
      :ensure t
      :defer 1
      :hook
      ;; Ensure solaire-mode is running in all solaire-mode buffers
      (change-major-mode . turn-on-solaire-mode)
      ;; ...if you use auto-revert-mode, this prevents solaire-mode from turning
      ;; itself off every time Emacs reverts the file
      (after-revert . turn-on-solaire-mode)
      ;; To enable solaire-mode unconditionally for certain modes:
      (ediff-prepare-buffer . solaire-mode)
      :custom
      (solaire-mode-auto-swap-bg t)
      :config
      (solaire-global-mode +1))





    ;; TODO test this other center way
    ;; Center Org Buffers

    ;; We use visual-fill-column to center org-mode buffers for a more pleasing writing experience as it centers the contents of the buffer horizontally to seem more like you are editing a document. This is really a matter of personal preference so you can remove the block below if you don’t like the behavior.

    ;; (defun efs/org-mode-visual-fill ()
    ;;   (setq visual-fill-column-width 100
    ;;         visual-fill-column-center-text t)
    ;;   (visual-fill-column-mode 1))

    ;; (use-package visual-fill-column
    ;;   :hook (org-mode . efs/org-mode-visual-fill))







    ;; In addition to installing packages from the configured package
    ;; registries, you can also install straight from version control
    ;; with the :vc keyword argument. For the full list of supported
    ;; fetchers, view the documentation for the variable
    ;; `vc-use-package-fetchers'.
    ;;
    ;; Breadcrumb adds, well, breadcrumbs to the top of your open buffers
    ;; and works great with project.el, the Emacs project manager.
    ;;
    ;; Read more about projects here:
    ;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Projects.html
    ;; (use-package breadcrumb
    ;;   :vc (:fetcher github :repo joaotavora/breadcrumb)
    ;;   :init (breadcrumb-mode))
#+end_src
** ;; Nova (rounded borders)

#+begin_src emacs-lisp

  ;; (use-package nova
  ;;    :vc (:fetcher github :repo thisisran/nova)

  ;;    :config

  ;;    (require 'nova)

  ;;    (require 'nova-vertico)

  ;;    (setq nova-vertico-mode 1)

  ;;    (require 'nova-corfu)
  ;;    (require 'nova-corfu-popupinfo)

  ;;    (setq nova-corfu-mode 1)
  ;;    (setq nova-corfu-popupinfo-mode 1)

  ;; ;;  (require 'nova-eldoc)

  ;;   (setq nova-eldoc-mode 1)

  ;; )

#+end_src
** Spacious padding
#+begin_src emacs-lisp
;;   (use-package spacious-padding
;;     :init
;;     ;; These are the default values, but I keep them here for visibility.
;;     (setq spacious-padding-widths
;;           '( :internal-border-width 15
;;              :header-line-width 4
;;              :mode-line-width 0
;;              :tab-width 4
;;              :right-divider-width 10
;;              :scroll-bar-width 8
;;              :fringe-width 0))
;;
;;     (setq spacious-padding-subtle-frame-lines t)
;;     ;; customise faces :mode-line-active and :mode-line-inactive
;;     (setq spacious-padding-subtle-frame-lines
;;           '( :mode-line-active spacious-padding-line-active
;;              :mode-line-inactive spacious-padding-line-inactive
;;              :header-line-active spacious-padding-line-active
;;              :header-line-inactive spacious-padding-line-inactive))
;;
;;     ;; Make the underlines appear below the base line, to create a more
;;     ;; consistent effect between overlines and underlines.
;;     (setq x-underline-at-descent-line t)
;;
;;     (spacious-padding-mode 1)
;;     )
#+end_src
** Center buffer
Writeroom for writing mode: https://github.com/joostkremers/writeroom-mode
#+begin_src emacs-lisp
  ;;; CENTER BUFFER
  (use-package olivetti
    :custom
    (require 'olivetti)
    (olivetti-style nil)
    (olivetti-body-width 150)
    :hook ((Custom-mode Info-mode image-mode text-mode markdown-mode org-mode prog-mode) . olivetti-mode)
    )

#+end_src
** Highlight TODOs in code

hl-todo
#+begin_src emacs-lisp
  (use-package hl-todo
    :vc
        (:fetcher github :repo "tarsius/hl-todo")
    :config
    (setq hl-todo-keyword-faces
          '(("TODO"   . "#FF0000")
            ("FIXME"  . "#FF0000")
            ("DEBUG"  . "#A020F0")
            ("GOTCHA" . "#FF4500")
            ("STUB"   . "#1E90FF")))
    (setq global-hl-todo-mode t)
    )

#+end_src
** Rainbows
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)

    (add-hook 'sql-mode-hook
          (lambda ()
            (add-hook 'after-change-major-mode-hook
                      (lambda ()
                        (rainbow-delimiters-mode 1))
                      nil t)))
    )

  (use-package rainbow-mode
    :config
    (add-hook 'prog-mode-hook #'rainbow-mode)
    )
#+end_src
** Faces
Show all faces in a buffer
https://gist.github.com/amno1/1bf2c57033397fe876e8efd1b474e604
#+begin_src emacs-lisp
  (custom-set-faces
   '(highlight ((t (:background "royal blue" :foreground "#a9b7c6"))))
   ;; '(mode-line-active ((t (:box (:line-width (5 . 5) :color "#2b2b2b")))))
)
#+end_src
** Blink beacon
#+begin_src emacs-lisp
  (use-package beacon
    :config
    (beacon-mode 1)
    (setq
        beacon-color "#51afef" ;; same as cursor coulour
        beacon-size 10
        beacon-blink-when-window-changes t ;; Should the beacon blink when the window changes?
        beacon-blink-when-focused t ;; Should the beacon blink when Emacs gains focus?
        beacon-blink-when-buffer-changes t ;; Should the beacon blink when changing buffer?
        beacon-blink-when-window-scrolls t ;; Should the beacon blink when the window scrolls?
        beacon-blink-when-point-moves-vertically t ;; Should the beacon blink when moving a long distance vertically?
        beacon-blink-when-point-moves-horizontally nil ;; Should the beacon blink when moving a long distance horizontally?
        )
    )
#+end_src
* Homepage
** Dashboard
#+begin_src emacs-lisp
(use-package dashboard
  :ensure t
  :custom
    ;; show in `emacsclient -c`
    (initial-buffer-choice #'(lambda () (get-buffer-create "*dashboard*")))
    (dashboard-startup-banner 'logo) ;; 'official
    (dashboard-set-heading-icons t)
    (dashboard-set-file-icons t)
    (dashboard-center-content t)
    (dashboard-vertically-center-content t)
    (dashboard-items '(
        (projects  . 5)
        (recents   . 5)
        (bookmarks . 5)
        (agenda    . 5)
        (registers . 5)
        ))
    (dashboard-item-shortcuts '((recents   . "r")
                                 (bookmarks . "m")
                                 (projects  . "p")
                                 (agenda    . "a")
                                 (registers . "e")))
        (add-to-list 'dashboard-items '(agenda) t)
        (setq dashboard-week-agenda t)
  :config
  (dashboard-setup-startup-hook)
  )
#+end_src
** TODO Org agenda dashboard
https://github.com/fbkarsdorp/org-agenda-dashboard
* Completion
** References
https://codeberg.org/vifon/emacs-config/src/branch/master/emacs.d/lisp/20-completion-engine.el
https://blog.costan.ro/post/2022-02-22-emacs-completion-system/
https://alexforsale.github.io/posts/emacs-vertico/
https://kristofferbalintona.me/posts/202202211546/#synopsis

** Which key
#+begin_src emacs-lisp
  (use-package which-key
    :ensure
    :demand t
    :custom
    (which-key-show-remaining-keys t)
    (which-key-sort-order 'which-key-prefix-then-key-order)
    :config
    (which-key-mode 1)
    (which-key-setup-minibuffer)
    (setq which-key-separator " → ")
    (set-face-attribute
      'which-key-local-map-description-face nil :weight 'bold))



#+end_src
** Vertico
#+begin_src emacs-lisp


  ;;
  (use-package vertico
    :ensure t
    :custom
      (vertico-count 13)                    ; Number of candidates to display
      ;; it resizes automatically when candidates list get smaller, it's annoying
      (vertico-resize nil)
      (vertico-cycle nil) ; Go from last to first candidate and first to last (cycle)?
      ;; Enable recursive minibuffers

      ;; TODO check this
      ;;(completion-styles '(basic substring partial-completion flex))

    ;; :general
    ;; (:keymaps 'vertico-map
    ;;           "<tab>" #'vertico-insert  ; Insert selected candidate into text area
    ;;           "<escape>" #'minibuffer-keyboard-quit ; Close minibuffer
    ;;           ;; NOTE 2022-02-05: Cycle through candidate groups
    ;;           "C-M-n" #'vertico-next-group
    ;;           "C-M-p" #'vertico-previous-group)
    :config
    (vertico-mode))


  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  ;; (use-package savehist
  ;;   :init
  ;;   (savehist-mode))


  ;; A few more useful configurations...
  ;; (use-package emacs
  ;;   :init
  ;;   ;; Add prompt indicator to `completing-read-multiple'.
  ;;   ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  ;;   (defun crm-indicator (args)
  ;;     (cons (format "[CRM%s] %s"
  ;;                   (replace-regexp-in-string
  ;;                    "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
  ;;                    crm-separator)
  ;;                   (car args))
  ;;           (cdr args)))
  ;;   (advice-add #'completing-read-multiple :filter-args #'crm-indicator)
  ;;   ;; Do not allow the cursor in the minibuffer prompt
  ;;   (setq minibuffer-prompt-properties
  ;;         '(read-only t cursor-intangible t face minibuffer-prompt))
  ;;   (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
  ;;   ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;;   ;; Vertico commands are hidden in normal buffers.
  ;;   (setq read-extended-command-predicate
  ;;         #'command-completion-default-include-p)
  ;;   ;; Enable recursive minibuffers
  ;;   (setq enable-recursive-minibuffers t))

#+end_src
** Orderless
#+begin_src emacs-lisp

  ;;;;; orderless

  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless))      ; Use orderless
    (completion-category-defaults nil)    ; I want to be in control!
    (orderless-matching-styles
        '(orderless-literal
        orderless-prefixes
        orderless-initialism
        orderless-regexp
        char-fold-to-regexp ;; ignore diacritics for search
        ;; orderless-flex                       ; Basically fuzzy finding
        ;; orderless-strict-leading-initialism
        ;; orderless-strict-initialism
        ;; orderless-strict-full-initialism
        ;; orderless-without-literal          ; Recommended for dispatches instead
        ))
    )

#+end_src
** Consult
#+begin_src emacs-lisp
  ;; The `consult' package provides lots of commands that are enhanced
  ;; variants of basic, built-in functionality.  One of the headline
  ;; features of `consult' is its preview facility, where it shows in
  ;; another Emacs window the context of what is currently matched in
  ;; the minibuffer.  Here I define key bindings for some commands you
  ;; may find useful.  The mnemonic for their prefix is "alternative
  ;; search" (as opposed to the basic C-s or C-r keys).
  ;;
  ;; Further reading: https://protesilaos.com/emacs/dotemacs#h:22e97b4c-d88d-4deb-9ab3-f80631f9ff1d
  (use-package consult
    :ensure t)

  (use-package consult-lsp
    :ensure t
    :after (consult lsp lsp-mode)
    )

#+end_src
** Corfu
https://github.com/neoheartbeats/.emacs.d/blob/2dbca2776812d6b494b6cd1c2fca2eb870ede45a/lisp/init-corfu.el

#+begin_src emacs-lisp
    (use-package corfu
      :bind
          (:map corfu-map
                ;; unbind other corfu stuffs
                ("RET" . nil)
                ("TAB" . nil)
                ("[tab]" . nil)
                ("<tab>" . nil)
                ;; bind corfu completion to C-enter
                ("C-<return>" . corfu-insert)

                )
      :config
      ;; all your normal corfu stuffs)

      ;; Optional customizations
      ;; :custom
      ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
      ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
      ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
      ;; (corfu-preview-current nil)    ;; Disable current candidate preview
      ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
      ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches

      (setq corfu-auto-delay 0.5)
      ;; Enable Corfu only for certain modes. See also `global-corfu-modes'.
      ;; :hook ((prog-mode . corfu-mode)
      ;;        (shell-mode . corfu-mode)
      ;;        (eshell-mode . corfu-mode))

      :init

      ;; Recommended: Enable Corfu globally.  Recommended since many modes provide
      ;; Capfs and Dabbrev can be used globally (M-/).  See also the customization
      ;; variable `global-corfu-modes' to exclude certain modes.
      (global-corfu-mode)

      ;; Enable optional extension modes:
      (corfu-history-mode)
      ;; (corfu-popupinfo-mode)
      )

  (use-package corfu-popupinfo
    :ensure nil
    :after corfu
    :hook (corfu-mode . corfu-popupinfo-mode)
    :custom
    (corfu-popupinfo-delay '(0.25 . 0.1))
    (corfu-popupinfo-hide nil)
    :config
    (corfu-popupinfo-mode))

    ;; ;; Add extensions
    ;; (use-package cape
    ;;   ;; Bind prefix keymap providing all Cape commands under a mnemonic key.
    ;;   ;; Press C-c p ? to for help.
    ;;   ;; :bind ("C-c p" . cape-prefix-map) ;; Alternative key: M-<tab>, M-p, M-+
    ;;   ;; Alternatively bind Cape commands individually.
    ;;   ;; :bind (("C-c p d" . cape-dabbrev)
    ;;   ;;        ("C-c p h" . cape-history)
    ;;   ;;        ("C-c p f" . cape-file)
    ;;   ;;        ...)
    ;;   :init
    ;;   ;; Add to the global default value of `completion-at-point-functions' which is
    ;;   ;; used by `completion-at-point'.  The order of the functions matters, the
    ;;   ;; first function returning a result wins.  Note that the list of buffer-local
    ;;   ;; completion functions takes precedence over the global list.
    ;;   (add-hook 'completion-at-point-functions #'cape-company-to-capf)
    ;;   (add-hook 'completion-at-point-functions #'cape-dabbrev)
    ;;   (add-hook 'completion-at-point-functions #'cape-file)
    ;;   (add-hook 'completion-at-point-functions #'cape-elisp-block)
    ;;   ;; (add-hook 'completion-at-point-functions #'cape-history)
    ;;   ;; ...
    ;;   :config
    ;;   ;; Use Company backends as Capfs.
    ;;   (setq-local completion-at-point-functions
    ;;               (mapcar #'cape-company-to-capf
    ;;                       (list #'company-files #'company-keywords #'company-dabbrev)))
    ;;   )
#+end_src
** Embark
#+begin_src emacs-lisp

  ;; The `embark' package lets you target the thing or context at point
  ;; and select an action to perform on it.  Use the `embark-act'
  ;; command while over something to find relevant commands.
  ;;
  ;; When inside the minibuffer, `embark' can collect/export the
  ;; contents to a fully fledged Emacs buffer.  The `embark-collect'
  ;; command retains the original behaviour of the minibuffer, meaning
  ;; that if you navigate over the candidate at hit RET, it will do what
  ;; the minibuffer would have done.  In contrast, the `embark-export'
  ;; command reads the metadata to figure out what category this is and
  ;; places them in a buffer whose major mode is specialised for that
  ;; type of content.  For example, when we are completing against
  ;; files, the export will take us to a `dired-mode' buffer; when we
  ;; preview the results of a grep, the export will put us in a
  ;; `grep-mode' buffer.
  ;;
  ;; Further reading: https://protesilaos.com/emacs/dotemacs#h:61863da4-8739-42ae-a30f-6e9d686e1995

  (use-package embark
    :ensure t
    :bind
    (
     ("C-<RET>" . embark-act)
     ("M-<RET>" . embark-dwim)
     ("C-h B" . embark-bindings)
     )
    (
           :map minibuffer-local-map
           ("C-." . embark-select)
           ("C-c C-c" . embark-collect)
           ("C-c C-e" . embark-export)
           ("C-c C-l" . embark-live)
           ("<RET>" . vertico-exit)
           )
           (:map embark-collect-mode-map
                 ("." . embark-select)
           ))

  ;; ;; The `embark-consult` package is glue code to tie together `embark'
  ;; and `consult'.
  (use-package embark-consult
    :ensure t)
#+end_src
** Greping
*** Ripgrep
#+begin_src emacs-lisp
  ;; ripgrep
  (use-package rg
      :ensure t
      :config
          (require 'rg)
  )
#+end_src
*** Deadgrep
It has some beta features on editing files on the fly on the deadgrep buffer

- https://github.com/Wilfred/deadgrep?tab=readme-ov-file#beta-features

You can now edit files directly from results buffers with M-x deadgrep-edit-mode.

It is currently in beta. Alternatively, package wgrep added support for editing deadgrep buffers in April 2023 via wgrep-deadgrep. (One feature unlocked that way is, e.g., the ability to delete a line in edit mode via C-d)

#+begin_src emacs-lisp
  (use-package deadgrep
    :bind ( :map deadgrep-mode-map
            ("," . deadgrep-backward-match)
            ("e" . deadgrep-forward-match)

            (";" . deadgrep-backward-filename)
            ("E" . deadgrep-forward-filename)

            ("s" . deadgrep-incremental) ;; search as typing
            ("S" . deadgrep-search-term) ;; type and then search
            ("d" . deadgrep-directory)
            ("D" . deadgrep-parent-directory)
            ("c" . deadgrep-cycle-search-case)
            ("t" . deadgrep-cycle-search-type)
            ("f" . deadgrep-cycle-files)

            ("k" . deadgrep-kill-all-buffers)
            )
    )
#+end_src
*** Wgrep
#+begin_src emacs-lisp
  ;; The `wgrep' packages lets us edit the results of a grep search
  ;; while inside a `grep-mode' buffer.  All we need is to toggle the
  ;; editable mode, make the changes, and then type C-c C-c to confirm
  ;; or C-c C-k to abort.
  ;;
  ;; Further reading: https://protesilaos.com/emacs/dotemacs#h:9a3581df-ab18-4266-815e-2edd7f7e4852
  (use-package wgrep
    :ensure t
    :bind ( :map grep-mode-map
            ("e" . wgrep-change-to-wgrep-mode)
            ("C-x C-q" . wgrep-change-to-wgrep-mode)
            ("C-c C-c" . wgrep-finish-edit)))

#+end_src
** Marginalia
#+begin_src emacs-lisp
  (use-package marginalia
    :bind (
           :map minibuffer-local-map
           ("C-d" . marginalia-cycle))
    :init
    (marginalia-mode))


  ;; completions with icons
  (use-package all-the-icons-completion
    :after (marginalia all-the-icons)
    :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
    :init
    (all-the-icons-completion-mode))


  ;; completions
  ;; TODO add https://github.com/xenodium/company-org-block for org blocks

#+end_src
** ;; Company
#+begin_src emacs-lisp
  ;; company
  ;; enable global company mode
  ;; TODO looks like it's not working in Python, and maybe in others
;;   (use-package company
;;    :ensure t
    ;; :config
      ;; global
      ;; (add-hook 'after-init-hook 'global-company-mode)
      ;; completion immediately
      ;; (setq company-idle-delay 0)
      ;; move the selection to the next/previous candidate using C-n/p instead of M-n/p
  ;;     (with-eval-after-load 'company
  ;;       (define-key company-active-map (kbd "C-<tab>") #'company-complete)
  ;;       (define-key company-active-map (kbd "M-n") nil)
  ;;       (define-key company-active-map (kbd "M-p") nil)
  ;;       (define-key company-active-map (kbd "C-n") #'company-select-next)
  ;;       (define-key company-active-map (kbd "C-p") #'company-select-previous))
;; )

  ;; ;; (use-package company-box
  ;;     :hook (company-mode . company-box-mode))
#+end_src
* Moving and jumping
** References
Comcobulate: Jumping with tree sitter style package https://github.com/mickeynp/combobulate
** Better Jumper
https://github.com/gilbertw1/better-jumper
#+begin_src emacs-lisp
;;     (use-package better-jumper
;;       :config
;;       (add-hook 'python-mode-hook #'turn-on-better-jumper-mode)
;;   )
#+end_src
** Avy
Avy tips
https://karthinks.com/software/avy-can-do-anything/
https://gist.github.com/karthink/af013ffd77fe09e67360f040b57b4c7b
#+begin_src emacs-lisp
(use-package avy
  :config
  ;; Home row only (the default).
(setq avy-keys '(?r ?s ?n ?t ?g ?a ?e ?i ?h))
(setq avy-background nil)
;; overlay style
;; pre: - full path before target, leaving all original text.
    ;; at: - single character path on target, obscuring the target.
    ;; at-full: full path on target, obscuring the target and the text behind it.
    ;; post: full path after target, leaving all original text.
    ;; de-bruijn: like at-full but the path is in a De Bruijn sequence.
    ;; words: like at-full, but the path consists of words as defined by =avy-words=.
(setq avy-style 'at-full)

(setq avy-all-windows nil) ;; nil, t, all-frames



  )
#+end_src
** Vundo
#+begin_src emacs-lisp
  (use-package vundo
    :bind (:map vundo-mode-map
               ("a" . 'vundo-backward)
               ("<left>" . 'vundo-backward)
               ("i" . 'vundo-forward)
               ("<right>" . 'vundo-forward)
               ("e" . 'vundo-next)
               ("<down>" . 'vundo-next)
               ("," . 'vundo-previous)
               ("<up>" . 'vundo-previous)
               ("<escape>" . 'vundo-quit)

               ("z" . (lambda () (interactive) (vundo-backward 1) (vundo-confirm)))
               )
    )
#+end_src
* AI model
** gptel
option presets: https://github.com/karthink/gptel?tab=readme-ov-file#option-presets

https://github.com/karthink/gptel/issues/942

    (let ((my/gptel-prompt-prefix "@You:\n\n")
          (my/gptel-response-prefix "@AI:\n\n")
         )
      (setq gptel-prompt-prefix-alist `((markdown-mode . ,my/gptel-prompt-prefix)
                                        (org-mode . ,my/gptel-prompt-prefix)
                                        (text-mode . ,my/gptel-prompt-prefix)))
      (setq gptel-response-prefix-alist `((markdown-mode . ,my/gptel-response-prefix)
                                          (org-mode . ,my/gptel-response-prefix)
                                          (text-mode . ,my/gptel-response-prefix)))
      (defface my/gptel-prompt-response-prefix-face
        `((t (:foreground ,(face-attribute 'font-lock-keyword-face :foreground)
              :weight bold
              :height 1.2
              :inverse-video t
        )))
        "Gptel prompt/response prefix face"
      )
      (defun my/gptel-setup-font-lock ()
        "Setup font-lock for gptel."
        (font-lock-add-keywords
         nil
         `((,(concat "^" (string-trim-right my/gptel-prompt-prefix) "\s*$") . 'my/gptel-prompt-response-prefix-face)
           (,(concat "^" (string-trim-right my/gptel-response-prefix) "\s*$") . 'my/gptel-prompt-response-prefix-face)
         )
        )
      )
      (add-hook 'gptel-mode-hook #'my/gptel-setup-font-lock)
    )

#+begin_src emacs-lisp
;;     (use-package gptel
;;       :vc
;;       (:fetcher github :repo "karthink/gptel")
;;       :config
;;       ;; OPTIONAL configuration
;;       (setq
;;         gptel-model 'gpt-4.1
;;         gptel-backend (gptel-make-gh-copilot "Copilot")
;;         gptel-default-mode 'org-mode
;;         ;; gptel-prompt-prefix-alist    ;; Text inserted before queries. (setf (alist-get 'org-mode gptel-prompt-prefix-alist) "@user\n")
;;         ;; gptel-response-prefix-alist  ;; Text inserted before responses. (setf (alist-get 'org-mode gptel-response-prefix-alist) "@assistant\n")
;;         ;; (setf (alist-get 'org-mode gptel-prompt-prefix-alist) "@user\n")
;;         ;; (setf (alist-get 'org-mode gptel-response-prefix-alist) "@assistant\n")
;;         gptel-org-branching-context t
;;         )
;;
;;       (let ((my/gptel-prompt-prefix "@prompt:\n\n")
;;             (my/gptel-response-prefix "@answer:\n\n")
;;             )
;;         (setq gptel-prompt-prefix-alist `((markdown-mode . ,my/gptel-prompt-prefix)
;;                                           (org-mode . ,my/gptel-prompt-prefix)
;;                                           (text-mode . ,my/gptel-prompt-prefix)))
;;         (setq gptel-response-prefix-alist `((markdown-mode . ,my/gptel-response-prefix)
;;                                             (org-mode . ,my/gptel-response-prefix)
;;                                             (text-mode . ,my/gptel-response-prefix)))
;;         (defface my/gptel-prompt-response-prefix-face
;;           `((t (:foreground ,(face-attribute 'font-lock-keyword-face :foreground)
;;                             :weight bold
;;                             :height 1.2
;;                             :inverse-video t
;;                             )))
;;           "Gptel prompt/response prefix face"
;;           )
;;         (defun my/gptel-setup-font-lock ()
;;           "Setup font-lock for gptel."
;;           (font-lock-add-keywords
;;            nil
;;            `((,(concat "^" (string-trim-right my/gptel-prompt-prefix) "\s*$") . 'my/gptel-prompt-response-prefix-face)
;;              (,(concat "^" (string-trim-right my/gptel-response-prefix) "\s*$") . 'my/gptel-prompt-response-prefix-face)
;;              )
;;            )
;;           )
;;         (add-hook 'gptel-mode-hook #'my/gptel-setup-font-lock)
;;         )
;;
;;       )
;;
;;
;;
;;
;;
;;
;;
;;   ;; function to call gtpel-send with universal
;;     (defun my/gptel-send-universal ()
;;     (interactive)
;;     (let ((current-prefix-arg 4))
;;       (call-interactively #'gptel-send)))
;;
;;     (defun my/gptel-context-add-buffer ()
;;     (interactive)
;;     (let ((current-prefix-arg 4))
;;       (call-interactively #'gptel-add)))
;;
;;     (defun my/gptel-context-add-file ()
;;     (interactive)
;;     (let ((current-prefix-arg 4))
;;       (call-interactively #'gptel-add-file)))
#+end_src
** Copilot
#+begin_src emacs-lisp
    ;; copilot
    ;; accept completion from copilot and fallback to company
    ;; if copilot gets too annoying, make it less here: https://robert.kra.hn/posts/2023-02-22-copilot-emacs-setup/

;;   (use-package copilot
;;    :ensure t
;;    :hook (prog-mode . copilot-mode)
;;    :bind (:map copilot-completion-map
;;                ("<tab>" . 'copilot-accept-completion)
;;                ("<backtab>" . 'copilot-accept-completion-by-line)
;;                ("M-<tab>" . 'copilot-accept-completion-by-word)
;;                ("C-e" . 'copilot-next-completion)
;;                ("C-," . 'copilot-previous-completion)
;;                )
;;
;;      :config
;;        ;; (setq copilot-auto-trigger nil)
;;        (add-to-list 'copilot-disable-predicates #'(lambda () t))
;;
;;        (add-to-list 'copilot-indentation-alist '(prog-mode 4))
;;        (add-to-list 'copilot-indentation-alist '(org-mode 2))
;;        (add-to-list 'copilot-indentation-alist '(text-mode 2))
;;        (add-to-list 'copilot-indentation-alist '(yaml-mode 2))
;;        (add-to-list 'copilot-indentation-alist '(closure-mode 2))
;;        (add-to-list 'copilot-indentation-alist '(emacs-lisp-mode 2)))
#+end_src
* Git
** magit and forge
*** TODO References
check var magit-diff-refine-hunk, values (like 'all)
use forge for PRs and comments
git-gutter (looks like I can undo git chuncks from files)

To fasten it up https://jakemccrary.com/blog/2020/11/14/speeding-up-magit/
**** Visit file commits
https://www.reddit.com/r/emacs/comments/bcpexy/magit_how_to_quickly_view_the_history_of_a_file/
 I figured out a hack:

(defun kisaragi/magit-log-visit-changed-file ()
  "Visit a changed file of revision under point in `magit-log-mode'.

Uses `general-simulate-key', so `general-simulate-RET' will
become defined after invocation."
  (interactive)
  (general-simulate-key "RET")
  ;; visit the commit
  (general-simulate-RET)
  ;; move to first changed file in diff buffer
  (setf (point) (point-min))
  (search-forward "|" nil t)
  ;; open the revision
  (general-simulate-RET))

(general-define-key
 :keymaps '(magit-log-mode-map)
 :states 'normal
 "C-<return>" #'kisaragi/magit-log-visit-changed-file)

Now I can press "C-<return>" in a Magit log buffer (like from magit-log-buffer-file) and see the old blob right away.

[[https://spee.ch/1/retdownret-gif.gif][Result]]

Edit 1: change RET RET to RET <down> RET which works better.

Edit 2: improve the reliability of the hack again by moving it into a function
*** Config
#+begin_src emacs-lisp
        ;; An extremely feature-rich git client. Activate it with "C-c g".

  (defun magit-select-next-line ()
    "Set mark if no region active, then select next line Magit-style."
    (interactive)
    (unless (region-active-p)
      (set-mark (point)))
    (magit-next-line nil t))

  (defun magit-select-previous-line ()
    "Set mark if no region active, then select previous line Magit-style."
    (interactive)
    (unless (region-active-p)
      (set-mark (point)))
    (magit-previous-line nil t))


        (use-package magit
          :commands magit-status
          :custom
              (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
              (ediff-split-window-function 'split-window-sensibly)
              (ediff-merge-split-window-function 'split-window-sensibly)
              (ediff-window-setup-function 'ediff-setup-windows-plain)
          :config
              (remove-hook 'magit-status-sections-hook 'magit-insert-tags-header)
      ;;        (remove-hook 'magit-status-sections-hook 'magit-insert-status-headers)

              ;; edit diff transient, so that Ediff is there
              (transient-define-prefix magit-diff ()
                "Show changes between different versions."
                :man-page "git-diff"
                :class 'magit-diff-prefix
                'magit-diff-infix-arguments
                ["Actions"
                 [("d" "Ediff Dwim"    magit-ediff-dwim)
                  ("D" "Diff Dwim (all things)"     magit-diff-dwim)
                  ("e" "Ediff Menu"    magit-ediff)
                  ("r" "Diff range"    magit-diff-range)
                  ("p" "Diff paths"    magit-diff-paths)
                  ]
                 [("u" "Diff unstaged" magit-diff-unstaged)
                  ("s" "Diff staged"   magit-diff-staged)
                  ("w" "Diff worktree" magit-diff-working-tree)]
                 [("c" "Show commit"   magit-show-commit)
                  ("t" "Show stash"    magit-stash-show)]])

              :bind (:map magit-mode-map
                     ("e" . magit-next-line)
                     ("E" . magit-select-next-line)

                     ("," . magit-previous-line)
                     (";" . magit-select-previous-line)


                     ;; probably I don't need to bind, let's see
                     ;; ("" . magit-ediff-dwim)
                     )
          )

        ;; NOTE: Make sure to configure a GitHub token before using this package!
        ;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
        ;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
        ;; (use-package forge
        ;;  :after magit
        ;;  :config
        ;;  (setq auth-sources '("~/.authinfo"))
        ;;  )


    ;; Using straight.el
    (use-package magit-prime
      :vc (:fetcher github :repo "Azkae/magit-prime")
      :config
      (add-hook 'magit-pre-refresh-hook 'magit-prime-refresh-cache))

#+end_src

** TODO Git reviews and notifications
gh-dash: https://github.com/dlvhdr/gh-dash?tab=readme-ov-file

consult-gh: https://github.com/armindarvish/consult-gh?tab=readme-ov-file#main-functions-and-interactive-commands

Magit PR reviews:
https://www.reddit.com/r/emacs/s/vl5ftoztaR

** Diff-hl
#+begin_src emacs-lisp
  (use-package diff-hl
    :defer 1
    :hook
    (dired-mode . diff-hl-dired-mode-unless-remote)
    :config
    (global-diff-hl-mode 1))

#+end_src
** ediff
*** faces
#+begin_src emacs-lisp

  (custom-set-faces
   '(ediff-current-diff-A ((t (:extend t :background "tomato4"))))
   '(ediff-fine-diff-A ((t (:extend t :background "tomato3"))))
   '(ediff-even-diff-A ((t (:extend t :background "tomato4"))))
   '(ediff-odd-diff-A ((t (:extend t :background "tomato4"))))


   '(ediff-current-diff-B ((t (:extend t :background "tomato4"))))
   '(ediff-fine-diff-B ((t (:extend t :background "tomato3"))))
   '(ediff-even-diff-B ((t (:extend t :background "tomato4"))))
   '(ediff-odd-diff-B ((t (:extend t :background "tomato4"))))

   '(ediff-current-diff-C ((t (:extend t :background "SlateBlue4"))))
   '(ediff-fine-diff-C ((t (:extend t :background "SlateBlue3"))))
   '(ediff-even-diff-C ((t (:extend t :background "SlateBlue4"))))
   '(ediff-odd-diff-C ((t (:extend t :background "SlateBlue4"))))


   '(ediff-current-diff-Ancestor ((t (:extend t :background "tomato4"))))
   '(ediff-fine-diff-Ancestor ((t (:extend t :background "tomato3"))))
   '(ediff-even-diff-Ancestor ((t (:extend t :background "tomato4"))))
   '(ediff-odd-diff-Ancestor ((t (:extend t :background "tomato4"))))
)
    ;; (defun update-diff-colors ()
    ;;   "update the colors for diff faces"
    ;;   (set-face-attribute 'diff-added nil
    ;;                       :foreground "white" :background "blue")
    ;;   (set-face-attribute 'diff-removed nil
    ;;                       :foreground "white" :background "red3")
    ;;   (set-face-attribute 'diff-changed nil
    ;;                       :foreground "white" :background "purple"))
    ;; (eval-after-load "diff-mode"
    ;;   '(update-diff-colors))






      ;; (custom-set-faces '(ediff-current-diff-A
      ;;                     ((((type tty)) :background "yellow" :foreground "blue")
      ;;                      (t :background "DarkSeaGreen3" :foreground "blue violet"))))
      ;; (custom-set-faces '(ediff-fine-diff-A
      ;;                     ((((type tty)) :background "blue" :foreground "white")
      ;;                      (t :background "gold1" :foreground "red"))))
      ;; (custom-set-faces '(ediff-current-diff-B
      ;;                     ((((type tty)) :background "yellow" :foreground "black")
      ;;                      (t :background "DodgerBlue1" :foreground "gray11"))))
      ;; (custom-set-faces '(ediff-fine-diff-B
      ;;                     ((((type tty)) :background "cyan" :foreground "red")
      ;;                      (t :background "chocolate2" :foreground "dark slate blue"))))


        ;; (defun ediff-face-settings ()
        ;;   "Face settings for `ediff'."
        ;; ;;   (if is-before-emacs-21
        ;; ;;       (progn
        ;; ;;         (custom-set-faces
        ;; ;;          '(ediff-current-diff-face-B
        ;; ;;            ((((class color) (background dark)) (:background "yellow")))))
        ;; ;;         (set-face-foreground 'ediff-fine-diff-face-A "white")
        ;; ;;         (set-face-background 'ediff-fine-diff-face-A "blue")
        ;; ;;         (set-face-foreground 'ediff-current-diff-face-B "red")
        ;; ;;         (set-face-foreground 'ediff-fine-diff-face-B "red")
        ;; ;;         (set-face-background 'ediff-fine-diff-face-B "blue"))
        ;;     (custom-set-faces '(ediff-current-diff-A
        ;;                         ((((type tty)) :background "yellow" :foreground "blue")
        ;;                          (t :background "DarkSeaGreen3" :foreground "blue violet"))))
        ;;     (custom-set-faces '(ediff-fine-diff-A
        ;;                         ((((type tty)) :background "blue" :foreground "white")
        ;;                          (t :background "gold1" :foreground "red"))))
        ;;     (custom-set-faces '(ediff-current-diff-B
        ;;                         ((((type tty)) :background "yellow" :foreground "black")
        ;;                          (t :background "DodgerBlue1" :foreground "gray11"))))
        ;;     (custom-set-faces '(ediff-fine-diff-B
        ;;                         ((((type tty)) :background "cyan" :foreground "red")
        ;;                          (t :background "chocolate2" :foreground "dark slate blue"))))

        ;; (eval-after-load "ediff"
        ;;   `(ediff-face-settings))
#+end_src
* File managers
** References
https://config.phundrak.com/emacs/packages/emacs-builtin.html#dired


TODO:
package
(use-package dired-git-info)
git-timemachine
(use-package browse-at-remote)

diredfl for colours, but requires editing colours, as it's ugly


A way to make hydra always on at dirvish

(defhydra hydra-dirvish (:hint nil :color blue)
  "
^Navigation^    ^Action^         ^Subtree^
-------------------------------------------------
_,_: up         _e_: down        _a_: up
_i_: toggle     _o_: open        _x_: delete
"
  ("," dired-previous-line)
  ("e" dired-next-line)
  ("a" dirvish-subtree-up)
  ("i" dirvish-subtree-toggle)
  ("o" dired-find-file)
  ("x" dired-do-delete)
  ("q" nil "quit hydra" :color blue)
)
#+end_src
> Adjust this table to include all your custom keys.


*For Dirvish:*
;; (add-hook 'dirvish-mode-hook #'hydra-dirvish/body)

*For Dired:*
(add-hook 'dired-mode-hook #'hydra-dirvish/body)

(*Note:* If using both, you can create a function that checks which mode you are in, and only run it once.)

---


If you want the hydra only when you switch to the buffer (not every time you refresh):

(defun my-maybe-dirvish-hydra ()
  (unless (or (minibufferp) (active-minibuffer-window))
    (hydra-dirvish/body)))

(add-hook 'dirvish-mode-hook #'my-maybe-dirvish-hydra)
(add-hook 'dired-mode-hook #'my-maybe-dirvish-hydra)

** Dired and dirvish
#+begin_src emacs-lisp
      ;; use human-readable sizes in dired
      ;;((dired-listing-switches "-agho --group-directories-first"))
      ;; (setq-default dired-listing-switches "-alh")
      (use-package dired
        :ensure nil
        ;; :hook
        ;; (dired-mode . dired-hide-details-mode)
        ;; no need for auto-revert-mode hook, it's enabled globally
        ;;(dired-mode-hook . auto-revert-mode)
        :config
        ;; this command is useful when you want to close the window of `dirvish-side'
        ;; automatically when opening a file
        (put 'dired-find-alternate-file 'disabled nil)

        (setq dired-dwim-target t)                  ;; do what I mean
        (setq dired-recursive-copies 'always)       ;; don't ask when copying directories
        (setq dired-create-destination-dirs 'ask)
        (setq dired-clean-confirm-killing-deleted-buffers nil)
        (setq dired-make-directory-clickable t)
        ;; making this nil allows to use copy and paste on marked files
        (setq dired-kill-when-opening-new-dired-buffer nil)   ;; Tidy up open buffers by default
        ;; ;; solve ls problems with macOS
        (when (eq system-type 'darwin)
          (let ((gls (executable-find "gls")))
            (when gls
              (setq dired-use-ls-dired t
                    insert-directory-program gls
                    dired-listing-switches "-l --almost-all --human-readable --group-directories-first --no-group")))))




      (use-package dirvish
        :after dired
        :ensure t
        :init
        (dirvish-override-dired-mode)
        :bind
        (:map dirvish-mode-map
              ;; left click for expand/collapse dir or open file
              ("<mouse-1>" . dirvish-subtree-toggle-or-open)
              ;; middle click for opening file / entering dir in other window
              ("<mouse-2>" . dired-mouse-find-file-other-window)
              ;; right click for opening file / entering dir
              ("<mouse-3>" . dired-mouse-find-file)

              ("e" . dired-next-line)
              ("," . dired-previous-line)
              ("a" . dirvish-subtree-up)
              ("i" . dirvish-subtree-toggle)

              ("E" . dired-next-dirline)
              (";" . dired-prev-dirline)
              ("A" . dired-up-directory)

              ("C-," . beginning-of-buffer)
              ("C-e" . end-of-buffer)

              ([remap dired-sort-toggle-or-edit] . dirvish-quicksort)
              ([remap dired-do-redisplay] . dirvish-ls-switches-menu)
              ([remap dired-do-copy] . dirvish-yank-menu)

              ("?"   . dirvish-dispatch)
              ("q"   . dirvish-quit)

              ("o" . dired-find-file)
              ("O" . dired-find-file-other-window)

              ("'"   . dirvish-quick-access)
              ("f"   . dirvish-file-info-menu)
              ("x"   . dired-do-delete)
              ("." . dired-create-empty-file)
              (":" . dired-create-directory)
              ("X"   . dired-do-flagged-delete)
              ("c" . dired-do-copy)
              ("y"   . dirvish-yank-menu)
              ("s"   . dirvish-quicksort)

              ("hh" . dirvish-history-jump)
              ("hi" . dirvish-history-go-forward)
              ("ha" . dirvish-history-go-backward)
              ("h." . dirvish-history-last)

              ("TAB" . dirvish-subtree-toggle)
              ("$" . dirvish-layout-toggle)
              ("\\" . dirvish-setup-menu) ;; shift $
              ("g" . revert-buffer)
              ("G"   . dirvish-vc-menu)
              ("n" . dirvish-narrow)
              ;; ("C-e" . dirvish-emerge-menu)

              ("<" . (lambda () (interactive) (dirvish-side-decrease-width 10)))
              (">" . (lambda () (interactive) (dirvish-side-increase-width 10)))
              )
        :config
        (dirvish-peek-mode)
        ;; (dirvish-side-follow-mode)
        ;; makes dirvish-side open on last used window

        ;; not reuse buffers on kill
        (setq dirvish-reuse-session nil)

        (setq dirvish-mode-line-format
              '(:left (sort symlink) :right (omit yank index)))
        (setq dirvish-attributes           ; The order *MATTERS* for some attributes
              '(vc-state subtree-state nerd-icons file-time file-size)
              dirvish-side-attributes
              '(vc-state subtree-state nerd-icons))
        ;; (setq dirvish-mode-line-format '(:left (sort symlink) :right (vc-info yank index)))
               (setq dirvish-header-line-height '(25 . 35))
               (setq dirvish-side-width 80)
               (setq dirvish-header-line-format '(:left (path) :right (vc-info yank)))
        ;;


        ;; mouse
        (setq dired-mouse-drag-files t)                   ; added in Emacs 29
        (setq mouse-drag-and-drop-region-cross-program t) ; added in Emacs 29

        )

#+end_src
** Dirvish quick access files
#+begin_src emacs-lisp
  (setq dirvish-quick-access-entries
     '(("h" "~/"                          "Home")
       ("D" "~/Downloads/"                "Downloads")
       ("d" "~/Documents/"                "Documents")
       ("e" "~/.conf/.emacs.d"      "Emacs")
       ("c" "~/.conf/"      "Config")

       ("w" "~/Documents/work-org/"      "Work Org")
       ("n" "~/Documents/notas/"      "Notes")

       ("g" "~/Documents/github/"  "git repos")

       ("bb" "~/Documents/github/backend/"  "backend")
       ("bm" "~/Documents/github/backend/apps/yap/dbt_project/dbt_models/"  "backend / dbt models")

       ("bc" "~/Documents/github/backend/apps/yap/dbt_project/dbt_models/target/compiled/yousician_models/"  "backed / dbt models / compiled")

       ("bl" "~/Documents/github/YAP-Looker/"  "YAP Looker")

     ))
#+end_src
** Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :diminish projectile-mode
    :hook
    (after-init . projectile-mode)
    ;; :bind-keymap
    ;; ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (setq projectile-project-search-path '("~/Documents/github/backend" "~/Documents/github/YAP-Looker" "~/Documents/org" "~/.emacs.d" ))
    (setq projectile-switch-project-action #'projectile-find-file)
    :custom
    ;;(projectile-completion-system 'ivy)
    ;;(projectile-dynamic-mode-line nil)
    (projectile-enable-caching t)
    (projectile-indexing-method 'hybrid)
    (projectile-track-known-projects-automatically nil))
#+end_src
* Programming languages
** TODO Fly (evaluate)
Flycheck/flymake

https://github.com/konrad1977/flyover
A modern, aesthetic overlay display for Flycheck and Flymake in Emacs. Flyover is a full featured package with tons of features for you to customize.

** Text modes
#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  ;; These extra modes help clean up the Markdown editing experience.
  ;; `visual-line-mode' turns on word wrap and helps editing commands
  ;; work with paragraphs of text. `flyspell-mode' turns on an
  ;; automatic spell checker.
  :hook
    ((markdown-mode . visual-line-mode)
    (markdown-mode . flyspell-mode))
  :init
  (setq markdown-command "multimarkdown"))
#+end_src
** Files markup (json, csv, yaml)
#+begin_src emacs-lisp
    (use-package yaml-mode
      :ensure t
      :config
      ;;;###autoload
      (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
      (add-to-list 'auto-mode-alist '("\\.yaml\\'" . yaml-mode))
      )
#+end_src
** Markdown
#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :mode ("README\\.md\\'" . gfm-mode)            ;; Use GitHub Flavored Markdown for README.md files.
  :init (setq markdown-command "multimarkdown")) ;; Set the Markdown processing command.
#+end_src
** txt
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.txt$" . markdown-mode))
#+end_src
** TODO REPL
** Python
*** References
https://codeberg.org/sczi/swanky-python
A development environment for Python based on emacs' SLIME mode for Common Lisp (52 kB)
*** Config
#+begin_src emacs-lisp
;; pyenv
;; (use-package pyvenv
;;   :ensure t
;;   :init
;;   (setenv "WORKON_HOME" "~/venvs/")
;;   :config
;;   ;; (pyvenv-mode t)
;;
;;   ;; Set correct Python interpreter
;;   (setq pyvenv-post-activate-hooks
;;         (list (lambda ()
;;                 (setq python-shell-interpreter (concat pyvenv-virtual-env "bin/python")))))
;;   (setq pyvenv-post-deactivate-hooks
;;         (list (lambda ()
;;                 (setq python-shell-interpreter "python3")))))
#+end_src
*** Jupyter
***  References
**** Code taken from: https://www.reddit.com/r/emacs/s/Qrbj9C78ts
- Org-mode + Jupyter integration via `ob-jupyter`
- Python LSP support (`pylsp`) inside Org source blocks
- Corfu and Cape for smart autocompletion
- Doom One theme with icons for a clean UI
- Dashboard startup screen with recent files, projects, and agenda
- Snippets support with `yasnippet`
- Git integration with `magit`


- Emacs 28 or higher
- Python 3 installed on your system
- Install pylsp via pip (if on Arch Based prefer pacman):
  > pip install pylsp
- Install Jupyter via pip (if on Arch Based prefer pacman):
  > pip install jupyter

  (use-package lsp-mode
    :hook ((python-mode . lsp)
           (rust-mode   . lsp))
    :commands lsp
    :init
    (setq lsp-completion-provider :none))

- do this
  (use-package lsp-mode
    :hook ((python-mode . lsp)
           (rust-mode   . lsp))
    :commands lsp
    :init
    (setq lsp-completion-provider :none))


(setq org-confirm-babel-evaluate nil)
  ;; Python setup
  (setq python-shell-interpreter "python3")

  ;; LSP setup
  (defvar my/org-src-fake-file "/tmp/org-src-buffer.py")

  (with-eval-after-load 'lsp-mode
    (setq lsp-disabled-clients '(pyls-ms pyright)
          lsp-enabled-clients '(pylsp)
          lsp-auto-guess-root t ; fallback if project detection fails
          lsp-session-file (expand-file-name ".lsp-session-v1" user-emacs-directory))

    ;; Setup LSP for org src temp buffers
    (defun my/org-src--maybe-setup-lsp ()
      (when (and (eq major-mode 'python-mode)
                 (not (bound-and-true-p lsp-mode)))
        ;; Set fixed fake file path to fool LSP
        (setq buffer-file-name my/org-src-fake-file)
        (lsp)))

    (defun my/org-src--cleanup-fake-file-name ()
      (when (equal buffer-file-name my/org-src-fake-file)
        (setq buffer-file-name nil)))

    (add-hook 'org-src-mode-hook #'my/org-src--maybe-setup-lsp)
    (add-hook 'org-src-mode-exit-hook #'my/org-src--cleanup-fake-file-name))
  ;; Jupyter for org-babel
  (add-to-list 'load-path "~/.emacs.d/man_installed/emacs-jupyter")
  (use-package jupyter
    :defer t
    :init
    (with-eval-after-load 'org
      (require 'ob-jupyter)
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((emacs-lisp . t)
         (python . t)
         (jupyter . t))))
    :config
    (setq org-babel-default-header-args:jupyter-python
          '((:session . "py")
            (:kernel . "python3")
            (:exports . "both")
            (:results . "output"))))

  (defun my/org-safe-jupyter-wrapper (orig-fn &rest args)
    "Only call jupyter-org functions if in Org mode."
    (if (derived-mode-p 'org-mode)
        (apply orig-fn args)
      ;; Otherwise do nothing (avoids crash in *Help*)
      nil))

  (with-eval-after-load 'jupyter
    (advice-add 'jupyter-org--with-src-block-client :around #'my/org-safe-jupyter-wrapper))

**** Some tips on having it to data science
comment from here: https://www.reddit.com/r/emacs/s/Qrbj9C78ts

I was thinking the same thing TBH. I do data science work in org and I mix and match SQL, Python, R, Clojure, and elisp code chunks and they work seamlessly. If I want to persist state between chunks in the same language I use :session, and if I want to pass data across languages I just save it in one chunk and load it in another.

My latest favorite trick is to turn my data visualizations into Vega-Lite json output, wrap it in an html div and output the result as html. Then when I export the org file to html, I get a fully functioning notebook with interactive visualizations (click/drag/hover). Being able to cache compute-intensive steps with the :cache keyword in the header is another big benefit.

Org is the best notebook in any language, and it's in every language.

** Lua
#+begin_src emacs-lisp
;; (use-package lua-mode :ensure t)
#+end_src
** Lsp / treesitter
#+begin_src emacs-lisp
  ;; TODO lsp ui
  ;; https://emacs-lsp.github.io/lsp-ui/
  ;; https://github.com/daviwil/emacs-from-scratch/blob/master/Emacs.org
  ;; company-lsp https://github.com/tigersoldier/company-lsp


;;   (use-package lsp-mode
;;     :init
;;     (setq lsp-keymap-prefix "C-c l")
;;     :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
;;            (python-mode . lsp)
;;            ;; if you want which-key integration
;;            (lsp-mode . lsp-enable-which-key-integration))
;;     :commands lsp
;;     :config
;;         (setq lsp-headerline-breadcrumb-enable nil)
;;         ;; makes it so that when jumping to definition, it drops a mark to be able to jump back
;;         (advice-add 'lsp-find-definition
;;                 :before
;;                     (lambda (&rest _)
;;                       (push-mark)))
;;     )
;;
;;   ;; optionally
;;   (use-package lsp-ui :commands lsp-ui-mode)
;;
;;   (add-hook 'python-mode-hook 'lsp-deferred)
#+end_src

** Debug

#+begin_src emacs-lisp
  ;; (use-package dap-mode
  ;;   :after lsp-mode
  ;;   :commands dap-debug
  ;;   :hook ((python-mode . dap-ui-mode)
  ;;          (python-mode . dap-mode))
  ;;   :config
  ;;     (eval-when-compile
  ;;         (require 'cl))
  ;;     (require 'dap-python)
  ;;     (require 'dap-lldb)
  ;;     (require 'with-venv)

  ;;     ;; Temporal fix
  ;;     (defun dap-python--pyenv-executable-find (command)
  ;;         (with-venv (executable-find "python")))
  ;;   )
#+end_src
** TODO SQL
*** References
https://github.com/FilipCon/dotemacs/blob/master/config/sql.el
indent
https://github.com/alex-hhh/emacs-sql-indent/blob/master/sql-indent.org

function sql to org table here
https://joshblais.com/posts/my-literate-doom-emacs-config/
*** ejc-sql
#+begin_src emacs-lisp
  ;;   (use-package ejc-sql
  ;;     :config
  ;;     (setq clomacs-httpd-default-port 8090) ; Use a port other than 8080.
  ;;     ;; (setq ejc-jvm-opts '("-Dnet.snowflake.jdbc.disableKeychain=true"))
  ;;     (ejc-create-connection
  ;;  "snowflake"
  ;;  :dependencies [[net.snowflake/snowflake-jdbc "3.13.27"]
  ;;                 [net.java.dev.jna/jna "5.13.0"]]
  ;;  :connection-uri (concat "jdbc:snowflake://yo31856.eu-west-1.snowflakecomputing.com:443"
  ;;                          "?user=darchan.ordovas@yousician.com"
  ;;                          "&warehouse=dbt_local"
  ;;                          "&role=ANALYST"
  ;;                          "&db=prod_db"
  ;;                          "&authenticator=externalbrowser"
  ;;                          "&JDBC_QUERY_RESULT_FORMAT=JSON"
  ;;                          "&CREDENTIAL_STORE_LOCATION=NONE"
  ;;                          )))



  ;; ;; (defun ejc/org-babel-execute-snowflake (body params)
  ;;   "Evaluate BODY as Snowflake SQL in a dedicated `ejc-sql' buffer synchronously;
  ;; return the results as an org-table."
  ;;   (let* ((conn-name "snowflake")
  ;;          (buffer-name "*ejc-sql-snowflake-org*")
  ;;          result-lines)
  ;;     ;; Ensure we have a buffer linked to the Snowflake connection.
  ;;     (unless (get-buffer buffer-name)
  ;;       (let ((buf (ejc-get-temp-editor-buffer "snowflake-org")))
  ;;         (with-current-buffer buf
  ;;           (ejc-connect conn-name))
  ;;         (with-current-buffer buf
  ;;           (rename-buffer buffer-name))))
  ;;     (with-current-buffer buffer-name
  ;;       ;; Insert SQL and run synchronously
  ;;       (erase-buffer)
  ;;       (insert body)
  ;;       (goto-char (point-min))
  ;;       ;; Use synchronous evaluation to block until result is ready
  ;;       (ejc-eval-user-sql (buffer-string)
  ;;                          :sync t
  ;;                          :display-result nil)
  ;;       ;; Wait for output file
  ;;       (let ((outputfile ejc-result-file-path)
  ;;             (tries 20)
  ;;             (wait 0.2)
  ;;             out "")
  ;;         (while (and (not (and outputfile (file-exists-p outputfile)))
  ;;                     (> tries 0))
  ;;           (sleep-for wait)
  ;;           (setq tries (1- tries)))
  ;;         (if (and outputfile (file-exists-p outputfile))
  ;;             (with-temp-buffer
  ;;               (insert-file-contents outputfile)
  ;;               (setq out (buffer-string)))
  ;;           (user-error "ejc-sql output did not appear"))
  ;;         ;; Parse result into an org-table (assume orgtbl-mode output)
  ;;         (setq result-lines
  ;;               (->> (split-string out "\n" t)
  ;;                    (remove-if (lambda (l) (string-match-p "\\`\\s-*\\'" l)))
  ;;                    (mapcar (lambda (line)
  ;;                              (when (string-match-p "|" line)
  ;;                                (->> (split-string (substring line 1 -1) "|")
  ;;                                     (mapcar #'string-trim)))))))
  ;;         ;; Filter out nils and empty rows
  ;;         (setq result-lines (cl-remove-if-not #'identity result-lines))))
  ;;     ;; Return as org-table
  ;;     (or result-lines (list (list "No result")))))

  ;; ;; Register override for org-babel execute:sql in org-mode
  ;; (defun ejc/org-babel-execute:sql-advice (orig-fun body params)
  ;;   (let ((conn (cdr (assoc :connection params))))
  ;;     (if (and conn (string= conn "snowflake"))
  ;;         (ejc/org-babel-execute-snowflake body params)
  ;;       (funcall orig-fun body params))))
  ;; (advice-add 'org-babel-execute:sql :around #'ejc/org-babel-execute:sql-advice)

#+end_src
** TOML
#+begin_src emacs-lisp
  (use-package toml-mode
    :ensure t
    :config
    (require 'toml-mode)
    )
#+end_src
** LookML
#+begin_src emacs-lisp
;; (defvar lookml-mode-syntax-table
;;   (let ((st (make-syntax-table)))
;;     (modify-syntax-entry ?# "<" st)     ; # starts a comment
;;     (modify-syntax-entry ?\n ">" st)    ; Newline ends a comment
;;     st)
;;   "Syntax table for `lookml-mode'.")
;;
;; (defvar lookml-font-lock-keywords
;;   (let* (
;;        ;; Basic keywords and constructs of LookML
;;        (keywords '("view" "sql" "measure" "dimension" "dimension_group" "sql_table_name"
;;           "type" "from" "select" "where" "as" "description" "hidden"
;;           "partition" "order" "by" "with" "over"
;;           "drill_fields" "fields" "set" "derived_table" "label" "group_label"
;;           "timeframes" "convert_tz" "datatype" "value_format_name" "join"
;;           "relationship" "sql_on"
;;           "group"))
;;        ;; Only match full symbol names followed by colon
;;        (keyword-regexp (concat "\\_<" (regexp-opt keywords t) "\\_>\\s-*:\\s-*")))
;;   `(
;;     (,keyword-regexp . font-lock-keyword-face)
;;     ("\\<\\(true\\|false\\|yes\\|no\\)\\>" . font-lock-constant-face)
;;     ("\\<[a-zA-Z_][a-zA-Z0-9_]*:" 0 font-lock-variable-name-face) ;; field: and block:
;;     ("${[^}]+}" . font-lock-variable-name-face)                  ;; ${TABLE}, etc
;;     (";;" . font-lock-comment-delimiter-face)                    ;; double-semicolon
;;    ))
;;   "Highlighting expressions for LookML mode")
;;
;; ;;;###autoload
;; (define-derived-mode lookml-mode prog-mode "LookML"
;;   "Major mode for editing LookML data modeling language files."
;;   :syntax-table lookml-mode-syntax-table
;;   (setq-local font-lock-defaults '(lookml-font-lock-keywords))
;;   (setq-local comment-start "# ")
;;   (setq-local comment-end ""))
;;
;; ;;;###autoload
;; (add-to-list 'auto-mode-alist '("\\.lkml\\'" . lookml-mode))
;; ;;;###autoload
;; (add-to-list 'auto-mode-alist '("\\.view\\'" . lookml-mode))
#+end_src
** Kbd
#+begin_src emacs-lisp
;;  (use-package kbd-mode
;;    :vc (:fetcher github :repo kmonad/kbd-mode)
;;    :config
;;    (require 'kbd-mode)
;;    )
#+end_src
* Org
** References
Worg https://orgmode.org/worg/
*** Syntax:

- https://orgmode.org/quickstart.html
*** Agenda
https://doc.norang.ca/org-mode.html
*** Tools:
- https://orgmode.org/tools.html
- https://orgmode.org/worg/org-tools/index.html
- Org-transclusion
- Org-ref
- Org-noter - for pdf/epub syncing with a org file, and 'writing in it'
- https://github.com/gavv/om-dash - om-dash implements dynamic blocks for org-mode that you can use to compose a custom project dashboard.
- Treemap visualisation (like a sheet of paper with squares within squares) https://sachachua.com/blog/2025/01/treemap-visualization-of-an-org-mode-file/
*** Configs to inspire:
- https://wohanley.com/posts/org-setup/
Some interesting stuff on org-roam, citations and references metadata
- https://github.com/cadadr/configuration/blob/3e11ef25344188cc55b16f314c3c5358ace8a266/emacs.d/init.el#L4625
Some functions to open agenda in a sole buffer, or two buffers, one with TODOs, other agenda.
https://tecosaur.github.io/emacs-config/
- https://github.com/purcell/emacs.d/blob/master/lisp/init-org.el
Lots and lots of settings

Some UI
- https://codeberg.org/mester/NyxEmacs/src/branch/master/modules/nyx-org.el

Org writemode UI and some interesting refiles
https://github.com/purcell/emacs.d/blob/master/lisp/init-org.el
**** TODO follow this guide to make org mode look nice
https://zzamboni.org/post/beautifying-org-mode-in-emacs/

*** Evalply blog with refs
https://www.evalapply.org/posts/why-and-how-i-use-org-mode/index.html


https://orgmode.org/worg/exporters/beamer/tutorial.html">orgmode.org</a> is the canonical reference manual.
https://orgmode.org/worg/exporters/beamer/tutorial.html">Worg</a> is full of gold (tips, tricks, tutorials, hacks).


- Document: norang's epic http://doc.norang.ca/org-mode.html life in orgmode pageDocument: EH Neilsen's https://web.archive.org/web/20210122070120/http://ehneilsen.net/notebook/orgExamples/org-examples.html Emacs org-mode examples and cookbook https://www.evalapply.org/posts/why-and-how-i-use-org-mode/index.html#fn5  that shows how to make org into a full-bore computing environment.
- Demo: Carsten Dominic's timeless presentation "https://www.youtube.com/watch?v=oJTwQvgfgMM Emacs Org-mode - a system for note-taking and project planning"
- Demo: Youtuber Rainer Konig has published a fantastic series of short, clear tutorials of the many https://www.youtube.com/playlist?list=PLVtKhBrRV_ZkPnBtt_TD1Cs9PJlU0IIdE things one can do with Org.
- Demo: https://www.youtube.com/watch?v=FtieBc3KptU Emacs For Writers by Jay Dixit, a widely-published science writer who is a non-programmer.
- Demo: https://www.youtube.com/watch?v=SzA2YODtgK4 Getting Started With Org Mode, for nerds of all feather.
- Demo: https://www.youtube.com/watch?v=0g9BcZvQbXU Consistent Technical Documents Using Emacs and Org Mode
- Demo: How m'colleague https://twitter.com/suvratapte Suvrat uses Emacs org-mode's "Org Capture" feature https://www.youtube.com/watch?v=tFt6plDQm58 to stay in flow while programming.
- Demo: How m'colleague https://www.youtube.com/watch?v=KZoQ4EkfDPo Vedang uses Emacs org-mode to run his whole life, as a team lead, project manager, and fallible human.
*** Org links to other headers
M-x org-store-link and insert it M-x org-insert-last-stored-link
** Config
#+begin_src emacs-lisp
  ;; When a TODO is set to a done state, record a timestamp
  (setq org-log-done nil)

  ;; Follow the links
  (setq org-return-follows-link  t)

  ;; Associate all org files with org mode
  (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))


;; always displays inline images
(setq org-startup-with-inline-images t)
  ;; Remap the change priority keys to use the UP or DOWN key
  ;; (define-key org-mode-map (kbd "C-c <up>") 'org-priority-up)
  ;; (define-key org-mode-map (kbd "C-c <down>") 'org-priority-down)


  ;; When you want to change the level of an org item, use SMR
  ;; (define-key org-mode-map (kbd "C-c C-g C-r") 'org-shiftmetaright)


  ;; TODO check this
  ;; (setq org-directory (expand-file-name "org" (xdg-data-home)) ; Let's put files here.
  ;;       org-agenda-files (list org-directory)                  ; Seems like the obvious place.
  ;;       org-use-property-inheritance t                         ; It's convenient to have properties inherited.
  ;;       org-log-done 'time                                     ; Having the time a item is done sounds convenient.
  ;;       org-list-allow-alphabetical t                          ; Have a. A. a) A) list bullets.
  ;;       org-catch-invisible-edits 'smart                       ; Try not to accidently do weird stuff in invisible regions.
  ;;       org-export-with-sub-superscripts '{}                   ; Don't treat lone _ / ^ as sub/superscripts, require _{} / ^{}.
  ;;       org-export-allow-bind-keywords t                       ; Bind keywords can be handy
  ;;       org-image-actual-width '(0.9))                         ; Make the in-buffer display closer to the exported result..

#+end_src
** UI
#+begin_src emacs-lisp

    ;; Make the indentation look nicer
    ;; (add-hook 'org-mode-hook 'org-indent-mode)
    (setq org-startup-indented t)
    ;; makes text scale nice
    (add-hook 'org-mode-hook 'text-scale-mode)

    ;; Hide the markers so you just see bold text as BOLD-TEXT and not *BOLD-TEXT*
    (setq org-hide-emphasis-markers t)

    ;; Wrap the lines in org mode so that things are easier to read
    (add-hook 'org-mode-hook 'visual-line-mode)
      ;; Ensure that anything that should be fixed-pitch in Org files appears that way
      ;; (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
      ;; (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
      ;; (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
      ;; (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
      ;; (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
      ;; (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
      ;; (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
      ;; (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
      ;; (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
      ;; (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
      ;; (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch)

      ;; org modern
      (use-package org-modern
          :config
              (with-eval-after-load 'org (global-org-modern-mode))
              (setq org-modern-star 'replace) ;; 'replace or 'fold
              (setq org-modern-replace-stars "◉○◈◆◇◇◇◇")
              ;; large
              ;; ♥ ● ◇ ✚ ✜ ☯ ◆ ♠ ♣ ♦ ☢ ❀ ◆ ◖ ▶
              ;;; Small
              ;; ► • ★ ▸
              ;; List of bullet replacement strings. Set to nil to disable styling list bullets.
              (setq org-modern-list
                    '((?+ . "✚")
                      (?- . "•")
                      (?* . "★")))
      )

      ;; (use-package org-modern-indent
      ;;   :vc (:fetcher github :repo "jdtsmith/org-modern-indent")
      ;;   :config ; add late to hook
      ;;   (add-hook 'org-mode-hook 'org-modern-indent-mode)
      ;;   )

      ;;Then, we set up a font-lock substitution for list markers
      ;; (font-lock-add-keywords 'org-mode
      ;;                           '(("^ *\\([-]\\) "
      ;;                              (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
      ;; The org-bullets package replaces all headline markers with different Unicode bullets:

      ;; ;; customise bullets in org-mode
      (use-package org-bullets
          :config
          (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))


#+end_src
** States TODO
#+begin_src emacs-lisp
;; TODO states
(setq org-todo-keywords
      '((sequence "TODO(t)" "PLAN(p)" "NEXT(n)" "PROJ(j)" "PROG(i)" "HOLD(h@/!)" "REVI(r)" "|" "DONE(d!)" "WONT(w@/!)" )
        ))

;; TODO colors
(setq org-todo-keyword-faces
      '(
        ("TODO" . (:foreground "DarkOrange" :weight bold))
        ("PLAN" . (:foreground "DeepPink" :weight bold))
        ("NEXT" . (:foreground "Yellow" :weight bold))
        ("PROJ" . (:foreground "Yellow" :weight bold))
        ("PROG" . (:foreground "Blue" :weight bold))
        ("HOLD" . (:foreground "Red" :weight bold))
        ("REVI" . (:foreground "Violet" :weight bold))
        ("DONE" . (:foreground "LimeGreen" :weight bold))
        ("WONT" . (:foreground "Gray" :weight bold))
        ))
#+end_src
** Capture Templates
https://tecosaur.github.io/emacs-config/#capture
#+begin_src emacs-lisp
        (setq org-capture-templates
              '(

              ("a" "Agenda"
                    entry (file "~/Documents/work-org/agenda-work.org")
                    "* TODO %?\n:Created: %T\n"
                    :empty-lines 0)

                ("j" "Journal Log Entry"
                 entry (file+datetree "~/Documents/work-org/journal.org")
                 "* %?"
                 :empty-lines 0)

                ("n" "Note"
                 entry (file "~/Documents/work-org/notes.org")
                 "* %?\n:Created: %T\n"
                 :empty-lines 0)

                ("d" "To-Do"
                    entry (file "~/Documents/work-org/todos.org")
                    "* TODO %?\n:Created: %T\n"
                    :empty-lines 0)

                ("w" "Work Task"
                    entry (file+headline "~/Documents/work-org/work-tasks.org" "Tasks")
                    "** TODO %?\n:Created: %T\n"
                    :empty-lines 0)

                ("m" "Meeting"
                 entry (file+datetree "~/Documents/work-org/meetings.org")
                 "* %? :meeting:%^g \n:Created: %T\n** Attendees\n*** \n** Notes\n** Action Items\n*** TODO "
                 :tree-type week
                 :empty-lines 0)
            )
        )
#+end_src
** Org-appear (toggle hidden elements text)
https://github.com/awth13/org-appear
#+begin_src emacs-lisp
  (use-package org-appear
    :vc (:fetcher github :repo "awth13/org-appear")
    :config
    (add-hook 'org-mode-hook 'org-appear-mode)
    (setq
     org-appear-autolinks t)
    )
#+end_src
** TODO Tags
#+begin_src emacs-lisp
;; Tags
(setq org-tag-alist '(
                      ;; Ticket types
                      (:startgroup . nil)
                      ("@bug" . ?b)
                      ("@feature" . ?u)
                      ("@spike" . ?j)
                      (:endgroup . nil)

                      ;; Ticket flags
                      ("@write_future_ticket" . ?w)
                      ("@emergency" . ?e)
                      ("@research" . ?r)

                      ;; Meeting types
                      (:startgroup . nil)
                      ("big_sprint_review" . ?i)
                      ("cents_sprint_retro" . ?n)
                      ("dsu" . ?d)
                      ("grooming" . ?g)
                      ("sprint_retro" . ?s)
                      (:endgroup . nil)

                      ;; Code TODOs tags
                      ("QA" . ?q)
                      ("backend" . ?k)
                      ("broken_code" . ?c)
                      ("frontend" . ?f)

                      ;; Special tags
                      ("CRITICAL" . ?x)
                      ("obstacle" . ?o)

                      ;; Meeting tags
                      ("HR" . ?h)
                      ("general" . ?l)
                      ("meeting" . ?m)
                      ("misc" . ?z)
                      ("planning" . ?p)

                      ;; Work Log Tags
                      ("accomplishment" . ?a)
                      ))
#+end_src

** org-side-tree
Sidetree
https://github.com/Townk/org-ol-tree/tree/main
https://github.com/localauthor/org-side-tree
#+begin_src emacs-lisp
  (use-package org-side-tree
    :ensure t
    :config
    (require 'org-side-tree)
    ;; there's a bug, this solves it
    (setq org-side-tree-add-overlays nil)
    :bind ( :map org-side-tree-mode-map

            ("," . org-side-tree-previous-heading)
            ("e" . org-side-tree-next-heading)

            )
    )
  ;; (use-package org-ol-tree
  ;;   :vc
  ;;   (:fetcher github :repo townk/org-ol-tree)
  ;;   )
#+end_src
** Org Templates
#+begin_src emacs-lisp

    (require 'org-tempo)

    ;; (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    ;; (add-to-list 'org-structure-template-alist '("e" . "src emacs-lisp"))
    ;; (add-to-list 'org-structure-template-alist '("py" . "src python"))

   (setq org-structure-template-alist
     '(("py" . "src python") ("e" . "src emacs-lisp") ("sh" . "src shell")
       ("a" . "export ascii") ("c" . "center") ("C" . "comment")
       ("E" . "export") ("h" . "export html")
       ("l" . "export latex") ("q" . "quote") ("s" . "src")
       ("v" . "verse"))
         )
#+end_src
** Org screenshot
#+begin_src emacs-lisp
    ;; (use-package org-attach-screenshot
    ;;   :config
    ;;     (require 'org-attach-screenshot)
    ;;   )
  (use-package org-ros
    )

#+end_src
** Org presentation outils
https://github.com/takaxp/org-tree-slide
https://github.com/rlister/org-present/tree/master
** Org Roam
*** References (also Zettelkasten)
bibtex for citations
- https://honnef.co/articles/my-org-roam-workflows-for-taking-notes-and-writing-articles/
citar system for citations
- https://github.com/org-roam/org-roam/wiki/User-contributed-Tricks
user tricks for org-roam
- https://www.reddit.com/r/emacs/comments/x1ura2/searching_orgroam_notes_with_property_information/
How to add properties in the node search
- https://gist.github.com/nickanderson/00005b5b03e323a65ada98c5fa5ebb11
User workflow

Workflow with org-roam-bibtex and org-noter
https://www.youtube.com/watch?v=dJ859kiFRLg
https://blog.jethro.dev/posts/how_to_take_smart_notes_org/
Emacs bundle for writers: https://github.com/pprevos/emacs-writing-studio
**** Numbering packages
https://github.com/yibie/org-luhmann
https://github.com/yibie/org-numbering
**** Anotating citations
***** Suggestions 1
https://www.reddit.com/r/emacs/comments/11xm2s9/orgroam_zotero_and_orgnoter_workflow_for/

Similar to other answers, I use Zotero and keep an updated bib file using Better BibTeX. From Emacs, I access the bib file using helm-bibtex which makes it easy to add citations when writing LaTeX and to access the PDF or the reference, etc (not the notes, though ---see below), from other contexts (say, writing emails).

In the computer I read/annotate pdfs using pdf-tools; I tend to also do a fair amount of pdf reading in an Android tablet, and I use apps that make the annotations part of the pdf. (I think this is outside the scope of your question, but I keep the complete, > 10 GB, directory of pdf files synced between tablet and computers using syncthing). That annotations be always part of the pdf, by default and without additional action, is crucial for me, so that I can read/modify them anywhere (and this is the reason why I do not use the otherwise fantastic built-in Zotero pdf reader).

Periodically, I go through the pdfs I've read (I have a collection in Zotero for the stuff I am in the process of reading) and I use org-noter-pdftools (see https://github.com/fuxialexander/org-pdftools ; this is different from, and extends and depends on, org-noter which, by the way, has recently got new maintainers) to extract all annotations in the pdf to a note that is associated to each pdf. One to one mapping here: one pdf file - one .org file for notes. These notes are basically just org(-roam) files that store the annotations for easy searching (see below) and to allow my linking to specific, individual, highlights (or text annotations). I think that initially setting everything up to my satisfaction was a little bit confusing (e.g., the names of some functions I think are the same between org-noter and org-noter-pdftools and sometimes it was unclear to me the differences in functionality between the two packages); but now it works flawlessly. From org-noter-pdftools I specially like how easy it is to get all the highlights, text annotations, etc (not manual scribbling, of course, and see also below for "typewritter" annotations) into an org-roam note that links directly to the exact location in the pdf.

(Alternatively, we could use Zotero and extract annotations, and then search from them from Zotero, but that would not be as seamless for me; so I don't do this.)

Side comment about different types of annotations in the pdf: what are sometimes called typewritter annotations (or "Insert text" in Okular) are generally not (or were not, last time I checked) extracted by the usual pdf annotation extractors (because of what these annotations really are), whether you are using Zotero or org-noter-pdftools or pdf-tools, or other tools. If you want to consistently be able to extract annotations, it is safer to add them as annotations to a highlight (these will be extracted) and make sure to test that whatever annotation types you use are extracted realiably by the rest of the software you use.

I also use org-roam for notes (for references and for any other note-talking, work-related or otherwise). Of course, from any org-roam file I can link to the pdf (e.g., directly, via a file link to the path of the pdf file in the zotero storage directory) and to the notes (the whole file, or individual notes) created with org-noter-pdftools: since org-noter-pdftools gives a unique ID to each extracted annotation, I can directly link individual annotations from other org files. In fact, the notes for the pdfs are in a subdirectory of my org-roam directory and are indexed by org-roam.


-------


Here's my workflow (config to follow) that you might be able to adapt:

I read everything on my iPad inside the Zotero app—all my highlights live in Zotero.

I have the Better BibTeX plugin in Zotero installed, which keeps ~/Research/refs.bib up-to-date with my entire Zotero library.

I use Citar (along with the Vertico+Marginalia+Orderless stack) to insert/manage inserting citations and citar-org-roam to take longer-form notes on papers with org-roam.

(Working on gathering config; update pending)

UPDATE: Sample config here: https://git.sr.ht/~ashton314/emacs-bedrock/tree/main/item/mixins/researcher.el (warning: it's a work-in-progress; the wikis usually have good setup tips)

***** Suggestions 2
I remember a similar question last autumn, but it was deleted. The comments there remain useful though. I wrote a more detailed round-up of the PDF notes tools. See https://www.reddit.com/r/emacs/comments/1fwza6h/comment/lqkupn1/
> Managing and curating a list of pdfs, epubs and other ebooks and sites along with their respective tags and categories.
I'd use BibTex for this. The built-in `org-cite` package is good for formal references.
The `citar` package is also useful. It provides a nice set of tools for browsing your references, and quickly jumping to the PDF and/or note file.
> Reading and annotating all those ebooks and saving and managing all those annotations and notes.
Emacs has a built-in `docview` package to read PDF and other formats. You could also try the `pdf-tools` package.
For Epub, use the `nov.el` package.
Try `org-noter` or `org-remark` packages for annotations linked to specific parts (paragraphs) of the ebooks. They both do roughly the same thing.
> Creating notes and handwritten digital notes and linking different ideas/notes in a sort of digital canvas drawing system (something like excalidraw in obsidian).
There are some diagram tools for Org-mode, including... `org-excalidraw`! The `org-krita` and `org-xournalpp` packages might be of interest too.
> Linking all these things(notes, ebooks, digital notes, journals, paper notes) through tags and bi-directional links with tools to search and filter efficiently.
You can do most of this with a plain-old Org file, keeping everything in a giant outline. The missing part is the bi-directional links, for which see the `org-super-links` package.
If the idea of a single giant outline doesn't appeal, you can also keep a folder full of little files. Look at the `org-roam`, `denote`, or `zk` packages.
To see how these can all join up together, the [Emacs Writing Studio](https://lucidmanager.org/tags/emacs/) articles are a good source of ideas.

----

https://www.reddit.com/r/emacs/comments/1fwza6h/comment/lqkupn1/ gives:


Others have pointed the way to Org-mode, which provides super-duper tools for hierarchical noting.

"Storing PDF files, texts, etc" hasn't been addressed in detail so far, so here are some tips:

    The DocView package is built-in to Emacs. It works by turning a PDF into images (via ghostscript), and displaying those. Personally I find it a bit awkward.

    The PDF tools package offers integration with many standard Emacs features: Isearch, Imenu, Occur, and more. This is much more to my liking, but installation is more complex than DocView.

    Org-mode links can point at specific pages in a PDF file:

        [[docview:example.pdf::123][See page 123]]

        [[pdf:example.pdf::123][See page 123]] using org-pdftools

    Org-mode links can point at specific lines in a text file:

        [[file:example.md::123][See line 123]]

    The org-attach package (built-in to Emacs) is a handy alternative to links.

        Files are attached to a Org headlines, and can be referenced with virtual links: [[attachment:example.pdf]].

        Be sure to read the manual (and options), especially to know "Where are my attachments actually stored?".

    The nov.el package reads EPUB files. It integrates with Org links, and Imenu.

    If you want to take notes by annotating passages of your PDF files, try the org-noter or org-remark packages.

    There are a TON of other wonderful packages to enhance the Org and PDF lifestyle and workflows. It's worth taking time to browse them on MELPA.

        ZOMG I've just discovered pdfgrep, which looks awesome. I shall try it soon.

    There are also a good selection of bibliography and citation related packages for Emacs. See org-cite (built-in to org-mode) and citar in particular.

**** Zettelkasten
- https://rgoswami.me/posts/org-note-workflow/#zotero <----
- https://github.com/Vidianos-Giannitsis/Dotfiles/blob/master/emacs/.emacs.d/libs/zettelkasten.org <----
- https://lucidmanager.org/productivity/taking-notes-with-emacs-org-mode-and-org-roam/
Templates
- https://github.com/groepl/Obsidian-Templates/tree/main/Templates
***** Zettelkasten 45m workout
45m preparation before starting
https://forum.zettelkasten.de/discussion/3239/45-min-zettelkasten-workout
***** Usage of org-roam
Do not take it as polemics, org-roam is the best note tools I know in Emacs and in general in the present "sw world" (so, MANY thanks), but seeing it's start and evolution I suspect there is a bit of "mirror effect", for instance in the v1 only titles was used to select notes via `org-roam-find-file` witch makes essentially org-mode notes useless, since the most powerful basic feature of org-mode is being an effective outliner, the v2 correct the aim using headings instead. Perhaps a v3 will allow queries (free text as now + search operators for instance) :-)

Most modern tools are still tied to files and folders because existing computer systems was born in the paper + filing cabinet era so their designer choose to copy such way of organizing physical storage in a virtual environment, unfortunately these days where many do not even know the existence of filing cabinet and suspended folders still reason in "file and folder" terms. An so are notes "software", instead of reasoning about the concept most people reason about some actual implementation of that and how that implementation can be improved.

To make it short, IMVHO org-roam try to implement a "today trending concept" very well, improving it respect of other note tools, but without thinking about it's real power and meaning. Notes as bits of information means that the human instead of read, for instance, a history book, so someone else pre-digested and distilled knowledge, start exploring historical contents like *also* books, but also newspapers, statistical data etc, and elicit his/shes own personal history from them like "hey, there was a war between empire A and empire B, information read from a book, let's start exploring possible reasons behind it from a big set of sources".

That means:

 - trying not to being tied to files and folder concepts, storage should be something "under the wood", instead of making easy to create files/adding headings to them;

 - being able to query notes, org-mode do have org-ql, it's not that comfortable to use compared for instance to notmuch/mu4e for emails, but does work, SPARQL is another popular non-Emacs and not really comfy query language and there are countless others but still something to go beyond the mere "note + links + access via search&narrow then follow links/backlinks" and making it as easy as possible;

 - being able to *compose* information, like transclusion, org-transclusion is a nice example, though TiddlyWiki have a IMO superior concept, instead of create countless headings and interlink them;

 - being able to intermix metadata and information, like using drawers to store certain meta-information for future queries and free text for the rest.

Perhaps those happen in the future because a step at a time became clear they are nice to have, but IMO focusing on the concept more than on actual implementation can make things happen faster and avoid code re-write, changes for users in their notes (both very time consuming tasks)...

Org-roam biggest success is IMO not much the ease of interlink org-mode text but the access UI (org-roam-node-find/Ivy): all others pre-existing tools are even more tied to files concept, org-roam makes access more "search&narrow", so more immediate, in a "I do not care about on-disk storage" manner :D

***** Some methods
My point is: most people rightly call notes "bits of information", but fail to understand what that means. Most tend to think that such bits need to be organized like some famous system like the ZK, PARA, LYT etc and again fails to understand why: such systems do exists for a reason, they adapt a concept, working with bits of information, to the available tools of the day (the possible implementations of the concept). In the past small sheets of papers and drawers was the simplest and cheap tools that's why from ~1545 (Conrad Gessner "libraries of Babel" system) to Leibniz "Scrinium Literatum" (~1673-94), Paul Otlet/Henry La Fontaine "Mundaneum" (~1930-40) and Niklas Luhmann ZK all choose "the zettel+kasten concept", new methods like LYT use links in the modern sense since they are a common concept of a common modern tool: the personal computer
*** Config
#+begin_src emacs-lisp


  (use-package org-roam
      :ensure t
      :init
      (setq org-roam-v2-ack t)
      :custom
      (org-roam-directory "~/Documents/notas/")
      :config
      (org-roam-setup)

      ;; TODO for this to work it needs a lot of Doom magic
      ;; Normally, the org-roam buffer doesn't open until you explicitly call
      ;; `org-roam'. If `+org-roam-open-buffer-on-find-file' is non-nil, the
      ;; org-roam buffer will be opened for you when you use `org-roam-find-file'
      ;; (but not `find-file', to limit the scope of this behavior).
      ;; (add-hook 'find-file-hook
      ;;           (defun +org-roam-open-buffer-maybe-h ()
      ;;             (and +org-roam-open-buffer-on-find-file
      ;;                  (memq 'org-roam-buffer--update-maybe post-command-hook)
      ;;                  (not (window-parameter nil 'window-side)) ; don't proc for popups
      ;;                  (not (eq 'visible (org-roam-buffer--visibility)))
      ;;                  (with-current-buffer (window-buffer)
      ;;                    (org-roam-buffer--get-create)))))

      ;; ;; Hide the mode line in the org-roam buffer, since it serves no purpose. This
      ;; makes it easier to distinguish among other org buffers.
      ;; (add-hook 'org-roam-buffer-prepare-hook #'hide-mode-line-mode)
      ;; (add-hook 'org-roam-buffer-prepare-hook #'visual-line-mode)
      (add-hook 'org-roam-mode-hook #'hide-mode-line-mode)
      (add-hook 'org-roam-mode-hook #'visual-line-mode)

      (setf org-roam-mode-sections '(
                               org-roam-backlinks-section
                               org-roam-reflinks-section
                               orb-section-reference
                               ;; orb-section-abstract
                               orb-section-file))
      )



  ;; this allows to search nodes with tag as well
  ;; taken from https://www.reddit.com/r/emacs/comments/1ghwdp7/how_to_search_by_tags_in_the_orgmode_or_orgroam/
      (setq org-roam-node-display-template
            (concat "${title:*} "
                    (propertize "${tags:10}" 'face 'org-tag)))
#+end_src
***  slug titles (remove accents and special characters)
#+begin_src emacs-lisp
  (defun my/unicode-normalize-NFD (s)
    (if (fboundp 'ucs-normalize-NFD-string)
        (ucs-normalize-NFD-string s)
      s))

   (defun my/org-roam-slugify (title)
     "Convert TITLE to a safe slug. Removes accents, special chars."
     (let* ((down (downcase title))
            (nfd (my/unicode-normalize-NFD down))
            ;; Remove diacritics:
            (no-diacritics (replace-regexp-in-string "\\p{Mn}" "" nfd))
            ;; Replace whitespace with underscores
            (ws (replace-regexp-in-string "[[:space:]]+" "_" no-diacritics))
            ;; Delete all non-[a-z0-9_-]
            (safe (replace-regexp-in-string "[^a-z0-9_-]" "" ws)))
       safe))

  (setq org-roam-title-to-slug-function #'my/org-roam-slugify)
#+end_src
*** Capture Templates
#+begin_src emacs-lisp

      ;; ;; making author a roam custom property
      ;; (cl-defmethod org-roam-node-author ((node org-roam-node))
      ;;   (let ((author (cdr (assoc-string "AUTHOR" (org-roam-node-properties node)))))
      ;;     (if author author
      ;;       (when org-roam-capture--node ; non-nil only during org-roam-capture
      ;;         (setq author (read-string "Autor: "))
      ;;         (push (cons "AUTHOR" author) (org-roam-node-properties node)))
      ;;       author)))

      ;; ;; making author-sluged a roam custor property
      ;; (cl-defmethod org-roam-node-author-slug ((node org-roam-node))
      ;;   (let ((author (org-roam-node-author node)))
      ;;     (when author
      ;;       (my/org-roam-slugify author))))

      ;; ;; making year a roam custom property
      ;; (cl-defmethod org-roam-node-year ((node org-roam-node))
      ;;   (let ((year (cdr (assoc-string "YEAR" (org-roam-node-properties node)))))
      ;;     (if year year
      ;;       (when org-roam-capture--node ; non-nil only during org-roam-capture
      ;;         (setq year (read-string "Ano: "))
      ;;         (push (cons "YEAR" year) (org-roam-node-properties node)))
      ;;       year)))

      (setq org-roam-capture-templates

            '(

              ("b" "Bibliografia"
             plain
             (file "~/Documents/notas/templates/bibliografia.org")
             :if-new (file+head
                      ;; "bibliografia/${author}--${slug}.org"
                      "bibliografia/${citekey}.org"
                      ":PROPERTIES:\n:Custom_ID: ${citekey}\n:URL: ${url}\n:bib_entry_type: ${entry-type}\n:Autor: ${author}\n:ANO_PUBLICACAO: ${year}\n:CATEGORY: bibliografia\n:CRIADO: %<%Y-%m-%d>\n:END:\n\n#+title: ${author} (${year}); ${title}\n#+filetags:\n\n")


             :unnarrowed t
             :jump-to-captured
             )

              ("a" "Autor"
               plain
               "* Descrição%?\n* Obras\n* Biografia\n"
               :if-new (file+head
                        "autores/${slug}.org"
                        ":PROPERTIES:\n:Autor: ${title}\n:ANO_NASCIMENTO: ${year}\n:NACIONALIDADE: ${nacionalidade}\n:CATEGORY: autor\n:CRIADO: %<%Y-%m-%d>\n:END:\n\n#+title: ${title}\n#+filetags:\n\n"
                        )
               :unnarrowed t
               :jump-to-captured t)

              ("l" "Notas de literatura"
               plain
               "* Bibliografia de referência%?\n* Citações\n* Revisões\n** TODO Revisão ${title}: 1 dia\nSCHEDULED: <%(org-read-date nil nil \"++1d %t\")>\n** TODO Revisão ${title}: 7 dias\nSCHEDULED: <%(org-read-date nil nil \"++7d %t\")>\n** TODO Revisão ${title}: 30 dias\nSCHEDULED: <%(org-read-date nil nil \"++30d %t\")>\n** TODO Revisão ${title}: 90 dias\nSCHEDULED: <%(org-read-date nil nil \"++90d %t\")>\n** TODO Revisão ${title}: 180 dias\nSCHEDULED: <%(org-read-date nil nil \"++180d %t\")>"
               :if-new (file+head
                        "notas-literatura/%<%Y-%m-%d>--${slug}.org"
                        ":PROPERTIES:\n:CATEGORY: nota-literatura\n:CRIADO: %<%Y-%m-%d>\n:END:\n\n#+title: ${title}\n#+filetags:\n\n")
               :unnarrowed t
               :jump-to-captured t)

              ("n" "Notas permanentes"
               plain
               "%?\n* Revisões\n** TODO Revisão ${title}: 1 dia\nSCHEDULED: <%(org-read-date nil nil \"++1d %t\")>\n** TODO Revisão ${title}: 7 dias\nSCHEDULED: <%(org-read-date nil nil \"++7d %t\")>\n** TODO Revisão ${title}: 30 dias\nSCHEDULED: <%(org-read-date nil nil \"++30d %t\")>\n** TODO Revisão ${title}: 90 dias\nSCHEDULED: <%(org-read-date nil nil \"++90d %t\")>\n** TODO Revisão ${title}: 180 dias\nSCHEDULED: <%(org-read-date nil nil \"++180d %t\")>"
               :target (file+head "notas-permanentes/%<%Y-%m-%d>--${slug}.org"
                                  ":PROPERTIES:\n:CATEGORY: nota-permanente\n:CRIADO: %<%Y-%m-%d>\n:END:\n\n#+title: ${title}\n#+filetags:\n\n"
                                  )
               :unnarrowed t
               :jump-to-captured)

              ("i" "Índices"
               plain
               "%?"
               :target (file+head "indices/%<%Y-%m-%d>--${slug}.org"
                                  ":PROPERTIES:\n:CATEGORY: indice\n:CRIADO: %<%Y-%m-%d>\n:END:\n\n#+title: ${title}\n#+filetags:\n\n")
               :unnarrowed t
               :jump-to-captured)

               ("r" "Resumos"
               plain
               "%?"
               :target (file+head "resumos/%<%Y-%m-%d>--${slug}.org"
                                  ":PROPERTIES:\n:CATEGORY: resumo\n:CRIADO: %<%Y-%m-%d>\n:END:\n\n#+title: ${title}\n#+filetags:\n\n")
               :unnarrowed t
               :jump-to-captured)

              ("e" "Notas efêmeras" entry "* %?\n:PROPERTIES:\n:ID: %(org-id-new)\n:END:\n"
               :target (file "notas-efemeras/efemeras.org")
               :unnarrowed t
               :jump-to-captured t)

              ))
#+end_src
*** consult-roam
#+begin_src emacs-lisp
(use-package consult-org-roam
   :ensure t
   :after org-roam
   :init
   (require 'consult-org-roam)
   ;; Activate the minor mode
   (consult-org-roam-mode 1)
   :custom
   ;; Use `ripgrep' for searching with `consult-org-roam-search'
   (consult-org-roam-grep-func #'consult-ripgrep)
   ;; Configure a custom narrow key for `consult-buffer'
   (consult-org-roam-buffer-narrow-key ?n)
   ;; Display org-roam buffers right after non-org-roam buffers
   ;; in consult-buffer (and not down at the bottom)
   (consult-org-roam-buffer-after-buffers t)
   :config
   ;; Eventually suppress previewing for certain functions
   ;; (consult-customize
   ;;  consult-org-roam-forward-links
   ;;  :preview-key "M-.")
   )
#+end_src

** TODO zetteldesk
https://github.com/Vidianos-Giannitsis/zetteldesk.el

Zetteldesk.el exposes a workflow where you select buffers and org-roam nodes from a completion menu and filter generic functions such as switch-to-buffer and org-roam-node-find to show only the things you selected. Then it allows you to insert their contents in a seperate buffer and make an outline of the topic in question. Quoting the one and only Sonke Ahrens, the “desktop” is an essential part of academic endeavours such as writing a paper (I would personally generalize this further as an essential part of any type of revision work).

    After a while, you will have developed ideas far enough to decide on a topic to write about. Your topic is now based on what you have, not based on an unfounded idea about what the literature you are about to read might provide. Look through the connections and collect all the relevant notes on this topic (most of the relevant notes will already be in partial order), copy them onto your “desktop” and bring them in order. Look for what is missing and what is redundant. Don’t wait until you have everything together. Rather, try ideas out and give yourself enough time to go back to reading and note-taking to improve your ideas, arguments and their structure.

        Sonke Ahrens. How to Take Smart Notes : One Simple Technique to Boost Writing, Learning and Thinking–for Students, Academics and Nonfiction Book Writers. Pg. 31

This package attempts to port this desktop concept to emacs and org-roam as it seemed very useful to me and I would say it’s at least a “good enough” implementation.

If this sounds interesting to you, a small tutorial of the package can be found here, detailed documentation of the package can be found in the Wiki and the most interesting part of the Wiki (at least in my opinion) is the description of my workflow with the package in the Sample Workflow section. Unfortunately, while this idea is mentioned in the book, it is never deeply discussed so I improvised a bit to make something I like, and I think you might find it helpful. Lastly, I want to mention that I recently gave a talk in EmacsConf 2022 which included a small demo of using zetteldesk.el for organizing literature notes for scientific writing which might be interesting to watch.
** TODO org-ql
https://github.com/alphapapa/org-ql
To search notes in roam by filtering
** agenda
Colourful
https://www.gnu.org/software/emacs/manual/html_node/modus-themes/DIY-Make-Org-agenda-more-or-less-colorful.html

Use the settings here in last example
https://github.com/alphapapa/org-super-agenda/blob/master/examples.org#zaen323

*** Config
#+begin_src emacs-lisp
(setq org-agenda-files '("~/Documents/work-org/"))
  ;; (setq
  ;;     org-agenda-skip-scheduled-if-done t
  ;;     org-agenda-skip-deadline-if-done t
  ;;     org-agenda-include-deadlines t
  ;;     org-agenda-block-separator nil
  ;;     org-agenda-compact-blocks t
  ;;     org-agenda-start-day nil ;; i.e. today
  ;;     org-agenda-span 1
  ;;     org-agenda-start-on-weekday nil
  ;; )
#+end_src
*** org-super-agenda
https://www.karsdorp.io/posts/dotemacs/
Check Origami and the calendar view
#+begin_src emacs-lisp
  (use-package org-super-agenda
    :after org-agenda
    :ensure t
    :config
    (org-super-agenda-mode))
#+end_src
*** Custom Commands
#+begin_src emacs-lisp
  (setq org-agenda-custom-commands
        '(("w" "Work files"
           ((agenda "")
            (alltodo ""
                     ((org-super-agenda-groups
                       '((:name "In Progress" :todo "PROG")
                         (:name "Next"        :todo "NEXT")
                         (:name "TODO"        :todo "TODO")
                         (:auto-parent t))))))
           ((org-agenda-files '("~/Documents/work-org"))))

          ;; ("n" "Personal NOTES files"
          ;;  ((agenda "")
          ;;   (alltodo ""))
          ;;  ((org-agenda-files '("~/Documents/notas"))))


      ("n" "Personal NOTES files"
         ((agenda "")
          (alltodo ""))
         ((org-agenda-files
            (seq-filter
             (lambda (file)
               (and (not (string-match-p "/agenda\\.org$" file))
                    (not (string-match-p "/\\.obsidian/" file))
                    (not (string-match-p "/\\.stfolder/" file))
                    (not (string-match-p "/\\.trash/" file))))
             (directory-files-recursively "~/Documents/notas" "\\.org$")))))
          ;; ("p" "Personal (not NOTES) files"
          ;;  ((agenda "")
          ;;   (alltodo ""))
          ;;  ((org-agenda-files
          ;;    (cl-remove-if
          ;;     (lambda (file)
          ;;       (string-match-p "/notas/" file))
          ;;     (directory-files-recursively "~/Documents/notas" "\\.org$")))))

          ("p" "Personal agenda"
           ((agenda "")
            (alltodo ""))
           ((org-agenda-files '("~/Documents/notas/agenda.org"))))
          ))
#+end_src
*** Agenda buffer

#+begin_src emacs-lisp
(defun my/org-agenda-display-buffer (buffer-name action)
  "Identify agenda-managed org buffers."
  (with-current-buffer buffer-name
    (and (derived-mode-p 'org-mode)
         (member (buffer-file-name) (org-agenda-files)))))

;; 1. Agenda always starts as sole window
(add-to-list 'display-buffer-alist
             '("\\*Org Agenda\\*"
               (display-buffer-same-window)))

;; 2. Org entry from agenda opens in a right-side split, less than half
(add-to-list 'display-buffer-alist
             '(my/org-agenda-display-buffer
               (display-buffer-in-side-window)
               (side . right)
               (slot . 0)
               (window-width . 0.5)  ;; 40% width
               (dedicated . t)
               (inhibit-same-window . t)))
#+end_src
** Refile
#+begin_src emacs-lisp
(setq org-agenda-to-refile
      '(
"~/Documents/org/agenda_work.org"
"~/Documents/org/journal.org"
"~/Documents/org/notes.org"
"~/Documents/org/todos.org"
"~/Documents/org/work_journal.org"
"~/Documents/org/meetings.org"
"~/Documents/org/work_agenda_archive.org"
"~/Documents/notas/agenda_arquivo.org"
      ))

(setq org-refile-targets
      '((nil :maxlevel . 3)
        (org-agenda-to-refile :maxlevel . 3)))
#+end_src
** TODO Org import table from JSON
https://github.com/jlumpe/ox-json/
https://noonker.github.io/posts/2021-01-03-json-to-org-table/
** TODO Org-transclusion
https://github.com/nobiot/org-transclusion
** Org Download
org-download
** ;; org-agenda-dashboard (didn't seem to work well)
https://github.com/fbkarsdorp/org-agenda-dashboard
#+begin_src emacs-lisp
  ;; (use-package org-agenda-dashboard
  ;;   :vc
  ;;   (:fetcher github :repo fbkarsdorp/org-agenda-dashboard)
  ;;   )
#+end_src
** Pandoc
#+begin_src emacs-lisp
  (use-package org-pandoc-import
    :vc
    (:fetcher github :repo "tecosaur/org-pandoc-import")
    )
#+end_src
* Bibtex and references
** Bibtex mode
#+begin_src emacs-lisp
  ;; Managing Bibliographies
;;  (use-package bibtex
;;    :custom
;;    (bibtex-dialect 'BibTeX)
;;    (bibtex-user-optional-fields
;;     '(("keywords" "Keywords to describe the entry" "")
;;       ("file" "Link to a document file." "" )))
;;    (bibtex-align-at-equal-sign t))
#+end_src
** Variables
#+begin_src emacs-lisp
;; (defconst my-bibtex-file "~/Documents/notas/bibliografia/bibliografia.bib")
#+end_src
** Fetch books references or pdfs online
*** References
**** Biblio
https://github.com/cpitclaudel/biblio.el
fetch references online

https://gist.github.com/alphapapa/9df7093dc1ea83fbc4c8ef5d31b3bc57
**** Fetch amazon from isbn
source: https://www.reddit.com/r/emacs/comments/6ytkuu/fetch_book_data_from_amazon_and_insert_as_org/

(require 'esxml-query)
(require 'org-web-tools)

(defun ap/amazon-book-data (url)
  "Return plist of data for book at Amazon URL."
  (cl-flet ((field (target-field list)
                   (cl-loop for li in list
                            for (field value) = (ignore-errors
                                                  (-let (((_ _ (_ _ field) value) li))
                                                    (list field value)))
                            when (equal field target-field)
                            return (s-trim value))))
    (let* ((html (org-web-tools--get-url url))
           (tree (with-temp-buffer
                   (insert html)
                   (libxml-parse-html-region (point-min) (point-max))))
           (author (esxml-query "span.author a.contributorNameID *" tree))
           (title (esxml-query "div#booksTitle h1#title > span *" tree))
           (details (esxml-query-all "table#productDetailsTable ul li" tree))
           (date (s-replace "– " ""
                            (or
                             ;; Printed book
                             (third (esxml-query-all "div#booksTitle h1#title span *" tree))
                             ;; Kindle
                             (field "Publication Date:" details))))
           (asin (field "ASIN:" details))
           (publisher (replace-regexp-in-string (rx " (" (1+ anything) ")") ""
                                                (field "Publisher:" details)))
           (isbn-10 (field "ISBN-10:" details))
           (isbn-13 (field "ISBN-13:" details)))
      (list :author author :title title :asin asin :publisher publisher :date date
            :isbn-10 isbn-10 :isbn-13 isbn-13))))

(defun ap/org-insert-book-entry (&optional url)
  "Insert Org entry for book at URL."
  (interactive)
  (cl-flet ((key-name (key)
                      (--> key
                           (symbol-name it)
                           (replace-regexp-in-string "^:" "" it)
                           (upcase it))))
    (when-let ((url (or url (org-web-tools--get-first-url)))
               (data (ap/amazon-book-data url))
               (property-drawer (list 'property-drawer nil
                                      (cl-loop for (key value) on data by #'cddr
                                               for key = (key-name key)
                                               when value
                                               collect (list 'node-property (list :key key :value value)))))
               (author (plist-get data :author))
               (title (plist-get data :title))
               (link (org-make-link-string url title))
               (heading (format "%s, %s" author link))
               (element (org-element-create 'headline (list :level 1 :title heading)
                                            property-drawer))
               (string (org-element-interpret-data element)))
      (kill-new string)
      (save-excursion
        (beginning-of-line)
        (org-paste-subtree)))))

Run the command ap/org-insert-book-entry with a URL to an Amazon book in the clipboard, like https://www.amazon.com/Writing-GNU-Emacs-Extensions-Glickstein/dp/1565922611, and you'll get an Org entry like this:

;; ---Bob Glickstein, [[https://www.amazon.com/Writing-GNU-Emacs-Extensions-Glickstein/dp/1565922611/ref=tmm_pap_swatch_0?_encoding=UTF8&qid=&sr=][Writing GNU Emacs Extensions]]
;; :PROPERTIES:
;; :AUTHOR:   Bob Glickstein
;; :TITLE:    Writing GNU Emacs Extensions
;; :PUBLISHER: O'Reilly Media; 1 edition
;; :DATE:     April 11, 1997
;; :ISBN-10:  1565922611
;; :ISBN-13:  978-1565922617
;; :END:

Note that it requires the packages esxml and org-web-tools.

**** Get pdfs
Salvar: ebib get pdfs
https://yannherklotz.com/ebib-papers/
**** TODO Get websites
*** Zotra
Zotra: https://github.com/mpedramfar/zotra?tab=readme-ov-file
Zotra server backend https://github.com/mpedramfar/zotra-server?tab=readme-ov-file

#+begin_src emacs-lisp
;;     (use-package zotra
;;   :config
;;   (require 'zotra)
;;   (setq zotra-backend 'zotra-server
;;     zotra-local-server-directory "~/zotra-server/"
;;     zotra-default-entry-format "bibtex"
;;     zotra-default-bibliography my-bibtex-file
;;     zotra-download-attachment-default-directory "~/Documents/notas/media/bibliografia")
;;
;;     ;; clean entry
;;     (add-hook 'zotra-after-get-bibtex-entry-hook 'org-ref-clean-bibtex-entry)
;;       )
#+end_src
** org-ref
#+begin_src emacs-lisp
;;      (use-package org-ref
;;  :config
;;   (require 'org-ref)
;;        )
#+end_src
** Helm-bibtex

#+begin_src emacs-lisp
;;       (use-package helm-bibtex
;;
;;         :config
;;         ;; IMP: Ensure 'latexmk' installed as a system package!
;;         ;; see also: http://www.jonathanleroux.org/bibtex-mode.html
;;         (setq bibtex-completion-bibliography my-bibtex-file)  ; location of .bib file containing bibliography entries
;;         (setq bibtex-completion-find-additional-pdfs t)                          ; support for multiple pdfs for one %citekey
;;         (setq bibtex-completion-pdf-field "File")                                ; in bib entry, file = {/path/to/file.pdf} could be set to locate the accompanying file
;;         ;; for multiple files use, file = {:/path/to/file0.pdf:PDF;:/path/to/file1.pdf:PDF}
;;         (setq bibtex-completion-library-path '("~/Documents/notas/media/bibliografia/"))  ; in this dir, %citekey-name(s).pdf would automatically attach pdf(s) to %citekey
;;         ;; if only !exist "file" field in bib entry
;;         (setq bibtex-completion-notes-path "~/Documents/notas/bibliografia/")           ; dir to keep notes for the pdfs
;;
;;         (setq bibtex-completion-additional-search-fields '(keywords))
;;         ;; BEGIN: Change insert citation (<f3>) behaviour of helm-bibtex for org-mode
;;         ;;(defun custom/bibtex-completion-format-citation-org (keys)
;;         ;;  "Custom cite definition for org-mode"
;;         ;;  (s-join ", "
;;         ;;          (--map (format "cite:&%s" it) keys)))
;;
;;   ;;      (setq bibtex-completion-format-citation-functions
;;   ;;            '((org-mode      . custom/bibtex-completion-format-citation-org)
;;   ;;              (latex-mode    . bibtex-completion-format-citation-cite)
;;   ;;              (markdown-mode . bibtex-completion-format-citation-pandoc-citeproc)
;;   ;;              (python-mode   . bibtex-completion-format-citation-sphinxcontrib-bibtex)
;;   ;;              (rst-mode      . bibtex-completion-format-citation-sphinxcontrib-bibtex)
;;   ;;              (default       . bibtex-completion-format-citation-default))
;;   ;;            )
;;         ;; END: Change insert citation (<f3>) behaviour of helm-bibtex for org-mode
;;
;;         (setq bibtex-autokey-year-length 4                          ; customisations for 'bibtex-generate-autokey'
;;               bibtex-autokey-name-year-separator "-"                ; press C-c C-c (bibtex-clean-entry) on a bib entry w/o %citekey
;;               bibtex-autokey-year-title-separator "-"               ; to automatically insert a %citekey based on meta data
;;               bibtex-autokey-titleword-separator "-"                ; use M-x crossref-add-bibtex-entry <ret>: to add an entry from
;;               bibtex-autokey-titlewords 2                           ; https://www.crossref.org/
;;               bibtex-autokey-titlewords-stretch 1
;;               bibtex-autokey-titleword-length 5)
;;
;;   ;;      (setq bibtex-completion-display-fields
;;   ;;      '(("title" . 100)
;;   ;;        ("author" .  50)    ;; Set a large value so full name displays
;;   ;;        ("year" . 4)
;;   ;;        ("journal" . 20)
;;   ;;        ("keywords" . 25)))
;;
;;         (setq bibtex-completion-display-formats
;;               '((t . "${author:36} ${title:*} ${year:4} ${keywords:30} ${=has-pdf=:1}${=has-note=:1} ${=type=:7}")))
;;
;;         (setq bibtex-completion-format-author-function
;;               #'bibtex-completion-format-author-name)
;;
;;
;;
;;         (helm-delete-action-from-source "Edit notes" helm-source-bibtex)
;;         (helm-add-action-to-source "Edit notes" 'bibtex-completion-edit-notes helm-source-bibtex 0)
;;         )







;;   ;; overwrite bibtex autor function to make it not abbreviate first names
;;   (defun bibtex-completion-apa-format-authors (value &optional abbrev)
;;     "Format author list in VALUE in APA style. When ABBREV is non-nil, format in abbreviated APA style instead."
;;     (cl-loop for a in (s-split " and " value t)
;;              if (s-index-of "{" a)
;;              collect
;;              (replace-regexp-in-string "[{}]" "" a)
;;              into authors
;;              else if (s-index-of "," a)
;;              collect
;;              (let ((p (s-split " *, *" a t)))
;;                (concat
;;                 (car p) ", "
;;                 (cadr p)))
;;              into authors
;;              else
;;              collect
;;              (let ((p (s-split " " a t)))
;;                (concat
;;                 (-last-item p) ", "
;;                 (s-join " " (-butlast p))))
;;              into authors
;;              finally return
;;              (let ((l (length authors)))
;;                (cond
;;                 ((= l 1) (car authors))
;;                 ((and abbrev (= l 2))
;;                  (concat (s-join " & " authors)))
;;                 (abbrev
;;                  (format "%s et al." (car authors)))
;;                 ((< l 8) (concat (s-join ", " (-butlast authors))
;;                                  ", & " (-last-item authors)))
;;                 (t (concat (s-join ", " (-slice authors 0 7)) ", …"))))))




#+end_src
** Citar
#+begin_src emacs-lisp
;;   (use-package citar)
;;   (use-package citar-org-roam)
;;   (require 'citar-org-roam)
;;
;;   ;; (org-cite-global-bibliography '("~/Documents/notas/bibliografia/bibliografia.bib"))
;;   ;; (org-cite-insert-processor 'citar)
;;   ;; (org-cite-follow-processor 'citar)
;;   ;; (org-cite-activate-processor 'citar)
;;   ;; (citar-bibliography '("~/Documents/notas/bibliografia/bibliografia.bib"))
;;   ;; (citar-notes-paths '("~/Documents/notas/bibliografia/notas/"))
;;   ;; (citar-symbols
;;   ;;  `((file ,(all-the-icons-faicon "file-pdf-o" :face 'all-the-icons-green :v-adjust -0.1) . " ")
;;   ;;      (note ,(all-the-icons-material "speaker_notes" :face 'all-the-icons-blue :v-adjust -0.3) . " ")
;;   ;;      (link ,(all-the-icons-octicon "link" :face 'all-the-icons-orange :v-adjust 0.01) . " ")))
;;   ;; (citar-symbol-separator "--")
;;
;;   ;;;
;;   (citar-register-notes-source
;;    'orb-citar-source (list :name "Org-Roam Notes"
;;           :category 'org-roam-node
;;           :items #'citar-org-roam--get-candidates
;;           :hasitems #'citar-org-roam-has-notes
;;           :open #'citar-org-roam-open-note
;;           :create #'orb-citar-edit-note
;;           :annotate #'citar-org-roam--annotate))
;;
;;   (setq citar-notes-source 'orb-citar-source)
#+end_src
** Org-roam-bibtex
#+begin_src emacs-lisp
;;   (use-package org-roam-bibtex
;;       :after (org-roam helm-bibtex)
;;       :config
;;       (require 'org-ref) ; optional: if using Org-ref v2 or v3 citation links
;;       (org-roam-bibtex-mode)
;;       (setq bibtex-completion-edit-notes-function 'orb-bibtex-completion-edit-note) ; use org-roam-capture-templates for notes
;;
;;       (setq orb-preformat-keywords
;;       '("citekey" "title" "url" "author" "keywords" "file" "year" "abstract" "author-or-editor" "entry-type")
;;       orb-process-file-keyword t
;;       orb-attached-file-extensions '("pdf"))
;;
;;       (setq orb-insert-link-description "${author} (${year}); ${title}")
;;       )
#+end_src
** Org-noter
#+begin_src emacs-lisp
;;   (use-package org-noter
;;     :config
;;     (setq org-noter-notes-search-path '("~/Documents/notas/bibliografia/")) ; V IMPORTANT: SET FULL PATH!
;;     )
#+end_src
* PDF
** PDFTools
#+begin_src emacs-lisp
;;     (use-package pdf-tools
;;      :ensure t
;;      :init
;;      (pdf-tools-install)
;;      :config
;;      ;; (setenv "PKG_CONFIG_PATH" "/usr/local/Cellar/zlib/1.2.12/lib/pkgconfig:/usr/local/lib/pkgconfig:/usr/X11/lib/pkgconfig:/usr/local/Cellar/poppler/22.06.0_1/lib/pkgconfig:/opt/X11/share/pkgconfig")
;;      (pdf-tools-install)
;;      (custom-set-variables
;;       '(pdf-tools-handle-upgrades t))
;;
;;        ;; open pdfs scaled to fit page
;;        (setq pdf-view-display-size 'fit-page)
;;        ;; automatically annotate highlights
;;        (setq pdf-annot-activate-created-annotations t)
;;        ;; use normal isearch
;;        ;; (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
;;        ;; turn off cua so copy works
;;        (add-hook 'pdf-view-mode-hook (lambda () (cua-mode 0)))
;;        (add-hook 'pdf-view-mode-hook (lambda () (pdf-tools-install)))
;;        ;; more fine-grained zooming
;;        (setq pdf-view-resize-factor 1.1)
;;        :bind
;;           (:map pdf-view-mode-map
;;           ;; keybindings from package  https://github.com/vedang/pdf-tools?tab=readme-ov-file#keybindings-for-navigating-pdf-documents
;;
;;              ("," . doc-view-previous-line-or-previous-page)
;;              ("e" . doc-view-next-line-or-next-page)
;;              ("a" . pdf-view-previous-page)
;;              ("i" . pdf-view-next-page)
;;
;;              ("A" . pdf-history-backward)
;;              ("E" . pdf-history-forward)
;;
;;              ;; ("U"  . pdf-view-first-page)
;;              ;; ("O"  . pdf-view-last-page)
;;
;;              ("C-a" . image-backward-hscroll)
;;              ("C-i" . image-forward-hscroll)
;;
;;              ("g" . nil)
;;              ("gg" . pdf-view-goto-page)
;;              ("gt" . pdf-view-goto-label) ;; tag
;;              ("gl" . pdf-links-action-perform)
;;
;;              ("+" . pdf-view-position-to-register)
;;              ("/" . pdf-view-jump-to-register)
;;
;;              ("h" . pdf-annot-add-highlight-markup-annotation)
;;              ("t" . pdf-annot-add-text-annotation)
;;              ("D" . pdf-annot-delete)
;;
;;              ;; annotation map
;;              ("l" . nil)
;;              ("ll" . pdf-annot-list-annotations)
;;              ("la" . pdf-annot-attachment-dired)
;;              ("lD" . pdf-annot-delete)
;;              ("lt" . pdf-annot-add-text-annotation)
;;              ("lm" . pdf-annot-add-markup-annotation)
;;              ("ls" . pdf-annot-add-squiggly-markup-annotation)
;;              ("lu" . pdf-annot-add-underline-markup-annotation)
;;              ("lo" . pdf-annot-add-strikeout-markup-annotation)
;;              ("lh" . pdf-annot-add-highlight-markup-annotation)
;;
;;              ("o" . pdf-outline)
;;
;;              ("ff" . pdf-occur)
;;              ("fl" . pdf-links-isearch-link)
;;              ("fi" . isearch-forward)
;;              ("fa" . isearch-backward)
;;
;;          ))

#+end_src
* Terminal
** vterm
#+begin_src emacs-lisp
  (use-package vterm
    :ensure t
    :bind
    (:map vterm-mode-map
          ("M-v" . vterm-yank)
          ("M-c" . vterm-copy-mode)
          ("C-<left>" . (lambda () (interactive) (vterm-send-key (kbd "C-a"))))
          ("C-<right>" . (lambda () (interactive) (vterm-send-key (kbd "C-e")))))
    (:map vterm-copy-mode-map
          ("," . previous-line)
          ("e" . next-line)
          ("a" . left-char)
          ("i" . right-char)))

  (use-package vterm-toggle
    :ensure t
    :after vterm
    ;; (global-set-key [f2] 'vterm-toggle)
    ;; (global-set-key [C-f2] 'vterm-toggle-cd)

    ;; ;; you can cd to the directory where your previous buffer file exists
    ;; ;; after you have toggle to the vterm buffer with `vterm-toggle'.
    ;; (define-key vterm-mode-map [(control return)]   #'vterm-toggle-insert-cd)

    ;; ;Switch to next vterm buffer
    ;; (define-key vterm-mode-map (kbd "s-n")   'vterm-toggle-forward)
    ;; ;Switch to previous vterm buffer
    ;; (define-key vterm-mode-map (kbd "s-p")   'vterm-toggle-backward)

    )
#+end_src
* Snippets and templates
** Snippet
yas-insert-snippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :config
    (yas-global-mode 1)
    (setq yas-snippet-dirs
      '("~/.emacs.d/snippets"                 ;; personal snippets
        "~/.emacs.d/elpa/yasnippet-snippets-20250225.950/snippets/"
        ))
    )

(use-package yasnippet-snippets)
#+end_src
** Template
https://github.com/minad/tempel
* Fonts
Cool fonts
- Helvetica: very clean and confortable, a bit basic
- Baskerville: very beautiful and decorated, curly
- Garamond: very classical and confortable
- Book antiqua: straight lines and classic
- Halfmoon Font Family: curvy and sans serif
- Sarasa gothic mono: Multi alphabet fonts, https://picaq.github.io/sarasa/


https://github.com/protesilaos/fontaine
Fontaine allows the user to define detailed font configurations and set them on demand. For example, one can have a regular-editing preset and another for presentation-mode (these are arbitrary, user-defined symbols): the former uses small fonts which are optimised for writing, while the latter applies typefaces that are pleasant to read at comfortable point sizes.
** Default font
  #+begin_src emacs-lisp
(defconst default-font "FiraCode Nerd Font")
(defconst var-font "Sans Serif")



    ;; Set the font. Note: height = px * 100
    (set-face-attribute 'default nil :font default-font :height 120)

    ;; (defun my-buffer-face-org-mode ()
    ;;     "Customise the font in `org-mode' buffers."
    ;;     (interactive)
    ;;     (setq buffer-face-mode-face '(:family "Cormorant Garamond" :height 240))
    ;;     (buffer-face-mode))

    ;; (add-hook 'org-mode-hook 'my-buffer-face-org-mode)


     (custom-theme-set-faces
       'user
       '(variable-pitch ((t (:font var-font :height 160 :weight thin))))
       '(default ((t (:font default-font :height 120))))
       '(fixed-pitch ((t (:font default-font :height 120))))
       )

(use-package mixed-pitch
    :hook
    ;; If you want it in all text modes:
    (org-mode . mixed-pitch-mode)
    (markdown-mode . mixed-pitch-mode)
    :config
      (setq mixed-pitch-set-height 1.6)
    )
#+end_src
** TODO Font lock mode
TODO: find out what is font-lock-mode and if it's desired
#+begin_src emacs-lisp
  ;; always highlight code
  (global-font-lock-mode 1)
  #+end_src
** Org mode fonts
#+begin_src emacs-lisp
  (let* (
      (variable-tuple
          (cond ((x-list-fonts var-font)         '(:font var-font))
                (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
         ;; (base-font-color     (face-foreground 'default nil 'default))
         ;; (headline           `(:inherit default :weight bold)))
         (headline           `(:inherit default)))

  (custom-theme-set-faces
     'user
     `(org-level-8 ((t (,@headline ,@variable-tuple :height 1.2 :foreground "#5e8759"))))
     `(org-level-7 ((t (,@headline ,@variable-tuple :height 1.2 :foreground "#5e8759"))))
     `(org-level-6 ((t (,@headline ,@variable-tuple :height 1.2 :foreground "#5e8759"))))
     `(org-level-5 ((t (,@headline ,@variable-tuple :height 1.2 :foreground "#5e8759"))))
     `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.2 :foreground "#5e8759"))))
     `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.2 :foreground "#5e8759"))))
     `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.25))))
     `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.5))))
     `(org-document-title ((t (,@headline :height 1.6 :underline nil))))))



   (custom-theme-set-faces
     'user
     '(org-block ((t (:inherit fixed-pitch :height 1.6))))
     '(org-code ((t (:inherit (shadow fixed-pitch)))))
     '(org-document-info ((t (:foreground "dark orange"))))
     '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
     '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
     '(org-link ((t (:foreground "royal blue" :underline t))))
     '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
     '(org-property-value ((t (:inherit fixed-pitch))) t)
     '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
     '(org-table ((t (:inherit fixed-pitch :foreground "#83a598"))))
     '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
     '(org-verbatim ((t (:inherit (shadow fixed-pitch))))))
#+end_src
** Manual fonts
#+begin_src emacs-lisp

(use-package info-colors
  :commands (info-colors-fontify-node))

(add-hook 'Info-selection-hook 'info-colors-fontify-node)
#+end_src
** Show font
(use-package show-font)
* Language learning
** References
https://xenodium.com/a-platform-that-moulds-to-your-needs
https://github.com/chenyanming/paw - annotate words for language learning
** Not make vocabulary completion pop-ups
#+begin_src emacs-lisp
(setq text-mode-ispell-word-completion nil)
#+end_src
** Spell check
#+begin_src emacs-lisp
;;   (use-package flyspell
;;     :ensure t
;;     :custom
;;     (ispell-program-name "aspell")
;;     (ispell-dictionary "en") ; CHOOSE YOUR LANGUAGE
;;     :hook
;;     ((text-mode markdown-mode org-mode) . flyspell-mode)
;;     ((html-mode yaml-mode) . flyspell--mode-off)
;;     (prog-mode . flyspell-prog-mode)
;;     :config
;;     (dolist (my-list '((org-property-drawer-re)
;;                        ("=" "=") ("~" "~")
;;                        ("^#\\+BEGIN_SRC" . "^#\\+END_SRC")))
;;       (add-to-list 'ispell-skip-region-alist my-list)))
;;
;;   (use-package flyspell-popup
;;     :after flyspell
;;     ;; :config
;;     ;; (add-hook 'flyspell-mode-hook #'flyspell-popup-auto-correct-mode)
;;     ;; (setq flyspell-popup-correct-delay 1)
;;     )
;;
;;   (use-package ispell
;;     ;; Configure `LANG`, otherwise ispell.el cannot find a 'default
;;     ;; dictionary' even though multiple dictionaries will be configured
;;     ;; in next line.
;;     :hook
;;     ((text-mode markdown-mode org-mode) . flyspell-mode)
;;     ((html-mode yaml-mode) . flyspell--mode-off)
;;     (prog-mode . flyspell-prog-mode)
;;     :config
;;     ;; (setenv
;;     ;;     "DICPATH"
;;     ;;     "/opt/homebrew/bin/hunspell")
;;     ;; It works!  It works!  After two hours of slogging, it works!
;;     ;; (if (file-exists-p "/usr/bin/hunspell")
;;     ;;     (progn
;;     ;;     (setq ispell-program-name "hunspell")
;;     ;;     (eval-after-load "ispell"
;;     ;;         '(progn (defun ispell-get-coding-system () 'utf-8)))))
;;
;;
;;     (setenv "LANG" "en_GB")
;;     (setq ispell-program-name "hunspell")
;;     (setq ispell-dictionary "en_GB,pt_BR,fr_FR")
;;     ;; ispell-set-spellchecker-params has to be called
;;     ;; before ispell-hunspell-add-multi-dic will work
;;     ;; call function ispell-set-spellchecker-params
;;     (ispell-set-spellchecker-params)
;;
;;     (ispell-hunspell-add-multi-dic "en_GB,pt_BR,fr_FR")
;;
;;     (dolist (my-list '((org-property-drawer-re)
;;                        ("=" "=") ("~" "~")
;;                        ("^#\\+BEGIN_SRC" . "^#\\+END_SRC")))
;;       (add-to-list 'ispell-skip-region-alist my-list)))
;;
;;   ;; For saving words to the personal dictionary, don't infer it from
;;   ;; the locale, otherwise it would save to ~/.hunspell_de_DE.
;;   (setq ispell-personal-dictionary "~/.conf/hunspell_personal")
;;   ;; The personal dictionary file has to exist, otherwise hunspell will
;;   ;; silently not use it.
;;   (unless (file-exists-p ispell-personal-dictionary)
;;     (write-region "" nil ispell-personal-dictionary))
;;
;;
;;
;;   ;; Automatically detect language for Flyspell
;;   (use-package guess-language
;;     :ensure t
;;     :defer t
;;     :init
;;     (add-hook 'text-mode-hook #'guess-language-mode)
;;     (add-hook 'org-mode-hook #'guess-language-mode)
;;     (add-hook 'markdown-mode-hook #'guess-language-mode)
;;
;;     :config
;;     (setq guess-language-langcodes '((en . ("en_GB" "English"))
;;                                      (pt . ("pt_BR" "Português"))
;;                                      (fr . ("fr_FR" "Français"))
;;                                      )
;;           guess-language-languages '(en pt fr)
;;           guess-language-min-paragraph-length 45)
;;     :diminish guess-language-mode)
;;
;;
;;   ;; Cycle through languages
;;   (defvar mu-languages-ring nil "Languages ring for Ispell")
;;
;;   (let ((languages '("en_GB" "pt_BR" "fr_FR")))
;;     ;; (validate-setq mu-languages-ring (make-ring (length languages)))
;;     (setq mu-languages-ring (make-ring (length languages)))
;;     (dolist (elem languages) (ring-insert mu-languages-ring elem)))
;;
;;   (defun my/cycle-ispell-languages ()
;;     (interactive)
;;     (let ((language (ring-ref mu-languages-ring -1)))
;;       (ring-insert mu-languages-ring language)
;;       (ispell-change-dictionary language)))
#+end_src
** Dictionary translator
bug in pop to buffer
#+begin_src emacs-lisp
    ;; (use-package google-translate
    ;;   :config
    ;;   (require 'google-translate)
    ;;   (require 'google-translate-smooth-ui)
    ;;   (setq google-translate-translation-directions-alist
    ;;         '(("pt" . "fr") ("fr" . "pt") ("pt" . "en") ("en" . "pt")))
    ;;   (setq google-translate-pop-up-buffer-set-focus t)

    ;;   )



  ;; bugged
;;     (use-package go-translate
;;       :ensure t
;;       :config
;;       (setq gt-default-translator
;;             (gt-translator
;;              :taker   (gt-taker :prompt t :text 'word :langs '(en pt fr))  ; config the Taker
;;              :engines (list (gt-google-engine))
;;              :render (gt-buffer-render
;;                         :name "translator"
;;                         ;;:window-config '((display-buffer-at-bottom))
;;                         :then (lambda () (pop-to-buffer "translator")))
;;              ))
;;       (setq gt-polyglot-p t)
;;       ;; highly recommended:
;;       ;; Install the curl program and the plz.el package. The request will then be sent through curl, which is much better than the built-in url.el!
;;       )
#+end_src
** Dictionary (wiktionary)
#+begin_src emacs-lisp
;;     (use-package wiktionary
;;       :vc
;;           (:fetcher github :repo umanwizard/emacs-wiktionary)
;;       :config
;;           (require 'wiktionary)
;;       (setq wiktionary-language-order '("Latin" "English" "French" "Portuguese" "Spanish" "Italian" "German"))
;;       )

  ;; this is very interesting and has IPA, but it triggers some bug in my emacs
  ;;   (use-package wiktionary-bro
  ;;     :vc
  ;;     (:fetcher github :repo agzam/wiktionary-bro.el)
  ;; )
#+end_src
** Grammar check
https://github.com/mmagnus/emacs-grammarly - sends text to grammarly
https://github.com/emacs-grammarly/flycheck-grammarly
https://github.com/emacs-grammarly/lsp-grammarly

https://writewithharper.com/

https://github.com/mhayashi1120/Emacs-langtool
https://github.com/cjl8zf/langtool-ignore-fonts
#+begin_src emacs-lisp
  ;; (use-package langtool
  ;;   :config
  ;;       (setq langtool-language-tool-jar "/Users/darchan.ordovas/LanguageTool-6.6/languagetool-commandline.jar")
  ;;       (require 'langtool)
  ;;   )
#+end_src
** TODO IPA
https://github.com/emacs-mirror/emacs/blob/master/lisp/leim/quail/ipa-praat.el


  ;; I am not aware of any. However, I have found this to be a good source for IPA data https://github.com/open-dict-data/ipa-dict . Based on that data I use the following function to convert text to IPA:

  ;; (defconst my-ipa-dict-file "~/Downloads/en_US.txt")

  ;; (defun my-get-ipa (txt)
  ;;   "Return string TXT converted to IPA.

  ;; When called interactively first try taking TXT from the active
  ;; region, then the word at point, then prompt for it;
  ;; moreover, add the result to the kill ring.

  ;; Words are looked up in `my-ipa-dict-file', as the raw data
  ;; files downloaded from URL
  ;; `https://github.com/open-dict-data/ipa-dict'.

  ;; Punctuation is preserved and words for which conversion fails
  ;; are returned in square brackets for readability."
  ;;   (interactive
  ;;    (list (or (and (region-active-p)
  ;;                   (string-trim (buffer-substring-no-properties
  ;;                                 (region-beginning) (region-end))))
  ;;              (word-at-point t)
  ;;              (read-string "Text: "))))
  ;;   (setq txt (split-string txt))
  ;;   (message "text: %s" txt)
  ;;   (let ((langfile my-ipa-dict-file)
  ;;         ipa)
  ;;     (with-temp-buffer
  ;;       (insert-file-contents langfile)
  ;;       (while txt
  ;;         (goto-char (point-min))
  ;;         (let ((token (pop txt))
  ;;               pre word suf)
  ;;           (setf (match-data) nil)
  ;;           (string-match
  ;;            "^\\([^[:alpha:]]*\\)\\(.*?\\)\\([^[:alpha:]]*\\)$"
  ;;            token)
  ;;           (setq pre (match-string 1 token))
  ;;           (setq word (match-string 2 token))
  ;;           (setq suf (match-string 3 token))
  ;;           (setf (match-data) nil)
  ;;           (when (and word (not (string-empty-p word)))
  ;;             (re-search-forward (format "^%s\t/\\(.*?\\)/" word) nil t))
  ;;           (setq ipa (concat ipa
  ;;                             (if ipa " " "")
  ;;                             pre
  ;;                             (when (and word (not (string-empty-p word)))
  ;;                               (or (match-string 1)
  ;;                                   (format "[%s]" word)))
  ;;                             suf)))))
  ;;     (if (not (called-interactively-p))
  ;;         ipa
  ;;       (deactivate-mark)
  ;;       (kill-new ipa)
  ;;       (message ipa))))


** TODO Bilingual reading
Cool, maybe one day: https://github.com/Elilif/emacs-immersive-translate (nov, included there, reads EPUB docs)
* Web search engine
https://ag91.github.io/blog/2020/10/04/engine-mode-or-how-to-shorten-your-time-to-browser/

latin 1 encoding
(defengine diec2
  "dlc.iec.cat/results.asp?txtEntrada=%s"
  :term-transformation-hook (lambda (term) (encode-coding-string term latin-1))
  :keybinding "c")

Universal args wraps it in Quotes for exact search
  (defengine duckduckgo
  "https://duckduckgo.com/?q=%s"
  :term-transformation-hook (lambda (term) (if current-prefix-arg
                                          (concat "\"" term "\"")
                                        term))
  :keybinding "d")
#+begin_src emacs-lisp
;;   (use-package engine-mode
;;     :ensure t
;;
;;     :config
;;     (engine-mode t)
;;     (engine/set-keymap-prefix (kbd "C-c C-/"))
;;     (defengine duckduckgo
;;       "https://duckduckgo.com/?q=%s"
;;       :docstring "Duck Duck Go"
;;       :keybinding "d")
;;
;;     (defengine wiktionary
;;       "https://en.wiktionary.org/wiki/%s"
;;       :docstring "Wiktionary"
;;       :keybinding "w")
;;
;;
;;     )
#+end_src
* TODO Casual
https://github.com/kickingvegas/casual
#+begin_src emacs-lisp
  ;; (use-package casual)
  ;; (require 'casual-agenda)

#+end_src
* Custom Functions
** Navigating file
#+begin_src emacs-lisp
(defun my/jump-up ()
  "Jump to the next relevant section depending on the major mode, or call default."
  (interactive)
  (cond
   ((eq major-mode 'org-mode)
    (org-previous-visible-heading 1))
   ((eq major-mode 'python-mode)
    (python-nav-backward-defun))
   ((eq major-mode 'emacs-lisp-mode)
    (beginning-of-defun))
   (t
    (call-interactively #'boon-smarter-upward))))

(defun my/jump-down ()
  "Jump to the next relevant section depending on the major mode, or call default."
  (interactive)
  (cond
   ((eq major-mode 'org-mode)
    (org-next-visible-heading 1))
   ((eq major-mode 'python-mode)
    (python-nav-forward-defun))
   ((eq major-mode 'emacs-lisp-mode)
    (end-of-defun))
   (t
    (call-interactively #'boon-smarter-downward))))
#+end_src
** File managing
#+begin_src emacs-lisp
  (defun my/kill-buffer-file-name-nondirectory ()
    "Copy the current buffer file name to the clipboard."
    (interactive)
    (when-let ((filename (if (eq major-mode 'dired-mode)
                             default-directory
                           (buffer-file-name))))
      (message (file-name-nondirectory (kill-new filename)))))


  (defun my/copy-file-path-in-project ()
    "Copy the current file's path relative to the project root."
    (interactive)
    (let ((project-root (projectile-project-root))
          (file-path (buffer-file-name)))
      (if (and project-root file-path)
          (let ((relative-path (file-relative-name file-path project-root)))
            (kill-new (concat project-root relative-path))
            (message "Copied: %s" (concat project-root relative-path)))
        (message "Not in a project or no file associated with buffer."))))


(defun my/dired-copy-marked-files-to-dir ()
  "Copy marked files in current Dired buffer to a directory read interactively."
  (interactive)
  (let ((files (dired-get-marked-files))
        (target-dir (read-directory-name "Copy to directory: ")))
    (dolist (file files)
      (copy-file file (expand-file-name (file-name-nondirectory file) target-dir) t))
    (message "Copied %d file(s) to %s"
             (length files)
             target-dir)))

  ;; DIDN'T WORK
  ;; got from https://emacs.stackexchange.com/questions/60661/how-to-duplicate-a-file-in-dired
  ;; (defun my/dired-duplicate-this-file ()
  ;; "Duplicate file on this line."
  ;; (interactive)
  ;; (let* ((this  (dired-get-filename t))
  ;;        (ctr   1)
  ;;        (new   (format "%s Copy" this)))
  ;;   (while (file-exists-p new)
  ;;     (setq ctr  (1+ ctr)
  ;;           new  (format "%s Copy (%d)" this ctr)))
  ;;    (dired-copy-file this new nil))
  ;; (revert-buffer))
#+end_src
** Commenting
#+begin_src emacs-lisp
(defun my-comment-lines ()
  "Comment the current line if no region is selected.
If a region is selected, comment all lines that are fully or partially within the region."
  (interactive)
  (if (use-region-p)
      (let ((start (region-beginning))
            (end (region-end)))
        (save-excursion
          (goto-char start)
          (beginning-of-line)
          (setq start (point))
          (goto-char end)
          (end-of-line)
          (setq end (point))
          (comment-region start end)))
    (comment-line)))




#+end_src
** TODO Org
#+begin_src emacs-lisp
  ;; (defun org-cut-subtree-keep-heading ()
  ;;   "Delete everything under the current Org heading, preserving only the heading line."
  ;;   (interactive)
  ;;   (unless (org-at-heading-p)
  ;;     (org-back-to-heading t))
  ;;   (save-excursion
  ;;     (let ((heading-end (progn
  ;;                          (org-back-to-heading t)
  ;;                          (end-of-line)
  ;;                          (point)))
  ;;           (subtree-end (progn
  ;;                          (org-end-of-subtree t t)
  ;;                          (if (and (bolp) (not (eobp)))
  ;;                              (1- (point))
  ;;                            (point)))))
  ;;       (when (> subtree-end heading-end)
  ;;         (delete-region heading-end subtree-end)))
  ;;     )


(defun my/org-linkify-region-from-kill-ring (beg end)
  "Insert org link at region, using first kill-ring entry as URL."
  (interactive "r")
  (let ((desc (buffer-substring beg end))
        (url (current-kill 0 t)))
    (delete-region beg end)
    (org-insert-link nil url desc)))




(defun my/org-insert-subheading-respect-content (arg)
  "Insert a new subheading and demote it, respecting content.
Works for outline headings and for plain lists alike.
The prefix argument ARG is passed to `org-insert-heading'.
Unlike `org-insert-heading', when point is at the beginning of a
heading, still insert the new sub-heading below."
  (interactive "P")
  (when (and (bolp) (not (eobp)) (not (eolp))) (forward-char))
  (org-insert-heading-respect-content arg)
  (cond
   ((org-at-heading-p) (org-do-demote))
   ((org-at-item-p) (org-indent-item))))

(defun my/org-insert-heading-above-level ()
  "Insert an Org heading one level above the current heading level."
  (interactive)
  (org-insert-heading)
  (org-do-promote))


(defun my/org-insert-heading-above-level-respect-content ()
  "Insert an Org heading one level above the current heading level."
  (interactive)
  (org-insert-heading-respect-content)
  (org-do-promote))




;; Insert image into org from selection
(defun my/org-insert-image ()
  "Select and insert an image into org file."
  (interactive)
  (let ((selected-file (read-file-name "Select image: " "~/Pictures/" nil t)))
    (when selected-file
      (insert (format "[[file:%s]]\n" selected-file))
      (org-display-inline-images))))


;; web url
(defun my/web-page-url-to-org (&optional url output-dir)
  "Download URL to Org, saving images for inline display."
  (interactive "sURL: \nDDirectory for org+images: ")
  (let* ((url (or url (eww-current-url)))
         (default-directory (file-name-as-directory (expand-file-name output-dir)))
         (orgfile (concat (file-name-nondirectory (url-file-nondirectory url)) ".org"))
         (cmd (format "pandoc -f html -t org -o %s --extract-media=images %s"
                      (shell-quote-argument orgfile)
                      (shell-quote-argument url))))
    (shell-command cmd)
    (find-file orgfile)))
#+end_src
** Point, mark
#+begin_src emacs-lisp
(defun my/push-mark-no-activate ()
  "Pushes `point' to `mark-ring' and does not activate the region
   Equivalent to \\[set-mark-command] when \\[transient-mark-mode] is disabled"
  (interactive)
  (push-mark (point) t nil)
  (message "Pushed mark to ring"))


#+end_src
** Dictionary
#+begin_src emacs-lisp
(defun my/lookup-word (word)
  (interactive (list (save-excursion (car (ispell-get-word nil)))))
  (browse-url (format "http://en.wiktionary.org/wiki/%s" word)))
#+end_src
** Fast open files
#+begin_src emacs-lisp
  (defconst my-config-org-file (expand-file-name "config.org" user-emacs-directory))
  (defconst my-work-org-file "~/Documents/work-org/work-tasks.org")
  (defconst my-personal-agenda-org-file "~/Documents/notas/agenda.org")
  (defconst my-ephemerous-notes "~/Documents/notas/notas-efemeras/efemeras.org")
  ;; my-bibtex-file is defined at bibliography section


  (defun my/open-config ()
    "Open the personal config file of user"
    (interactive)
    (find-file my-config-org-file))

  (defun my/open-work-org ()
    "Open the personal config file of user"
    (interactive)
    (find-file my-work-org-file))

  (defun my/open-personal-agenda-org ()
    "Open the personal config file of user"
    (interactive)
    (find-file my-personal-agenda-org-file))

    (defun my/open-bibtex ()
    "Open the personal config file of user"
    (interactive)
    (find-file my-bibtex-file))

    (defun my/open-ephemerous-notes ()
    "Open the personal config file of user"
    (interactive)
    (find-file my-ephemerous-notes))
#+end_src
** Reload config
#+begin_src emacs-lisp
(setq my-config-el-file "~/.emacs.d/init.el")

(defun my/reload-config ()
  "Tangle `my-config-org-file`, load init.el, process package queues."
  (interactive)
  (when (and (boundp 'my-config-org-file)
             (file-exists-p my-config-org-file))
    (with-current-buffer (find-file-noselect my-config-org-file)
      (org-babel-tangle)))
  (load-file my-config-el-file)
)

#+end_src
** Dates
#+begin_src emacs-lisp
  (defun my/insert-date ()
    "Insert today's date at point"
    (interactive "*")
    (insert (format-time-string "%F")))
#+end_src
** Key from int to key combination
#+begin_src emacs-lisp
;; taken from https://emacs.stackexchange.com/questions/38516/turn-keymap-number-back-to-key-sequence
(defun my/display-number-as-char (&optional undo)
  "Display number as character, for example, display 24 as C-x."
  (interactive "P")
  (if undo
      (remove-overlays nil nil 'chunyang-show-number-as-char t)
    (save-excursion
      (goto-char (point-min))
      (let (ov)
        (while (re-search-forward "[0-9]+" nil :no-error)
          (setq ov (make-overlay (match-beginning 0) (match-end 0)))
          (overlay-put ov 'display (single-key-description
                                    (string-to-number (match-string 0))))
          (overlay-put ov 'chunyang-show-number-as-char t))))))
#+end_src
** Show all faces in a buffer
Taken from https://gist.github.com/amno1/1bf2c57033397fe876e8efd1b474e604
#+begin_src emacs-lisp
(defun my/buffer-faces--build-faces (&optional buffer)
  (let (faces
        (inhibit-point-motion-hooks t))
    (save-excursion
      (with-current-buffer (or buffer (current-buffer))
        (goto-char (point-min))
        (while (/= (point) (point-max))
          (cl-pushnew (get-text-property (point) 'face) faces)
          (goto-char (next-property-change (point) nil (point-max))))))
    (cl-delete-if #'null faces)))

(defun my/buffer-faces--build-buffer (faces)
  (with-current-buffer (get-buffer-create "*faces*")
    (with-silent-modifications
     (unless (eq major-mode 'special-mode)
       (special-mode))
     (delete-region (point-min) (point-max))
     (cl-loop for face in (sort faces 'eq) do
              (insert (propertize (format "%s\n" face) 'face face))))
    (goto-char (point-min))
    (current-buffer)))

(defun my/show-buffer-faces ()
  "Show a buffer containing each face used in the current buffer."
  (interactive)
  (pop-to-buffer
   (my/buffer-faces--build-buffer (my/buffer-faces--build-faces))))
#+end_src

** Paste rectangle with multiple cursors adds lines
#+begin_src emacs-lisp
(defun my/yank-multiple-cursors ()
  "Yank a rectangle as if it was an ordinary kill."
  (interactive "*")
  (when (and (use-region-p) (delete-selection-mode))
    (delete-region (region-beginning) (region-end)))
  (save-restriction
    (narrow-to-region (point) (mark))
    (yank-rectangle)))
#+end_src
** Git open file remote
  ;; (defun my/open-on-github ()
  ;;   (interactive)
  ;;   (let
  ;;       ((repo-url (magit-git-string "remote" "get-url" "--push" "origin"))
  ;;        (commit-hash (magit-git-string "rev-parse" "HEAD"))
  ;;        (start-line (if (use-region-p)
  ;;                        (line-number-at-pos (region-beginning))
  ;;                      (line-number-at-pos)))
  ;;        (end-line (if (use-region-p) (line-number-at-pos (region-end)))))
  ;;     (unless repo-url (error  "not in a git repo"))
  ;;     (browse-url
  ;;      (concat
  ;;       (substring repo-url 0 -4)
  ;;       "/blob/"
  ;;       commit-hash
  ;;       "/"
  ;;       (substring buffer-file-name (length (projectile-project-root)))
  ;;       "#L" (number-to-string start-line)
  ;;       (if (and (use-region-p) (< 0 (- end-line start-line)))
  ;;           (concat "..L" (number-to-string end-line)))
  ;;       )))))
* Boon
** Config
#+begin_src emacs-lisp


    (use-package boon
      :ensure t
      :config
        ;; ;; activate boon mode on programming modes and yml
         (add-hook 'prog-mode-hook 'turn-on-boon-mode)
         (add-hook 'yaml-mode-hook 'turn-on-boon-mode)
         (add-hook 'sql-mode-hook 'turn-on-boon-mode)
         (add-hook 'org-mode-hook 'turn-on-boon-mode)
         (add-hook 'markdown-mode-hook 'turn-on-boon-mode)
         (add-hook 'toml-mode-hook 'turn-on-boon-mode)
         (add-hook 'vterm-mode-hook 'turn-on-boon-mode)
         (add-hook 'bibtex-mode-hook 'turn-on-boon-mode)


        (add-hook 'cfrs-input-mode-hook 'turn-off-boon-mode)
        (add-hook 'dired-mode-hook 'turn-off-boon-mode)
        (add-hook 'copilot-chat-org-prompt-mode-hook 'turn-off-boon-mode)

    )
    (setq boon-default-cursor-type 'bar)
    (setq boon-command-cursor-type 'bar)
    (setq boon-insert-cursor-type 'box)
    (setq boon-special-cursor-type 'bar)


    (setq boon-enclosures
          '(
            (?A . ("⟨" "⟩"))
            (?a . ("<" ">"))
            (?b . ("[" "]"))
            (?c . ("{" "}")) ;; bRaces
            (?l . ("⦇" "⦈")) ;; lenses
            (?' . ("'" "'")) ;; single quotes
            (?\" . ("\"" "\"")) ;; double quotes
            (?D . ("``" "''")) ;; Double quotes in latex style
            (?f . ("«" "»")) ;; french quotes (or, more precisely, Russian quotes)
            (?F . ("‹" "›")) ;; single variation of the above
            (?h . ("#" "#")) ;; hash
            (?s . ("`" "'")) ;; (emacs) Symbol
            (?m . ("\\(" "\\)")) ;; Math
            (?M . ("\\[" "\\]")) ;; display Math
            (?o . ("⟦" "⟧")) ;; oxford brackets
            (?p . ("(" ")"))
            (?Q . ("`" "'")) ;; british Quotes
            (?r . ("{-" "-}"))
            (?R . ("⦃" "⦄")) ;; thick bRaces
            (?t . ("~" "~")) ;; tilda
            (?u . ("‘" "’")) ;; "unicode"
            (?U . ("“" "”")) ;; "unicode double"
            )
            )



    ;; Maps
    (defvar boon-x-map (let ((map (make-sparse-keymap))) (set-keymap-parent map ctl-x-map))
      "Extended boon command map.

      \\{boon-x-map}")
    (fset 'boon-x-map boon-x-map)

#+end_src
** Helper functions
#+begin_src emacs-lisp
;; beginning of region selection
(defun boon-select-to-beginning-region (regs)
  "Return the region from point to beginning of REGS region."
  (interactive (list (boon-spec-selector "select until beginning of region")))
  (
    lambda ()(mapcar
      (lambda (reg) (boon-to-beginning-region reg))
      (funcall regs)
    )
  )
)

(defun boon-to-beginning-region (reg)
  "Given a region REG, return subregion from mark to its beginning."
  (boon-mk-reg (boon-reg-begin reg) (boon-reg-cursor reg) (boon-reg-cursor reg)))



;; end of region selection
(defun boon-select-to-end-region (regs)
  "Return the region from point to end of REGS region."
  (interactive (list (boon-spec-selector "select until end of region")))
  (
    lambda ()(mapcar
      (lambda (reg) (boon-to-end-region reg))
      (funcall regs)
    )
  )
)

(defun boon-to-end-region (reg)
  "Given a region REG, return subregion from mark to its end."
  (boon-mk-reg (boon-reg-end reg) (boon-reg-cursor reg) (boon-reg-cursor reg)))


;; selectors
(defun boon-select-defun  () (interactive) (boon-select-from-region 'er/mark-defun))

;; define a function backward-symbol which is forward-symbol with negative argument
(defun backward-symbol (arg)
  "Move point to the beginning of the ARGth symbol before point."
  (interactive "p")
  (forward-symbol (- arg)))
#+end_src
* Meow
https://github.com/skissue/meow-tree-sitter
#+begin_src emacs-lisp
;;   (use-package meow
;;     :ensure t    ; Ensure my-package is installed
;;     :config      ; Run this code after my-package is loaded
;;     ;; meow
;;
;;     (defun meow-kmacro ()
;;       "Toggle recording of kmacro."
;;       (interactive)
;;       (if defining-kbd-macro
;;           (meow-end-or-call-kmacro)
;;         (meow-beacon-start)))
;;
;;
;;     (defun meow-setup ()
;;       (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
;;       (setq meow-use-clipboard t)
;;
;;       ;;(add-to-list 'meow-keymap-alist (cons 'leader lem+leader-map))
;;       ;;(add-to-list 'meow-keymap-alist (cons 'leader window-keymap))
;;
;;       (setq meow-keypad-meta-prefix nil
;;             meow-keypad-ctrl-meta-prefix nil
;;             meow-keypad-literal-prefix nil
;;             meow-keypad-start-keys nil
;;             meow-expand-hint-remove-delay 0
;;
;;             meow-cursor-type-normal 'bar
;;             meow-cursor-type-beacon 'bar
;;             meow-cursor-type-insert 'box
;;             meow-cursor-type-keypad 'bar
;;             meow-cursor-type-motion 'bar
;;             meow-cursor-type-default 'bar
;;             meow-cursor-type-region-cursor 'bar
;;             )
;;
;;
;;       (setq meow-char-thing-table
;;             '((?r . round)
;;               (?s . square)
;;               (?c . curly)
;;               (?g . string)
;;               (?w . symbol)
;;               (?j . window)
;;               (?b . buffer)
;;               (?l . line)
;;               (?f . sentence)
;;               (?p . paragraph)
;;               (?d . defun)
;;               )
;;             )
;;
;;       (meow-motion-define-key
;;        '("e" . meow-next)
;;        '("," . meow-prev)
;;        '("<escape>" . ignore))
;;
;;       (meow-leader-define-key
;;        ;; SPC j/k will run the original command in MOTION state.
;;        '("e" . "H-e")
;;        '("," . "H-,")
;;        ;; Use SPC (0-9) for digit arguments.
;;        '("1" . meow-digit-argument)
;;        '("2" . meow-digit-argument)
;;        '("3" . meow-digit-argument)
;;        '("4" . meow-digit-argument)
;;        '("5" . meow-digit-argument)
;;        '("6" . meow-digit-argument)
;;        '("7" . meow-digit-argument)
;;        '("8" . meow-digit-argument)
;;        '("9" . meow-digit-argument)
;;        '("0" . meow-digit-argument)
;;        '("/" . meow-keypad-describe-key)
;;        '("?" . meow-cheatsheet)
;;
;;        '("f" . files-keymap)
;;        ;; '("p" . projectile-command-map)
;;        '("w" . window-keymap)
;;        '("b" . buffer-keymap)
;;        '("l" . language-keymap)
;;        '("o" . open-keymap)
;;        '("n" . org-keymap)
;;        '("s" . snippet-keymap)
;;        )
;;
;;
;;
;;       (meow-normal-define-key
;;
;;        '("0" . meow-expand-0)
;;        '("9" . meow-expand-9)
;;        '("8" . meow-expand-8)
;;        '("7" . meow-expand-7)
;;        '("6" . meow-expand-6)
;;        '("5" . meow-expand-5)
;;        '("4" . meow-expand-4)
;;        '("3" . meow-expand-3)
;;        '("2" . meow-expand-2)
;;        '("1" . meow-expand-1)
;;
;;        ;; '("-" . negative-argument)
;;        '("k" . meow-reverse)
;;
;;        '("r" . meow-inner-of-thing)
;;        '("R" . meow-bounds-of-thing)
;;        '("u" . meow-beginning-of-thing)
;;        '("o" . meow-end-of-thing)
;;
;;
;;        '("t" . meow-insert)
;;        '("T" . meow-append)
;;        '("N" . meow-open-above)
;;        '("n" . meow-open-below)
;;        '("c" . meow-change)
;;
;;        '("<deletechar>" . meow-delete)
;;        '("<backspace>" . meow-backward-delete)
;;
;;        '("." . meow-back-symbol)
;;        '(":" . meow-back-word)
;;        '("j" . meow-next-symbol)
;;        '("J" . meow-next-word)
;;
;;        '("F" . meow-find)
;;        ;; '("f" . meow-till)
;;        '("f" . boon-forward-search-map)
;;
;;        ;;'("gg" . meow-grab)
;;        ;;'("gq" . meow-pop-grab)
;;        ;;'("gs" . meow-swap-grab)
;;        ;;'("gv" . meow-sync-grab)
;;        '("g" . boon-goto-map)
;;
;;        ;; movement
;;        '("a" . meow-left)
;;        '("A" . meow-left-expand)
;;        '("e" . meow-next)
;;        '("E" . meow-next-expand)
;;        '("," . meow-prev)
;;        '(";" . meow-prev-expand)
;;        '("i" . meow-right)
;;        '("I" . meow-right-expand)
;;
;;        '("-" . boon-beginning-of-line)
;;        '("h" . boon-end-of-line)
;;
;;
;;        '("W" . meow-mark-word)
;;        '("w" . meow-mark-symbol)
;;        '("b" . meow-block)
;;        '("B" . meow-to-block)
;;
;;
;;
;;        ;;'("q" . meow-quit)
;;        ;;'("L" . meow-goto-line)
;;        ;;'("C" . meow-replace)
;;        '("d" . meow-kill)
;;        '("c" . meow-save)
;;        '("v" . meow-yank)
;;        '("s" . meow-change)
;;
;;        '("z" . meow-undo)
;;        '("C-z" . meow-undo-in-selection)
;;        '("Z" . undo-redo)
;;
;;        '("/" . meow-visit)
;;        '("]" . meow-search)
;;
;;
;;        '("l" . meow-line)
;;        '("L" . meow-join)
;;        ;;'("X" . meow-goto-line)
;;
;;        '("p" . meow-paste)
;;
;;        ;;'("q" . meow-cancel-selection)
;;        ;;'("q" . meow-pop-selection)
;;
;;        ;; '("m" . meow-kmacro)
;;        ;; '("M" . kmacro-call-macro)
;;        '("m" . cursors-keymap)
;;        '("M" . mc/mark-next-like-this)
;;        '("C-m" . mc/mark-previous-like-this)
;;
;;        '("'" . repeat)
;;        ;;'("<escape>" . ignore)
;;        '("<escape>" . meow-cancel-selection)
;;        '("RET" . boon-newline-dwim)
;;        )
;;
;;       )
;;
;;     ;;(meow-setup)
;;     ;;(meow-global-mode 1)
;;     )
#+end_src
* Keybindings
References for keybindings:
- https://github.com/doomemacs/doomemacs/blob/master/modules/config/default/%2Bemacs-bindings.el
- https://github.com/agzam/.doom.d/blob/main/config.el
** Indentation
#+begin_src emacs-lisp
  ;; Apply custom tab keybindings for indentation in specified major modes
  (dolist (mode '(prog-mode-hook yaml-mode-hook sql-mode-hook emacs-lisp-mode-hook))
    (add-hook mode
              (lambda ()
                (local-set-key (kbd "<tab>") #'tab-region)
                (local-set-key (kbd "<backtab>") #'my-rigid-indent-left))))

  ;; Additionally, set <backtab> in prog-mode globally as a fallback
  (define-key prog-mode-map (kbd "<backtab>") 'my-rigid-indent-left)



  (define-key indent-rigidly-map "i" 'indent-rigidly-right-to-tab-stop)
  (define-key indent-rigidly-map "a" 'indent-rigidly-left-to-tab-stop)
#+end_src
** Movement
#+begin_src emacs-lisp
(define-key help-mode-map (kbd ",")  #'previous-line)
(define-key help-mode-map (kbd "e")  #'next-line)


  (global-set-key (kbd "s-<left>")  'backward-word)         ; previous word
  (global-set-key (kbd "s-<right>") 'forward-word)          ; next word
  (global-set-key (kbd "C-<left>")  'move-beginning-of-line) ; beginning of line
  (global-set-key (kbd "C-<right>") 'move-end-of-line)      ; end of line


#+end_src
** Boon keybindings
*** Selecting
#+begin_src emacs-lisp

  ;; enclose
  (define-key boon-command-map "w" '("wrap around" . boon-enclose))
  ;; select
  (define-key boon-command-map "r" 'boon-drop-mark)
  (define-key boon-command-map "R" 'er/expand-region)

#+end_src
*** Boon Select map
#+begin_src emacs-lisp
  ;; selection map
  (define-key boon-select-map "q"  'boon-select-inside-quotes)
  (define-key boon-select-map "Q"  'boon-select-outside-quotes)


  (define-key boon-select-map "s"  'boon-select-wim) ;; symbol
  (define-key boon-select-map "S"  'boon-select-word)

  (define-key boon-select-map "v"  'boon-select-with-spaces)
  (define-key boon-select-map "w"  'boon-select-borders) ;; arouNd


  (define-key boon-select-map "L" 'boon-select-justline)
  (define-key boon-select-map "l"  'boon-select-line)

  (define-key boon-select-map "u"  'boon-select-to-beginning-region) ;; To beginning
  (define-key boon-select-map "o"  'boon-select-to-end-region) ;; To end

  (define-key boon-select-map "r"  'boon-select-inside-pairs) ;; Contents (->xx<-)
  (define-key boon-select-map "R"  'boon-select-outside-pairs) ;; eXpression ->(xx)<-

  (define-key boon-select-map "d"  'boon-select-defun)
  (define-key boon-select-map "c"  'boon-select-comment)
  (define-key boon-select-map "f" 'boon-select-sentence)
  (define-key boon-select-map "p"  'boon-select-paragraph)
  (define-key boon-select-map "b"  'boon-select-document) ;; buffer

  ;; (define-key boon-select-map "z"  'boon-select-content) ;; inZide
  ;; (define-key boon-select-map "b"  'boon-select-blanks) ;; blanKs

  (define-key boon-select-map "@"  'boon-select-occurences)
  (define-key boon-select-map "*"  'boon-select-word-occurences)
  (define-key boon-select-map "#"  'boon-select-all)
  (define-key boon-select-map  "\"" 'boon-select-to-mark)

  ;; TODO remove these
  ;; (define-key boon-select-map " "  'boon-select-line)
  ;; (define-key boon-select-map  "\"" 'boon-select-outside-quotes)
#+end_src
*** Boon special map (special modes)
#+begin_src emacs-lisp
  ;; (define-key boon-special-map "e" 'next-line)
  ;; (define-key boon-special-map "," 'previous-line)

  (define-key boon-special-map "$" 'boon-quote-character)

  (define-key boon-special-map "x" nil)
#+end_src
*** Moving
#+begin_src emacs-lisp
        ;; moving

        (define-key boon-moves-map "a"  'backward-char)
        (define-key boon-moves-map "i"  'forward-char)
        (define-key boon-moves-map ","  'previous-line)
        (define-key boon-moves-map "e"  'next-line)

        (define-key boon-moves-map ";"  'my/jump-up)
        (define-key boon-moves-map "E"  'my/jump-down)

        (define-key boon-moves-map "-"  'boon-beginning-of-line)
        (define-key boon-command-map "-" 'boon-beginning-of-line)


        (define-key boon-moves-map "h"  'boon-end-of-line)
        (define-key boon-moves-map "_"  'beginning-of-buffer)
        (define-key boon-moves-map "H"  'end-of-buffer)

        (define-key boon-command-map (kbd "C-e") 'scroll-up-line)
        (define-key boon-command-map (kbd "C-,") 'scroll-down-line)

        (define-key boon-moves-map "."  'boon-smarter-backward) ;; back by dwim (symbol or exp)
        (define-key boon-moves-map "j"  'boon-smarter-forward) ;; forward by dwim (symbol or exp)
        (define-key boon-moves-map ":" 'backward-symbol)
        (define-key boon-moves-map "J" 'forward-symbol)
        ;; (define-key boon-moves-map "K"  'boon-smarter-upward)
        ;; (define-key boon-moves-map "L"  'boon-smarter-downward)
        (define-key boon-moves-map "u"  'boon-beginning-of-expression)
        (define-key boon-moves-map "o"  'boon-end-of-expression)
        ;; (define-key boon-moves-map "h"  '("hop" . avy-goto-word-1))
        ;; (define-key boon-moves-map "H"  'avy-goto-char)



        ;; jumping

        (define-key boon-moves-map "y" '("noon walk" . boon-switch-mark))
        (define-key boon-command-map "y" '("noon walk" . boon-switch-mark))

        (define-key boon-moves-map "'" 'consult-register-load)
        (define-key boon-moves-map "\"" 'consult-register-store)
        (define-key boon-moves-map "C-'" 'consult-register)

        (define-key boon-command-map "'" 'consult-register-load)
        (define-key boon-command-map "\"" 'consult-register-store)
        (define-key boon-command-map "C-'" 'consult-register)

#+end_src
*** Searching
#+begin_src emacs-lisp

   ;; lookup doom:
   ;;       :desc "Dictionary"                   "t" #'+lookup/dictionary-definition
   ;;       :desc "Thesaurus"                    "T" #'+lookup/synonyms)
     ;; (define-key boon-moves-map "f" 'boon-find-char-forward)
     ;; (define-key boon-moves-map "F" 'boon-find-char-backward)

     ;;(define-key boon-moves-map "N" 'xref-pop-marker-stack)

     ;;(define-key boon-moves-map "y"  '("fYnd" . xref-find-definitions))
     ;;(define-key boon-moves-map "Y"  'xref-find-references)

     ;; where is? elsewhere?
     (define-key boon-moves-map "f" '("elsewhere?" . boon-forward-search-map))
     (define-key boon-moves-map "F" '("where was?" . boon-backward-search-map))

     (define-key boon-forward-search-map "f" 'boon-find-char-forward)
     (define-key boon-forward-search-map "F" 'boon-find-char-backward)

     (define-key boon-forward-search-map "r" 'consult-ripgrep)
     (define-key boon-forward-search-map "g" 'consult-grep)



     ;;(define-key boon-moves-map "W"  'boon-qsearch-previous)
     ;;(define-key boon-moves-map "E"  'boon-qsearch-next)

     ;; r
     ;;(define-key boon-command-map "r" '("occuR" . occur))

     ;; Misc crap
     ;;(define-key boon-command-map "m" 'kmacro-start-macro) ; Record
     ;;(define-key boon-command-map "M" 'kmacro-end-or-call-macro) ; Play
     ;;(define-key boon-command-map "X" 'boon-highlight-regexp)

     ;; t

  ;; goto
     (define-key boon-command-map "g" '("goto" . boon-goto-map))

#+end_src
*** Boon Goto map
#+begin_src emacs-lisp
  ;; (define-key boon-goto-map "l" 'consult-goto-line)
  (define-key boon-goto-map "l" 'avy-goto-line)
  (define-key boon-goto-map "f" 'consult-line)
  (define-key boon-goto-map "F" 'consult-line-multi)
  (define-key boon-goto-map "c" 'avy-goto-char-timer)

  (define-key boon-goto-map "o" 'consult-outline)
  (define-key boon-goto-map "i" 'consult-imenu)
  (define-key boon-goto-map "I" 'consult-imenu-multi)
  (define-key boon-goto-map "m" 'consult-info) ;; Manual

  (define-key boon-goto-map "h" 'consult-org-heading)
  (define-key boon-goto-map "k" 'consult-keep-lines)
  (define-key boon-goto-map "u" 'consult-keep-lines)

  (define-key boon-goto-map "o" 'consult-outline)
  (define-key boon-goto-map "a" 'consult-org-agenda)

  (define-key boon-goto-map "s" 'consult-lsp-file-symbols)
  (define-key boon-goto-map "S" 'consult-lsp-symbols)

  (define-key boon-goto-map "g" 'lsp-find-definition)
  (define-key boon-goto-map "G" 'lsp-ui-peek-find-definition)
  (define-key boon-goto-map "r" 'lsp-find-references)
  (define-key boon-goto-map "R" 'lsp-ui-peek-find-definition)
  ;; (define-key boon-goto-map "C-r" 'lsp-treemacs-references)

  (define-key boon-goto-map "[" ''better-jumper-jump-backward)
  (define-key boon-goto-map "]" ''better-jumper-jump-forward)

  (define-key boon-goto-map "'" 'consult-mark)
  (define-key boon-goto-map "\"" 'consult-global-mark)
#+end_src
*** Edition
#+begin_src emacs-lisp
    (define-key boon-command-map "s" '("substitute" . boon-substitute-region))

    (define-key boon-command-map "t" '("t looks like an insert mark" . boon-set-insert-like-state))
    (define-key boon-command-map "T" '("transform" . boon-replace-by-character))

    (define-key boon-command-map "N" 'boon-open-line-and-insert)
    (define-key boon-command-map "n" 'boon-open-next-line-and-insert)
#+end_src
*** Multiple cursors
#+begin_src emacs-lisp

    (define-key boon-command-map "m" 'cursors-keymap)
    (define-key boon-command-map "M" 'mc/mark-next-like-this)
    (define-key boon-command-map (kbd "C-m") 'mc/mark-previous-like-this)

#+end_src
*** Copy/paste/etc
#+begin_src emacs-lisp

    (define-key boon-command-map "d" '("delete" . boon-take-region)) ;; "delete"
    (define-key boon-command-map "c" 'boon-treasure-region) ;; "copy"

    (define-key boon-command-map "v" '("fetch" . boon-splice))
    (define-key boon-command-map "V" 'yank-pop)

#+end_src
*** Commands
#+begin_src emacs-lisp
  ;; Bottom row
  ;; z
  (define-key boon-command-map "z" '("undo" . vundo))
  (define-key boon-command-map "Z" '("redo" . undo-redo))
  ;; (define-key boon-command-map "z" '("repeat" . boon-repeat-command))

  ;; keybinding starters
  ;; (define-key boon-command-map " " 'boon-c-god)
  (define-key boon-command-map "x" 'boon-x-map)


  ;; (define-key boon-command-map "$" 'boon-toggle-case)

  ;; (define-key boon-command-map "$" '("quote" . boon-quote-character)) ;; uses command that would be used by character
  ;; b
  ;;(define-key boon-command-map "B" 'boon-copy-to-register) ; bank
  ;;(define-key boon-command-map "b" 'insert-register)


  (define-key boon-command-map (kbd "DEL") 'delete-backward-char)
  (define-key boon-command-map (kbd "<delete>") 'delete-forward-char)
  (define-key boon-command-map (kbd "RET") 'boon-newline-dwim)
#+end_src
*** Cursors Key map (for boon) - make it a hydra
#+begin_src emacs-lisp
    ;; code utils

    (global-set-key (kbd "C-c ;") 'comment-line)

    (defvar cursors-keymap
      (let ((keymap (make-keymap)))
        (define-key keymap (kbd "m") #'mc/edit-lines) ;; "Edit lines"
        (define-key keymap (kbd "e") #'mc/mark-next-like-this) ;; "Mark next"
        (define-key keymap (kbd "E") #'mc/unmark-next-like-this) ;; "Unmark next"
        (define-key keymap (kbd ",") #'mc/mark-previous-like-this) ;; "Mark previous"
        (define-key keymap (kbd ";") #'mc/unmark-previous-like-this) ;; "Unmark previous"
        (define-key keymap (kbd "T") #'mc/mark-all-like-this) ;; "Mark all"
        (define-key keymap (kbd "t") #'mc/mark-all-like-this-dwim) ;; "Mark all DWIM"
        (define-key keymap (kbd "i") #'mc/edit-ends-of-lines) ;; "Edit line endings"
        (define-key keymap (kbd "a") #'mc/edit-beginnings-of-lines) ;; "Edit line starts"
        (define-key keymap (kbd "g") #'mc/mark-sgml-tag-pair) ;; "Mark tag"
        (define-key keymap (kbd "f") #'mc/mark-all-in-region) ;; "Prompts for a string to match in the region, adding cursors to all of them."
        (define-key keymap (kbd "d") #'mc/mark-all-like-this-in-defun) ;; "Mark in defun"
        (define-key keymap (kbd "<mouse-1>") #'mc/add-cursor-on-click) ;;   :desc "Add cursor w/mouse"
        (define-key keymap (kbd "o a)")  #'mc/sort-regions) ;;      "Sort the marked regions alphabetically."
        (define-key keymap (kbd "o r")   #'mc/reverse-regions) ;;   "Reverse the order of the marked regions."

        (define-key keymap (kbd "v")   #'my/yank-multiple-cursors) ;;   "Yank the last multiple cursors copy"

        (define-key keymap (kbd "l")   #'mc/mark-more-like-this-extented) ;;   "Select lines up and down and skip"
        (define-key keymap (kbd "n")   #'mc-hide-unmatched-lines-mode) ;; narrow unmatched lines
        (define-key keymap (kbd "'")   #'mc/mark-pop)

        keymap))

    (defalias 'cursors-keymap cursors-keymap)
#+end_src
** Leader
*** Files keymap
#+begin_src emacs-lisp

(defun yank-buffer-path (&optional root)
  "Copy the current buffer's path to the kill ring. Taken from Doom bindings"
  (interactive)
  (if-let* ((filename (or (buffer-file-name (buffer-base-buffer))
                          (bound-and-true-p list-buffers-directory))))
      (let ((path (abbreviate-file-name
                   (if root
                       (file-relative-name filename root)
                     filename))))
        (kill-new path)
        (if (string= path (car kill-ring))
            (message "Copied path: %s" path)
          (user-error "Couldn't copy filename in current buffer")))
    (error "Couldn't find filename in current buffer")))

;; files

(defvar files-keymap
  (let ((keymap (make-keymap)))

    (define-key keymap (kbd "f") #'find-file)
    (define-key keymap (kbd "r") #'consult-recent-file)


    (define-key keymap (kbd "s") #'save-buffer)
    (define-key keymap (kbd "S") #'save-some-buffers)

    (define-key keymap (kbd "d") #'dired)
    (define-key keymap (kbd "j") #'dired-jump)

    (define-key keymap (kbd "y") #'yank-buffer-path)
    ;; (define-key keymap (kbd "yp") #'my/copy-file-path-in-project)
    ;; (define-key keymap (kbd "yy") #'my/kill-buffer-file-name-nondirectory)




       ;; :desc "Open project editorconfig"  "c"   #'editorconfig-find-current-editorconfig)
       ;; :desc "Copy this file"              "C"   #'doom/copy-this-file
       ;; :desc "Find directory"              "d"   #'dired
       ;; :desc "Delete this file"            "D"   #'doom/delete-this-file
       ;; :desc "Find file in emacs.d"        "e"   #'doom/find-file-in-emacsd
       ;; :desc "Browse emacs.d"              "E"   #'doom/browse-in-emacsd
       ;; :desc "Find file"                   "f"   #'find-file
       ;; :desc "Find file from here"         "F"   #'+default/find-file-under-here
       ;; :desc "Locate file"                 "l"   #'locate
       ;; :desc "Rename/move this file"       "m"   #'doom/move-this-file
       ;; :desc "Find file in private config" "p"   #'doom/find-file-in-private-config
       ;; :desc "Browse private config"       "P"   #'doom/open-private-config
       ;; :desc "Recent files"                "r"   #'recentf-open-files
       ;; :desc "Recent project files"        "R"   #'projectile-recentf
       ;; :desc "Sudo this file"              "u"   #'doom/sudo-this-file
       ;; :desc "Sudo find file"              "U"   #'doom/sudo-find-file
       ;; :desc "Yank file path"              "y"   #'+default/yank-buffer-path
       ;; :desc "Yank file path from project" "Y"   #'+default/yank-buffer-path-relative-to-project
       ;; :desc "Open scratch buffer"         "x"   #'doom/open-scratch-buffer
       ;; :desc "Switch to scratch buffer"    "X"   #'doom/switch-to-scratch-buffer
    keymap))

;; define an alias for your keymap
(defalias 'files-keymap files-keymap)
;; (global-set-key (kbd "C-c f") 'files-keymap)


#+end_src
*** Project keymap (currently just projectile-command-map)
#+begin_src emacs-lisp
  ;; project

  ;; (defvar project-keymap
  ;;   (let ((keymap (make-keymap)))

  ;;     (define-key keymap (kbd "d") #'projectile-find-dir)
  ;;     (define-key keymap (kbd "p") #'projectile-switch-project)
  ;;     (define-key keymap (kbd "b") #'projectile-switch-to-buffer) ;; maybe put in buffer keymap
  ;;     (define-key keymap (kbd "f") #'projectile-find-file)
  ;;     (define-key keymap (kbd "g") #'projectile-ripgrep) ;; ripgrep is faster than grep
  ;;     (define-key keymap (kbd "r") #'projectile-recentf)


  ;;     keymap))

  ;; (defalias 'project-keymap project-keymap)

  ;; replacing projectile-find-file for project-find-file
  ;; it's not working with dirvish peek mode now
  ;; (define-key projectile-command-map (kbd "f") #'project-find-file)

  ;; (define-key projectile-command-map (kbd "<escape>") nil)
  ;; (define-key projectile-command-map (kbd "ESC") nil)
  ;; (global-set-key (kbd "C-c p") 'projectile-command-map)


#+end_src
*** Windows keymap
#+begin_src emacs-lisp
  (defvar window-keymap
    (let ((keymap (make-keymap)))
      (define-key keymap (kbd "w") #'ace-window)
      (define-key keymap (kbd "s") #'ace-swap-window)

      (define-key keymap (kbd "ff") #'other-frame)
      (define-key keymap (kbd "fn") #'make-frame)
      (define-key keymap (kbd "fk") #'delete-frame)
      (define-key keymap (kbd "fK") #'delete-other-frames)

      (define-key keymap (kbd "u") #'winner-undo)
      (define-key keymap (kbd "r") #'winner-redo)
      (define-key keymap (kbd "h") #'split-window-below)
      (define-key keymap (kbd "v") #'split-window-right)
      (define-key keymap (kbd "k") #'delete-window)
      (define-key keymap (kbd "K") #'delete-other-windows)
      keymap))

  ;; define an alias for your keymap
  (defalias 'window-keymap window-keymap)
  ;; (global-set-key (kbd "C-c w") 'window-keymap)
  ;;(global-set-key (kbd "C-x C-w") 'window-keymap)

#+end_src
*** Buffers keymap
#+begin_src emacs-lisp
(defvar buffer-keymap
  (let ((keymap (make-keymap)))
    (define-key keymap (kbd "b") #'consult-buffer)
    (define-key keymap (kbd "l") #'bufler-sidebar) ;; buffer list
    (define-key keymap (kbd "p") #'consult-project-buffer)
    (define-key keymap (kbd "c") #'clone-indirect-buffer)
    (define-key keymap (kbd "C") #'clone-indirect-buffer-other-window)
    (define-key keymap (kbd "k") (lambda () (interactive) (kill-buffer (current-buffer))))
    (define-key keymap (kbd "K") #'kill-buffer)
    (define-key keymap (kbd ".") #'mode-line-other-buffer)
    (define-key keymap (kbd "e") #'next-buffer)
    (define-key keymap (kbd ",") #'previous-buffer)
    (define-key keymap (kbd "s") #'scratch-buffer)
    (define-key keymap (kbd "m") #'switch-to-minibuffer)
    (define-key keymap (kbd "t") #'tab-bar-switch-to-tab) ;; TODO fix this
    (define-key keymap (kbd "f") #'consult-buffer-other-frame)
    (define-key keymap (kbd "w") #'consult-buffer-other-window)

    keymap))

;; define an alias for your keymap
(defalias 'buffer-keymap buffer-keymap)
;; (global-set-key (kbd "C-c b") 'buffer-keymap)
#+end_src
*** Language keymap
#+begin_src emacs-lisp
    (defvar language-keymap
      (let ((keymap (make-keymap)))
        (define-key keymap (kbd "w") 'wiktionary-search-word)
        (define-key keymap (kbd "t") 'gt-do-translate)
        ;; (define-key keymap (kbd "c") 'ispell-word)
        (define-key keymap (kbd "c") 'flyspell-popup-correct)
        (define-key keymap (kbd "C") 'my/cycle-ispell-languages)
        keymap))

  (defalias 'language-keymap language-keymap)
#+end_src
*** Snippets keymap
#+begin_src emacs-lisp
  (defvar snippet-keymap
    (let ((keymap (make-keymap)))
      (define-key keymap (kbd "n") 'yas-new-snippet)
      (define-key keymap (kbd "i") 'yas-insert-snippet)
      (define-key keymap (kbd "/") 'yas-visit-snippet-file)
      (define-key keymap (kbd "r") 'yas-reload-all)
      (define-key keymap (kbd "<tab>") 'yas-expand)
      keymap))

(defalias 'snippet-keymap snippet-keymap)


#+end_src
*** Code keymap
#+begin_src emacs-lisp
  ;; ;;; <leader> c --- code
  ;;     (:prefix-map ("c" . "code")
  ;;      :desc "Compile"                               "c"   #'compile
  ;;      :desc "Recompile"                             "C"   #'recompile
  ;;      :desc "Jump to definition"                    "d"   #'+lookup/definition
  ;;      :desc "Jump to references"                    "D"   #'+lookup/references
  ;;      :desc "Evaluate buffer/region"                "e"   #'+eval/buffer-or-region
  ;;      :desc "Evaluate & replace region"             "E"   #'+eval/region-and-replace
  ;;      :desc "Format buffer/region"                  "f"   #'+format/region-or-buffer
  ;;      :desc "Find implementations"                  "i"   #'+lookup/implementations
  ;;      :desc "Jump to documentation"                 "k"   #'+lookup/documentation
  ;;      :desc "Send to repl"                          "s"   #'+eval/send-region-to-repl
  ;;      :desc "Find type definition"                  "t"   #'+lookup/type-definition
  ;;      :desc "Delete trailing whitespace"            "w"   #'delete-trailing-whitespace
  ;;      :desc "Delete trailing newlines"              "W"   #'doom/delete-trailing-newlines
  ;;      :desc "List errors"                           "x"   #'+default/diagnostics
  ;;      (:when (modulep! :tools lsp -eglot)
  ;;       :desc "LSP Code actions"                      "a"   #'lsp-execute-code-action
  ;;       :desc "LSP Organize imports"                  "o"   #'lsp-organize-imports
  ;;       :desc "LSP Rename"                            "r"   #'lsp-rename
  ;;       :desc "LSP"                                   "l"   #'+default/lsp-command-map
  ;;       (:when (modulep! :completion ivy)
  ;;        :desc "Jump to symbol in current workspace" "j"   #'lsp-ivy-workspace-symbol
  ;;        :desc "Jump to symbol in any workspace"     "J"   #'lsp-ivy-global-workspace-symbol)
  ;;       (:when (modulep! :completion helm)
  ;;        :desc "Jump to symbol in current workspace" "j"   #'helm-lsp-workspace-symbol
  ;;        :desc "Jump to symbol in any workspace"     "J"   #'helm-lsp-global-workspace-symbol)
  ;;       (:when (modulep! :completion vertico)
  ;;        :desc "Jump to symbol in current workspace" "j"   #'consult-lsp-symbols
  ;;        :desc "Jump to symbol in any workspace"     "J"   (cmd!! #'consult-lsp-symbols 'all-workspaces))
  ;;       (:when (modulep! :ui treemacs +lsp)
  ;;        :desc "Errors list"                         "X"   #'lsp-treemacs-errors-list
  ;;        :desc "Incoming call hierarchy"             "y"   #'lsp-treemacs-call-hierarchy
  ;;        :desc "Outgoing call hierarchy"             "Y"   (cmd!! #'lsp-treemacs-call-hierarchy t)
  ;;        :desc "References tree"                     "R"   (cmd!! #'lsp-treemacs-references t)
  ;;        :desc "Symbols"                             "S"   #'lsp-treemacs-symbols))
  ;;      (:when (modulep! :tools lsp +eglot)
  ;;       :desc "LSP Execute code action"              "a" #'eglot-code-actions
  ;;       :desc "LSP Rename"                           "r" #'eglot-rename
  ;;       :desc "LSP Find declaration"                 "j" #'eglot-find-declaration
  ;;       (:when (modulep! :completion vertico)
  ;;        :desc "Jump to symbol in current workspace" "j" #'consult-eglot-symbols)))
#+end_src
*** Open keymap
#+begin_src emacs-lisp
  (defvar open-keymap
    (let ((keymap (make-keymap)))
      (define-key keymap (kbd "f") #'dirvish-dwim)
      (define-key keymap (kbd "F") #'dirvish)
      ;; (define-key keymap (kbd "p") #'treemacs)
      (define-key keymap (kbd "p") #'dirvish-side)

      (define-key keymap (kbd "g") #'magit-status)
      (define-key keymap (kbd "G") #'magit-dispatch)

      (define-key keymap (kbd "b") #'consult-bookmark)
      (define-key keymap (kbd "B") #'list-bookmarks)
      (define-key keymap (kbd "C-b") #'bookmark-set)

      (define-key keymap (kbd "l") #'org-store-link)
      (define-key keymap (kbd "c") #'calendar)

      (define-key keymap (kbd "s") #'deadgrep)

      (define-key keymap (kbd "aa") 'gptel)
      (define-key keymap (kbd "ac") 'gptel-add)
      (define-key keymap (kbd "am") 'gptel-menu)
      (define-key keymap (kbd "as") 'gptel-send)
      (define-key keymap (kbd "as") 'my/gptel-send-universal)
      (define-key keymap (kbd "a<tab>") 'copilot-complete)

      (define-key keymap (kbd "t") 'vterm-toggle)
      ;; (define-key keymap (kbd "T") 'vterm-toggle-cd)
      (define-key keymap (kbd "T") 'vterm-toggle-insert-cd)


      keymap))

  (defalias 'open-keymap open-keymap)

#+end_src
*** Quick access keymap
#+begin_src emacs-lisp
        (defvar quick-access-keymap
          (let ((keymap (make-keymap)))
            (define-key keymap (kbd "c") #'my/open-config)
            (define-key keymap (kbd "w") #'my/open-work-org)

            keymap))

        (defalias 'quick-access-keymap quick-access-keymap)
#+end_src
*** Org keymap
#+begin_src emacs-lisp
  (defvar org-keymap
    (let ((keymap (make-keymap)))


      (define-key keymap (kbd "l") #'org-store-link)
      (define-key keymap (kbd "a") #'org-agenda)
      (define-key keymap (kbd "n") #'org-capture)
      (define-key keymap (kbd "s") #'org-schedule)
      (define-key keymap (kbd "t") #'org-todo)

      ;; roam
      ;; (define-key keymap (kbd "ra") #'org-roam-node-random) ;;  "Open random node"
      (define-key keymap (kbd "rf") #'org-roam-node-find) ;;  "Find node"
      (define-key keymap (kbd "rF") #'org-roam-ref-find) ;;  "Find ref"
      (define-key keymap (kbd "rg") #'org-roam-graph) ;;  "Show graph"
      (define-key keymap (kbd "ri") #'org-roam-node-insert) ;;  "Insert node"
      (define-key keymap (kbd "rn") #'org-roam-capture) ;;  "Capture to node"
      (define-key keymap (kbd "rr") #'org-roam-buffer-toggle) ;;  "Toggle roam buffer"
      (define-key keymap (kbd "rR") #'org-roam-buffer-display-dedicated) ;;  "Launch roam buffer"
      (define-key keymap (kbd "rs") #'org-roam-db-sync) ;;  "Sync database"


      keymap))

  (defalias 'org-keymap org-keymap)
#+end_src
*** Leader keymap
#+begin_src emacs-lisp
  (defvar keybindings-keymap
    (let ((keymap (make-keymap)))
      (define-key keymap (kbd "c") #'boon-c-god)
      (define-key keymap (kbd "x") #'boon-x-map)

      (define-key keymap (kbd "f") #'files-keymap)
      (define-key keymap (kbd "p") #'projectile-command-map)
      (define-key keymap (kbd "w") #'window-keymap)
      (define-key keymap (kbd "b") #'buffer-keymap)
      (define-key keymap (kbd "l") #'language-keymap)
      (define-key keymap (kbd "o") #'open-keymap)
      (define-key keymap (kbd "n") #'org-keymap)
      (define-key keymap (kbd "s") #'snippet-keymap)
      (define-key keymap (kbd "/") #'quick-access-keymap)



      keymap))

  ;; define an alias for your keymap

  (defalias 'keybindings-keymap keybindings-keymap)

  ;; ctrl-space for keybindings
  ;; (global-set-key (kbd "M-SPC") 'keybindings-keymap)
  ;; (define-key vterm-mode-map (kbd "M-SPC") 'keybindings-keymap)

  ;; (define-key dashboard-mode-map (kbd "SPC") 'keybindings-keymap)
  ;; (define-key dirvish-mode-map (kbd "SPC") 'keybindings-keymap)
#+end_src
** Hydra
*** Leader Hydras
**** Files Hydra
#+begin_src emacs-lisp
(pretty-hydra-define hydra-files
  (:color blue :hint nil :title "Files" :foreign-keys warn)
  ("Files"
   (("f" find-file "Find file")
    ("d" dired "Dired")
    ("r" consult-recent-file "Recent files")
    ("s" save-buffer "Save buffer")
    ("S" save-some-buffers "Save some")
    ("y" yank-buffer-path "Yank buffer path")
    ("q" nil "Quit")
    ("<escape>" nil "Quit"))))
#+end_src
**** Windows Hydra
#+begin_src emacs-lisp
  (pretty-hydra-define hydra-windows
    (:color blue :hint nil :title "Windows" :foreign-keys warn)
    (
     "Change"
     (("w" ace-window "Ace window")
      ("s" ace-swap-window "Swap window"))
     "Split"
     (("h" split-window-below "Split below")
      ("v" split-window-right "Split right"))
     "Delete"
     (("k" delete-window "Delete window")
      ("m" delete-other-windows "Maximise"))
     "Exit"
     (("q" nil "Quit")
      ("<escape>" nil "Quit"))))
#+end_src
**** Buffers Hydra
#+begin_src emacs-lisp
(pretty-hydra-define hydra-buffers
  (:color blue :hint nil :title "Buffers" :foreign-keys warn)
  ("Switching"
   (("b" consult-buffer         "Consult")
    ("B" bufler-sidebar         "Bufler sidebar")
    ("p" consult-project-buffer "Project buffers")
    ("m" switch-to-minibuffer   "Minibuffer"))
   "Navigation"
   (("," previous-buffer        "Previous buffer" :color red)
    ("e" next-buffer           "Next buffer" :color red)
    ("." mode-line-other-buffer "Other buffer"))
   "Actions"
   (("k" (lambda () (interactive) (kill-buffer (current-buffer))) "Kill current" :color red)
    ("K" kill-buffer           "Kill any")
    ("s" scratch-buffer        "*Scratch*")
    ("c" clone-indirect-buffer "Clone buffer")
    ("C" clone-indirect-buffer-other-window "Clone (other window)"))
   "Display"
   (("f" consult-buffer-other-frame  "Other frame")
    ("w" consult-buffer-other-window "Other window"))
   "Exit"
   (("q" nil "quit")
    ("<escape>" nil "quit"))))
#+end_src
**** Open Hydra
#+begin_src emacs-lisp
  (pretty-hydra-define hydra-open
    (:color blue :hint nil :title "Open" :foreign-keys warn)
    ("Files"
     (("f" dirvish "Dirvish")
      ("p" dirvish-side "Dirvish side"))
      "Git"
      (("g" magit-status "Magit")
      ("G" magit-dispatch "Magit dispatch"))
      "Terminal"
      (("s" deadgrep "Deadgrep")
      ("t" vterm-toggle "VTerm"))
      "Bookmark"
      (("b" consult-bookmark "Bookmark")
      ("B" list-bookmarks "Bookmarks list")
      ("C-b" bookmark-set "Bookmark set"))
      "Calendar"
      (("c" calendar "Calendar"))
      "GPTel"
      (("aa" gptel "GPTel")
      ("as" my/gptel-send-universal "GPTel send")
      ("acc" my/gptel-context-add-buffer "GPTel context add buffer")
      ("acf" my/gptel-context-add-file "GPTel context add file")
      ("acr" gptel-context-remove-all "GPTel context remove")
      ("am" gptel-menu "GPTel menu")
      ("at" copilot-complete "Copilot Suggestion")
      )
      "Exit"
      (("q" nil "Quit")
      ("<escape>" nil "Quit"))))
#+end_src
**** Notes Hydra
   ;; Define some convenient keybindings as an addition
   ("C-c n e" . consult-org-roam-file-find)
   ("C-c n b" . consult-org-roam-backlinks)
   ("C-c n B" . consult-org-roam-backlinks-recursive)
   ("C-c n l" . consult-org-roam-forward-links)
   ("C-c n r" . consult-org-roam-search)
#+begin_src emacs-lisp
  (pretty-hydra-define hydra-notes
    (:color blue :hint nil :title "Org" :foreign-keys warn)
    ("Org"
     (("a" org-agenda "Agenda")
      ("n" org-capture "Capture")
      ("s" org-schedule "Schedule")
      ("t" org-todo "Todo"))
      "Roam"
      (("rn" org-roam-capture "Roam Capture")
      ("rf" org-roam-node-find "Roam Find")
      ("ri" org-roam-node-insert "Roam Insert")
      ("rt" org-roam-tag-add "Roam add tag")
      ("rT" org-roam-tag-remove "Roam remove tag"))
      "Roam Navigate"
      (("rr" org-roam-buffer-toggle "Roam Buffer Toggle")
      ("rb" consult-org-roam-backlinks "Roam Backlinks")
      ("rb" consult-org-roam-backlinks-recursive "Roam Backlinks Recursive")
      ("rl" consult-org-roam-forward-links "Roam Forward Links")
      ("rg" org-roam-graph "Roam graph")
      ("rs" org-roam-db-sync "Roam sync database"))
      "Roam Bibliography"
      (("bb" helm-bibtex "Bibtex")
      ("be" zotra-add-entry "Ref Entry")
      ("bi" orb-insert-link "Roam link ref")
      ("ba" orb-note-actions "Roam bibtex actions")
      )
      "Exit"
      (("q" nil "Quit")
      ("<escape>" nil "Quit"))))
#+end_src
**** Language Hydra
#+begin_src emacs-lisp
(pretty-hydra-define hydra-lang
  (:color blue :hint nil :title "Language/Spelling" :foreign-keys warn)
  ("Dictionary/Translation"
   (("dw" engine/search-wiktionary "Wiktionary")
    ("dg" gt-do-translate "Google Translate"))
    "Spelling"
    (("l" flyspell-popup-correct "Spell correct")
    ("s" my/cycle-ispell-languages "Cycle language"))
    "Exit"
    (("q" nil "Quit")
    ("<escape>" nil "Quit"))))
#+end_src

**** Snippet Hydra
#+begin_src emacs-lisp
(pretty-hydra-define hydra-snippet
  (:color blue :hint nil :title "Snippets" :foreign-keys warn)
  ("Snippets"
   (("n" yas-new-snippet "New snippet")
    ("i" yas-insert-snippet "Insert snippet")
    ("/" yas-visit-snippet-file "Visit snippet file")
    ("r" yas-reload-all "Reload snippets")
    ("q" nil "Quit")
    ("<escape>" nil "Quit"))))
#+end_src
**** Project Hydra
#+begin_src emacs-lisp
(pretty-hydra-define hydra-project
  (:color blue :hint nil :title "Project" :foreign-keys warn)
  ("Project"
   (("d" projectile-find-dir "Find dir")
    ("p" projectile-switch-project "Switch project")
    ("f" project-find-file "Find file")
    ("g" deadgrep "Deadgrep"))
    "Exit"
    (("q" nil "Quit")
    ("<escape>" nil "Quit"))))
#+end_src

**** Quick access Hydra
#+begin_src emacs-lisp
(pretty-hydra-define hydra-quick-access
  (:color blue :hint nil :title "Quick Access" :foreign-keys warn)
  ("Quick Access"
   (("c" my/open-config "Open config")
    ("w" my/open-work-org "Work Org")
    ("a" my/open-personal-agenda-org "Agenda")
    ("b" my/open-bibtex "Bibtex")
    ("e" my/open-ephemerous-notes "Notas efêmeras")
    ("s" scratch-buffer "Scratch"))
    "Exit"
    (("q" nil "Quit")
    ("<escape>" nil "Quit"))))
#+end_src
**** Code Hydra
#+begin_src emacs-lisp
  (pretty-hydra-define hydra-code
    (:color blue :hint nil :title "Code" :foreign-keys warn)
    ("LISP"
     (("k" eval-region "Eval LISP region")
      ("K" eval-last-sexp "Eval LISP sEXP")
      ("C-k" eval-expression "Eval LISP custom")
      )

      "Exit"
      (("q" nil "Quit")
      ("<escape>" nil "Quit"))))
#+end_src
**** Leaderkey Hydra
#+begin_src emacs-lisp
  (pretty-hydra-define hydra-leader
    (:color blue :hint nil :title "Leader" :foreign-keys warn)
    ("Leader"
     (("f" hydra-files/body "Files")
      ("w" hydra-windows/body "Windows")
      ("b" hydra-buffers/body "Buffers")
      ("p" hydra-project/body "Project")
      ("o" hydra-open/body "Open")
      ("n" hydra-notes/body "Notes")

      ("l" hydra-lang/body "Language")
      ("k" hydra-code/body "Language")
      ("s" hydra-snippet/body "Snippet")
      ("c" boon-c-god "C-c")
      ("'" hydra-quick-access/body "Quick access")
      )

    "Hydra"
    (("<SPC>" my/hydra-from-major-mode "Major Mode Hydra"))

    "Exit"
    (("q" nil "Quit")
     ("<escape>" nil "Quit"))))
#+end_src
*** Leader binding
#+begin_src emacs-lisp
;; Set the leader key
  (global-set-key (kbd "M-SPC") #'hydra-leader/body)
  ;; (define-key vterm-mode-map (kbd "M-SPC") #'hydra-leader/body)

  (define-key boon-command-map " " #'hydra-leader/body)
  (define-key dashboard-mode-map (kbd "SPC") #'hydra-leader/body)
  (define-key dirvish-mode-map (kbd "SPC") #'hydra-leader/body)
  (define-key org-agenda-mode-map (kbd "SPC") #'hydra-leader/body)
#+end_src
*** Major modes
**** Org
#+begin_src emacs-lisp
  (pretty-hydra-define hydra-org
    (:color amaranth :hint nil :title "Files" :foreign-keys warn)
    ("Moving"
     (
      ("e" next-line "next line")
      ("," previous-line "previous line")

      ("E" org-next-visible-heading "next visible heading")
      (";" org-previous-visible-heading "previous visible heading")

      ("C-e" org-forward-heading-same-level "next heading of same level")
      ("C-," org-backward-heading-same-level "previous heading of same level")

      ("C-;" org-move-subtree-up)
      ("C-S-e" org-move-subtree-down)

      ("a" org-up-element "parent heading")
      ("i" org-fold-show-subtree)
      )
     "Headers"
     (
      ("A" org-do-promote "promote heading level")
      ("I" org-do-demote "demote heading level")
      ("C-a" org-promote-subtree "promote subtree level")
      ("C-i" org-demote-subtree "demote subtree level")

      ("h" org-toggle-heading)
      ("<return>" org-insert-heading-respect-content :color blue)
      ("S-<return>" org-insert-heading :color blue)

      ("C-<return>" my/org-insert-subheading-respect-content :color blue)
      ("C-S-<return>" org-insert-subheading :color blue)


      ("M-<return>" my/org-insert-heading-above-level-respect-content :color blue)
      ("S-M-<return>" my/org-insert-heading-above-level :color blue)
      )
     "Operations"
     (
      ("d" org-cut-subtree)
      ("<tab>" org-cycle)
      )
     "Exit"
     (("q" nil "Quit")
      ("<escape>" nil "Quit"))))
#+end_src
**** Bibtex
#+begin_src emacs-lisp
(pretty-hydra-define hydra-bibtex-org-ref (:color blue :hint nil)

  ("Open"
  (("p" org-ref-open-bibtex-pdf "PDF")
  ("n" org-ref-open-bibtex-notes "Notes")
  ("b" org-ref-open-in-browser "URL"))

  "Edit"
  (("k" (lambda ()
         (interactive)
         (org-ref-set-bibtex-keywords
          (read-string "Keywords: "
                       (bibtex-autokey-get-field "keywords"))
          t))
   "Keywords")
  ("a" org-ref-replace-nonascii "Replace nonascii")
  ("s" org-ref-sort-bibtex-entry "Sort fields")
  ("T" org-ref-title-case-article "Title case")
  ("S" org-ref-sentence-case-article "Sentence case")
  ("U" (doi-utils-update-bibtex-entry-from-doi (org-ref-bibtex-entry-doi)) "Update entry")
  ("u" doi-utils-update-field "Update field" :color red)
  ("<backspace>" (cl--set-buffer-substring (line-beginning-position) (+ 1 (line-end-position)) "")
   "Delete line" :color red)
  ("d" bibtex-kill-entry "Kill entry")
  ("L" org-ref-clean-bibtex-entry "Clean entry")
  ("A" org-ref-bibtex-assoc-pdf-with-entry "Add pdf")
  ("r" (lambda ()
	 (interactive)
         (bibtex-beginning-of-entry)
         (bibtex-kill-entry)
         (find-file (completing-read
                     "Bibtex file: "
		     (append bibtex-completion-bibliography
			     (f-entries "." (lambda (f) (f-ext? f "bib"))))))
         (goto-char (point-max))
         (bibtex-yank)
         (save-buffer)
         (kill-buffer))
   "Refile entry"))

  "www"
  (("wP" org-ref-bibtex-pubmed "Pubmed")
  ("ww" org-ref-bibtex-wos "WOS")
  ("wc" org-ref-bibtex-wos-citing "WOS citing")
  ("wa" org-ref-bibtex-wos-related "WOS related")
  ("wR" org-ref-bibtex-crossref "Crossref")
  ("wg" org-ref-bibtex-google-scholar "Google Scholar")
  ("we" org-ref-email-bibtex-entry "Email"))


  "Copy"
  (("ce" (lambda ()
	 (interactive)
	 (bibtex-copy-entry-as-kill)
	 (message "Use %s to paste the entry"
		  (substitute-command-keys (format "\\[bibtex-yank]"))))
   "Copy entry")

  ("cky" (save-excursion
	 (bibtex-beginning-of-entry)
	 (when (looking-at bibtex-entry-maybe-empty-head)
	   (kill-new (bibtex-key-in-head))))
   "Copy key")

  ("cf" (save-excursion
	 (bibtex-beginning-of-entry)
	 (kill-new (bibtex-completion-apa-format-reference
		    (cdr (assoc "=key=" (bibtex-parse-entry t))))))
   "Formatted entry"))

  "Navigation"
  (("e" org-ref-bibtex-next-entry "Next entry" :color red)
  ("," org-ref-bibtex-previous-entry "Previous entry" :color red)
  ("<down>" next-line "Next line" :color red)
  ("<up>" previous-line "Previous line" :color red)
  ("<next>" scroll-up-command "Scroll up" :color red)
  ("<prior>" scroll-down-command "Scroll down" :color red)

  ("g" org-ref-bibtex-visible-field "Visible field" :color red)
  ("G" org-ref-bibtex-visible-entry "Visible entry" :color red)
  )


  "Hydras"
  (("F" org-ref-bibtex-file/body "File hydra")
  ("N" org-ref-bibtex-new-entry/body "New entry"))

  (("q" nil "Quit")
      ("<escape>" nil "Quit"))))
#+end_src
**** Function to call hydra of major mode
#+begin_src emacs-lisp
(defun my/hydra-from-major-mode ()
  "Jump to the next relevant section depending on the major mode, or call default."
  (interactive)
  (cond
   ((eq major-mode 'org-mode)
    (hydra-org/body))
   ((eq major-mode 'bibtex-mode)
    (hydra-bibtex-org-ref/body))
   (t
    (message "No major mode hydra"))))
#+end_src
** Calendar
Calendar mode
#+begin_src emacs-lisp
(define-key calendar-mode-map (kbd "a") (lambda () (interactive) (org-eval-in-calendar '(calendar-backward-day 1))))
(define-key calendar-mode-map (kbd "i") (lambda () (interactive) (org-eval-in-calendar '(calendar-forward-day 1))))
(define-key calendar-mode-map (kbd ",") (lambda () (interactive) (org-eval-in-calendar '(calendar-backward-week 1))))
(define-key calendar-mode-map (kbd "e") (lambda () (interactive) (org-eval-in-calendar '(calendar-forward-week 1))))
#+end_src

org-read-date calendar popup
#+begin_src emacs-lisp
(define-key org-read-date-minibuffer-local-map (kbd "<left>") (lambda () (interactive) (org-eval-in-calendar '(calendar-backward-day 1))))
(define-key org-read-date-minibuffer-local-map (kbd "<right>") (lambda () (interactive) (org-eval-in-calendar '(calendar-forward-day 1))))
(define-key org-read-date-minibuffer-local-map (kbd "<up>") (lambda () (interactive) (org-eval-in-calendar '(calendar-backward-week 1))))
(define-key org-read-date-minibuffer-local-map (kbd "<down>") (lambda () (interactive) (org-eval-in-calendar '(calendar-forward-week 1))))

(define-key org-read-date-minibuffer-local-map (kbd "a") (lambda () (interactive) (org-eval-in-calendar '(calendar-backward-day 1))))
(define-key org-read-date-minibuffer-local-map (kbd "i") (lambda () (interactive) (org-eval-in-calendar '(calendar-forward-day 1))))
(define-key org-read-date-minibuffer-local-map (kbd ",") (lambda () (interactive) (org-eval-in-calendar '(calendar-backward-week 1))))
(define-key org-read-date-minibuffer-local-map (kbd "e") (lambda () (interactive) (org-eval-in-calendar '(calendar-forward-week 1))))
#+end_src
** Org mode
#+begin_src emacs-lisp
;; org mode
(define-key org-mode-map (kbd "M-e") 'ignore) ;; it was forward paragraph






;; links
(define-key org-mode-map (kbd "C-c C-l") 'my/org-linkify-region-from-kill-ring)
(define-key org-mode-map (kbd "C-c l") 'org-insert-link)


;; agenda
(define-key org-agenda-mode-map (kbd ",") 'org-agenda-previous-line)
(define-key org-agenda-mode-map (kbd "e") 'org-agenda-next-line)
#+end_src
** Vterm
#+begin_src emacs-lisp
  ;; (define-key vterm-mode-map (kbd "s-<left>")  #'vterm-send-backward-word)
 ;; (define-key vterm-mode-map (kbd "s-<right>") #'vterm-send-forward-word)


(define-key vterm-mode-map (kbd "C-<left>")
      (lambda () (interactive) (vterm-send-key (kbd "C-a"))))

  (define-key vterm-mode-map (kbd "C-<right>")
      (lambda () (interactive) (vterm-send-key (kbd "C-e"))))
#+end_src
** Misc
#+begin_src emacs-lisp
    ;; escape after boon, to make minibuffer quit correctly
    (define-key minibuffer-local-map (kbd "<escape>") 'abort-recursive-edit)
    ;; Make ESC quit prompts
    (global-set-key (kbd "<escape>") 'keyboard-escape-quit)



    ;; replace M-h with C-h
    ;; not needed with new emacs client
    ;; (global-set-key (kbd "M-h") 'help-command)

    ;; yank/paste

    (global-set-key (kbd "M-v") 'yank)
    (global-set-key (kbd "M-S-v") 'yank-pop)
    (global-set-key (kbd "M-c") 'kill-ring-save)
    (global-set-key (kbd "M-S-c") 'kill-region)

    ;; comment
    (global-set-key (kbd "C-k") 'comment-line)


  (global-set-key (kbd "<mouse-2>") nil)
#+end_src
*** Keyboard quit for Android
#+begin_src emacs-lisp
  ;; ;; make keyboard-quit a bit smarter
  ;; (define-advice keyboard-quit
  ;;     (:around (quit) quit-current-context)
  ;;   "Quit the current context.

  ;; When there is an active minibuffer and we are not inside it close
  ;; it.  When we are inside the minibuffer use the regular
  ;; `minibuffer-keyboard-quit' which quits any active region before
  ;; exiting.  When there is no minibuffer `keyboard-quit' unless we
  ;; are defining or executing a macro."
  ;;   (if (active-minibuffer-window)
  ;;       (if (minibufferp)
  ;;           (minibuffer-keyboard-quit)
  ;;         (abort-recursive-edit))
  ;;     (unless (or defining-kbd-macro
  ;;                 executing-kbd-macro)
  ;;       (funcall-interactively quit))))
#+end_src
* References
** Configs
List of interesting emacs configs: https://github.com/caisah/emacs.dz

- https://protesilaos.com - https://github.com/protesilaos/dotfiles/blob/master/emacs/.emacs.d/prot-emacs.org
- https://github.com/Vidianos-Giannitsis/Dotfiles/tree/master
- https://github.com/robert-nogueira/.dotfiles/tree/master/emacs
- https://github.com/garyo/emacs-config/tree/main/lisp
- https://github.com/FilipCon/dotemacs/tree/master
- https://tecosaur.github.io/emacs-config/
- https://joshblais.com/posts/my-literate-doom-emacs-config/
- https://config.phundrak.com/
- https://www.karsdorp.io/posts/dotemacs/
- https://github.com/LionyxML/emacs-solo/blob/main/init.el
- https://github.com/LionyxML/emacs-kick/blob/master/init.el
- https://github.com/a-schaefers/spartan-emacs/tree/main
- https://gitlab.com/magus/mes/-/tree/8615353ec007bd66209ee1ae3badddd26d3a3dc9
- https://github.com/agzam/.doom.d (creator of package wiktionary browser)
- https://github.com/MartinDrees/helmacs/blob/main/emacs/myinit.org
- https://git.sr.ht/~abcdw/rde/tree/master/item/src/rde/features
- https://github.com/bbatsov/emacs.d
- https://github.com/oantolin/emacs-config
- https://github.com/flajann2/emacs-config
** Maybe one day
*** Ace jump mode
(for quick jumping to word/line, in pressing a key) https://github.com/winterTTr/ace-jump-mode?tab=readme-ov-file
*** TODO Abbreviated commands/slash commands + dabbrev for Corfu integration + fancy for preview
Abbrev
https://www.gnu.org/software/emacs/manual/html_node/emacs/Dynamic-Abbrevs.html
https://github.com/jrosdahl/fancy-dabbrev?tab=readme-ov-file
Also this package: https://github.com/bluzky/slash-commands
- https://www.reddit.com/r/emacs/s/89Oa4Zq1o6
*** Browsing
Configs to inspire:
- https://github.com/cadadr/configuration/blob/3e11ef25344188cc55b16f314c3c5358ace8a266/emacs.d/init.el#L6366-L6592
*** Slash commands
*** Some applications frameworks in Emacs
browser, git, etc.
https://github.com/emacs-eaf/emacs-application-framework
** Learning
*** Emacs
[[https://alphapapa.github.io/org-almanac/][Org Almanac]]
https://blog.tjll.net/a-beginners-guide-to-extending-emacs/
*** Lisp
https://protesilaos.com/emacs/emacs-lisp-elements
** Repeat mode
Repeat-mode
https://www.reddit.com/r/emacs/s/DVn40Rt4Qa
https://karthinks.com/software/it-bears-repeating/

** Emacs news
https://planet.emacslife.com/
https://sachachua.com/blog/category/emacs/
