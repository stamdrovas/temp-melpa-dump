;;; volatile-highlights-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from test-volatile-highlights.el

(register-definition-prefixes "test-volatile-highlights" '("vhl/test--"))


;;; Generated autoloads from volatile-highlights.el

(let ((loads (get 'volatile-highlights 'custom-loads))) (if (member '"volatile-highlights" loads) nil (put 'volatile-highlights 'custom-loads (cons '"volatile-highlights" loads)) (put 'editing 'custom-loads (cons 'volatile-highlights (get 'editing 'custom-loads)))))
(defface vhl/default-face '((t :inherit secondary-selection)) "\
Face used for volatile highlights.

Adjust this face to match your theme for clear, unobtrusive feedback.
For guidance on choosing or deriving colors from your theme, see the
project docs: docs/appearance-and-tuning.md." :group 'volatile-highlights)
(defvar volatile-highlights-mode nil "\
Non-nil if Volatile-Highlights mode is enabled.
See the `volatile-highlights-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `volatile-highlights-mode'.")
(custom-autoload 'volatile-highlights-mode "volatile-highlights" nil)
(autoload 'volatile-highlights-mode "volatile-highlights" "\
Global minor mode for transient visual feedback on common operations.

When enabled, operations such as undo, yank, kill/delete,
definition jumps (xref on Emacs 25.1+, `find-tag' on older Emacs),
occur (on Emacs < 28), non-incremental search, and hideshow will
briefly highlight the affected text.  Highlights are cleared on the
next user command.

Customize the group `volatile-highlights' for per-feature toggles
and appearance.

This is a global minor mode.  If called interactively, toggle the
`Volatile-Highlights mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='volatile-highlights-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'vhl/add-range "volatile-highlights" "\
Add a transient highlight for the region [BEG, END) in buffer BUF.

The highlight uses FACE (defaults to `vhl/default-face').  When BUF is
nil, the current buffer is used.

Highlights are cleared on the next user command.  When
`volatile-highlights-mode' is disabled, this function is a no-op.

(fn BEG END &optional BUF FACE)")
(autoload 'vhl/add-position "volatile-highlights" "\
Mark buffer position POS as a 1-character highlight.

Does nothing unless `vhl/highlight-zero-width-ranges' is non-nil.
Optional argument OTHER-ARGS are the same as for `vhl/add-range'.  When
`volatile-highlights-mode' is disabled, this function is a no-op.

(fn POS &rest OTHER-ARGS)")
(autoload 'vhl/clear-all "volatile-highlights" "\
Clear all volatile highlight overlays." t)
(autoload 'vhl/force-clear-all "volatile-highlights" "\
Unconditionally clear all volatile highlight overlays in the current buffer." t)
(register-definition-prefixes "volatile-highlights" '("vhl/"))

;;; End of scraped data

(provide 'volatile-highlights-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; volatile-highlights-autoloads.el ends here
